{"config":{"lang":["en","es","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"d-back Documentation","text":"<p>WebSocket server for Discord integration with d-zone ambient life simulation</p> <p>Welcome to the official documentation for d-back \u2013 the intelligent backend service that powers the magical d-zone ambient life simulation! d-back serves as the real-time bridge between Discord servers and the beautiful d-zone frontend, creating an immersive experience where every Discord user becomes part of a living, breathing digital ecosystem.</p> <p>d-zone is an ambient life simulation where the presence and activity of users in a Discord server subtly influence a living digital environment. Think of it as a digital terrarium that reacts to your community's energy! d-back provides real-time user data through WebSocket connections, making this seamless integration possible.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p> Getting Started</p> <p>Install and run your first WebSocket server in minutes</p> <p> Get Started</p> </li> <li> <p> User Guide</p> <p>Learn how to configure and customize d-back for your needs</p> <p> User Guide</p> </li> <li> <p> API Reference</p> <p>Explore the complete API documentation with detailed examples</p> <p> API Reference</p> </li> <li> <p> Developer Guide</p> <p>Contribute to the project and extend its functionality</p> <p> Developer Guide</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<p>WebSocket Server</p> <p>Real-time bidirectional communication with the d-zone frontend, supporting multiple concurrent connections and efficient message broadcasting.</p> <p>User Activity Simulation</p> <p>Sophisticated mock Discord user data with realistic presence states (online, idle, DND, offline) perfect for development and testing.</p> <p>Multi-Server Support</p> <p>Handle multiple Discord servers simultaneously, each with their own user lists and configurations.</p> <p>OAuth2 Ready</p> <p>Built-in support for Discord OAuth2 authentication, allowing secure user validation and server access control.</p> <p>Static File Serving</p> <p>Serve frontend assets directly from the backend (websockets 10.0+), simplifying deployment and hosting.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Get started with d-back in just a few lines of code:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Optional: Set up custom callbacks\n    server.on_get_user_data(my_user_data_callback)\n    server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\n# Run the server\nasyncio.run(main())\n</code></pre> <p>Or use the command-line interface:</p> <pre><code># Start with default settings\npython -m d_back\n\n# Custom configuration\npython -m d_back --port 8080 --host 0.0.0.0 --static-dir ./my-frontend\n</code></pre>"},{"location":"#project-information","title":"Project Information","text":"<p>Repository: NNTin/d-back on GitHub Package: d-back on PyPI License: MIT License Python: 3.8 or higher</p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to dive in? Here's what you should explore next:</p> <ol> <li>Getting Started - Install d-back and run your first server</li> <li>Mock Data Capabilities - Learn about the comprehensive mock data system for testing without Discord API access</li> <li>d-zone Frontend - Explore the beautiful frontend that brings your Discord community to life</li> <li>API Documentation - Discover all the callback hooks and customization options</li> </ol> <p>Development Ready</p> <p>d-back comes with pre-configured mock Discord servers and realistic user data, making it perfect for development, testing, and demonstration purposes. No Discord API keys required to get started!</p> <p> Built with \u2764\ufe0f for the d-world ecosystem </p>"},{"location":"TESTING_I18N/","title":"Testing Multilingual Documentation","text":"<p>This guide provides comprehensive instructions for testing the mkdocs-static-i18n multilingual documentation implementation for d-back.</p>"},{"location":"TESTING_I18N/#prerequisites","title":"Prerequisites","text":"<p>Before testing, ensure the following are installed:</p> <ol> <li> <p>Install mkdocs-static-i18n:    <pre><code>pip install -e .[docs]\n</code></pre></p> </li> <li> <p>Verify installation:    <pre><code>pip list | grep mkdocs-static-i18n\n</code></pre></p> </li> </ol> <p>You should see output similar to:    <pre><code>mkdocs-static-i18n    1.2.0\n</code></pre></p>"},{"location":"TESTING_I18N/#local-testing","title":"Local Testing","text":""},{"location":"TESTING_I18N/#1-serve-documentation-locally","title":"1. Serve Documentation Locally","text":"<p>Start the MkDocs development server:</p> <pre><code>mkdocs serve\n</code></pre> <p>Expected Output: <pre><code>INFO     -  Building documentation...\nINFO     -  [i18n] enabling 3 language(s): ['en', 'es', 'de']\nINFO     -  [i18n] default/main language: en\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 2.34 seconds\nINFO     -  [00:00:00] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO     -  [00:00:00] Serving on http://127.0.0.1:8000/\n</code></pre></p> <p>Expected Behavior: - Server starts on <code>http://127.0.0.1:8000/</code> - Default language (English) loads - Language selector appears in the top navigation bar (Material theme header)</p>"},{"location":"TESTING_I18N/#2-test-language-switching","title":"2. Test Language Switching","text":"<p>In your browser, navigate to <code>http://127.0.0.1:8000/</code>:</p> <ol> <li>Locate the language selector in the top navigation bar (next to the search icon)</li> <li>Click the language selector dropdown</li> <li>Select \"Espa\u00f1ol\":</li> <li>URL should change to <code>/es/</code></li> <li>Page content should be in Spanish</li> <li>Navigation items should be translated (e.g., \"Inicio\", \"Primeros Pasos\")</li> <li>Select \"Deutsch\":</li> <li>URL should change to <code>/de/</code></li> <li>Page content should be in German</li> <li>Navigation items should be translated (e.g., \"Startseite\", \"Erste Schritte\")</li> <li>Select \"English\":</li> <li>URL should return to <code>/</code></li> <li>Page content should be in English</li> </ol> <p>What to Check: - \u2705 Navigation items are properly translated - \u2705 Page content matches the selected language - \u2705 Code examples remain in English (universal) - \u2705 Links work correctly across language versions - \u2705 No broken links or 404 errors</p>"},{"location":"TESTING_I18N/#3-test-fallback-behavior","title":"3. Test Fallback Behavior","text":"<p>The configuration includes <code>fallback_to_default: true</code>, which means:</p> <ul> <li>If a translation file is missing, the English version will be displayed</li> <li>The language selector should still work</li> <li>No errors should occur</li> </ul> <p>To test this (optional): 1. Temporarily rename a translation file (e.g., <code>getting-started.es.md</code> \u2192 <code>getting-started.es.md.bak</code>) 2. Reload the Spanish version 3. The English content should display 4. Restore the file after testing</p>"},{"location":"TESTING_I18N/#4-test-all-pages","title":"4. Test All Pages","text":"<p>Navigate through all documentation pages in each language:</p> <p>English (<code>/</code>): - Home (<code>/</code>) - Getting Started (<code>/getting-started/</code>) - User Guide (<code>/user-guide/</code>)   - Overview (<code>/user-guide/</code>)   - Configuration (<code>/user-guide/configuration/</code>)   - Callbacks &amp; Customization (<code>/user-guide/callbacks/</code>)   - Custom Data Providers (<code>/user-guide/custom-data-providers/</code>) - API Reference (<code>/api-reference/</code>) - Developer Guide (<code>/developer-guide/</code>)</p> <p>Spanish (<code>/es/</code>): - Inicio (<code>/es/</code>) - Primeros Pasos (<code>/es/getting-started/</code>) - Gu\u00eda del Usuario (<code>/es/user-guide/</code>)   - Resumen (<code>/es/user-guide/</code>)   - Configuraci\u00f3n (<code>/es/user-guide/configuration/</code>)   - Callbacks y Personalizaci\u00f3n (<code>/es/user-guide/callbacks/</code>)   - Proveedores de Datos Personalizados (<code>/es/user-guide/custom-data-providers/</code>) - Referencia de API (<code>/es/api-reference/</code>) - Gu\u00eda del Desarrollador (<code>/es/developer-guide/</code>)</p> <p>German (<code>/de/</code>): - Startseite (<code>/de/</code>) - Erste Schritte (<code>/de/getting-started/</code>) - Benutzerhandbuch (<code>/de/user-guide/</code>)   - \u00dcbersicht (<code>/de/user-guide/</code>)   - Konfiguration (<code>/de/user-guide/configuration/</code>)   - Callbacks &amp; Anpassung (<code>/de/user-guide/callbacks/</code>)   - Benutzerdefinierte Datenanbieter (<code>/de/user-guide/custom-data-providers/</code>) - API-Referenz (<code>/de/api-reference/</code>) - Entwicklerhandbuch (<code>/de/developer-guide/</code>)</p>"},{"location":"TESTING_I18N/#build-testing","title":"Build Testing","text":""},{"location":"TESTING_I18N/#1-build-all-languages","title":"1. Build All Languages","text":"<p>Build the complete documentation site:</p> <pre><code>mkdocs build\n</code></pre> <p>Expected Output: <pre><code>INFO     -  Cleaning site directory\nINFO     -  Building documentation to directory: /path/to/d-back/site\nINFO     -  [i18n] enabling 3 language(s): ['en', 'es', 'de']\nINFO     -  [i18n] default/main language: en\nINFO     -  [i18n] building site for 'en' to 'site/'\nINFO     -  [i18n] building site for 'es' to 'site/es'\nINFO     -  [i18n] building site for 'de' to 'site/de'\nINFO     -  Documentation built in 3.21 seconds\n</code></pre></p>"},{"location":"TESTING_I18N/#2-verify-build-output","title":"2. Verify Build Output","text":"<p>Check that all three language versions were built:</p> <p>Windows PowerShell: <pre><code>Get-ChildItem site -Directory\n</code></pre></p> <p>macOS/Linux: <pre><code>ls -la site/\n</code></pre></p> <p>Expected Structure: <pre><code>site/\n\u251c\u2500\u2500 index.html             # English (default)\n\u251c\u2500\u2500 getting-started/\n\u251c\u2500\u2500 user-guide/\n\u251c\u2500\u2500 api-reference/\n\u251c\u2500\u2500 developer-guide/\n\u251c\u2500\u2500 es/                    # Spanish\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 user-guide/\n\u2502   \u251c\u2500\u2500 api-reference/\n\u2502   \u2514\u2500\u2500 developer-guide/\n\u2514\u2500\u2500 de/                    # German\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 getting-started/\n    \u251c\u2500\u2500 user-guide/\n    \u251c\u2500\u2500 api-reference/\n    \u2514\u2500\u2500 developer-guide/\n</code></pre></p>"},{"location":"TESTING_I18N/#3-verify-html-language-links","title":"3. Verify HTML Language Links","text":"<p>Check that alternate language links are present in the HTML:</p> <p>Check English page: <pre><code>grep -A 5 '&lt;link rel=\"alternate\"' site/index.html\n</code></pre></p> <p>Expected Result: <pre><code>&lt;link rel=\"alternate\" hreflang=\"en\" href=\"/d-back/\" /&gt;\n&lt;link rel=\"alternate\" hreflang=\"es\" href=\"/d-back/es/\" /&gt;\n&lt;link rel=\"alternate\" hreflang=\"de\" href=\"/d-back/de/\" /&gt;\n</code></pre></p>"},{"location":"TESTING_I18N/#4-serve-built-site","title":"4. Serve Built Site","text":"<p>Test the built site locally:</p> <p>Windows PowerShell: <pre><code>python -m http.server 8000 --directory site\n</code></pre></p> <p>macOS/Linux: <pre><code>cd site &amp;&amp; python -m http.server 8000\n</code></pre></p> <p>Navigate to <code>http://localhost:8000</code> and test language switching as before.</p>"},{"location":"TESTING_I18N/#validation-checklist","title":"Validation Checklist","text":"<p>Use this checklist to validate the implementation:</p> <ul> <li>[ ] Language selector appears in the navigation bar</li> <li>[ ] All three languages selectable (English, Espa\u00f1ol, Deutsch)</li> <li>[ ] Navigation items translated correctly according to <code>nav_translations</code> in <code>mkdocs.yml</code></li> <li>[ ] Page content is translated (except code examples)</li> <li>[ ] Code examples remain in English (universal programming language)</li> <li>[ ] Links work across languages (relative links resolve correctly)</li> <li>[ ] Search works in each language (Material theme search)</li> <li>[ ] Fallback to English works for missing translations</li> <li>[ ] No console errors in browser developer tools</li> <li>[ ] Material theme features work in all languages (navigation, search, dark mode)</li> <li>[ ] Build completes successfully without errors or warnings</li> <li>[ ] All three language directories exist in <code>site/</code> after build</li> <li>[ ] Alternate language links present in HTML <code>&lt;head&gt;</code> tags</li> </ul>"},{"location":"TESTING_I18N/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"TESTING_I18N/#issue-language-selector-not-appearing","title":"Issue: Language Selector Not Appearing","text":"<p>Symptoms: Language selector is missing from the navigation bar</p> <p>Solutions: 1. Verify <code>reconfigure_material: true</code> is set in <code>mkdocs.yml</code>:    <pre><code>plugins:\n  - i18n:\n      reconfigure_material: true\n</code></pre> 2. Check that <code>navigation.instant</code> feature is NOT enabled in theme features (it conflicts with language switcher) 3. Clear browser cache and reload: <code>Ctrl+Shift+R</code> (Windows/Linux) or <code>Cmd+Shift+R</code> (macOS) 4. Rebuild with clean: <code>mkdocs build --clean</code></p>"},{"location":"TESTING_I18N/#issue-translations-not-loading","title":"Issue: Translations Not Loading","text":"<p>Symptoms: Clicking language selector doesn't change content, or shows 404 errors</p> <p>Solutions: 1. Verify file naming follows suffix pattern: <code>index.es.md</code>, <code>index.de.md</code> (not folder structure) 2. Check that files are in the correct directory (<code>docs/</code>, not <code>docs/es/</code> or <code>docs/de/</code>) 3. Verify file extensions are <code>.md</code> not <code>.markdown</code> 4. Rebuild: <code>mkdocs build --clean</code> 5. Check MkDocs console output for build warnings</p>"},{"location":"TESTING_I18N/#issue-navigation-not-translated","title":"Issue: Navigation Not Translated","text":"<p>Symptoms: Navigation items remain in English in translated versions</p> <p>Solutions: 1. Verify <code>nav_translations</code> are correctly defined in <code>mkdocs.yml</code> for both <code>es</code> and <code>de</code> 2. Check that navigation item names in <code>nav_translations</code> match EXACTLY the names in the <code>nav</code> section 3. Verify YAML indentation is correct (use spaces, not tabs) 4. Rebuild and check console output for warnings</p>"},{"location":"TESTING_I18N/#issue-search-not-working-in-translated-versions","title":"Issue: Search Not Working in Translated Versions","text":"<p>Symptoms: Search returns no results or only English results in Spanish/German versions</p> <p>Solutions: 1. Verify <code>reconfigure_search: true</code> is set in <code>mkdocs.yml</code>:    <pre><code>plugins:\n  - i18n:\n      reconfigure_search: true\n</code></pre> 2. Check that <code>search</code> plugin is listed BEFORE <code>i18n</code> plugin in <code>plugins</code> list 3. Rebuild with clean: <code>mkdocs build --clean</code></p>"},{"location":"TESTING_I18N/#issue-build-errors","title":"Issue: Build Errors","text":"<p>Symptoms: <code>mkdocs build</code> fails with errors</p> <p>Solutions: 1. Check MkDocs version: <code>mkdocs --version</code> (should be 1.5.0+) 2. Check mkdocs-static-i18n version: <code>pip show mkdocs-static-i18n</code> (should be 1.2.0+) 3. Verify YAML syntax in <code>mkdocs.yml</code> is valid 4. Check for typos in language locales: must be <code>en</code>, <code>es</code>, <code>de</code> (not <code>en-US</code>, <code>es-ES</code>, etc.) 5. Reinstall dependencies: <code>pip install -e .[docs] --force-reinstall</code></p>"},{"location":"TESTING_I18N/#testing-commands-summary","title":"Testing Commands Summary","text":"<pre><code># Install dependencies\npip install -e .[docs]\n\n# Verify installation\npip list | grep mkdocs-static-i18n\n\n# Serve locally with live reload\nmkdocs serve\n\n# Build all languages\nmkdocs build\n\n# Clean build (removes site/ directory first)\nmkdocs build --clean\n\n# Serve built site\npython -m http.server 8000 --directory site\n</code></pre>"},{"location":"TESTING_I18N/#testing-mike-versioning","title":"Testing Mike Versioning","text":"<p>This section explains how to test mike versioning locally with the multilingual setup.</p>"},{"location":"TESTING_I18N/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Ensure mike is installed: <code>pip list | grep mike</code></li> <li>Verify mkdocs.yml has <code>extra.version.provider: mike</code> configured</li> </ul>"},{"location":"TESTING_I18N/#testing-version-deployment","title":"Testing Version Deployment","text":"<p>Deploy test versions to verify mike integration:</p> <pre><code># Deploy a test version\nmike deploy 0.0.14-test\n\n# Deploy with alias\nmike deploy 0.0.15-test latest\n\n# Set default version\nmike set-default latest\n\n# List all versions\nmike list\n\n# Serve versioned docs\nmike serve\n</code></pre>"},{"location":"TESTING_I18N/#verification-checklist","title":"Verification Checklist","text":"<ul> <li>[ ] Version selector appears in top navigation bar</li> <li>[ ] Language selector appears alongside version selector</li> <li>[ ] Both selectors work independently without conflicts</li> <li>[ ] All three languages (English, Spanish, German) work in each version</li> <li>[ ] Switching versions preserves the selected language</li> <li>[ ] Switching languages preserves the selected version</li> <li>[ ] URLs follow pattern: <code>/version/language/</code> (e.g., <code>/latest/es/</code>, <code>/0.0.14/de/</code>)</li> <li>[ ] Default version loads correctly</li> <li>[ ] Version aliases resolve correctly</li> </ul>"},{"location":"TESTING_I18N/#testing-version-switching","title":"Testing Version Switching","text":"<ol> <li> <p>Deploy multiple test versions:    <pre><code>mike deploy 0.0.14-test\nmike deploy 0.0.15-test latest\nmike deploy dev-test dev\nmike set-default latest\n</code></pre></p> </li> <li> <p>Serve and test:    <pre><code>mike serve\n</code></pre></p> </li> <li> <p>Visit http://localhost:8000 and verify:</p> </li> <li>Default version (latest) loads</li> <li>Version selector shows all three versions</li> <li>Clicking each version switches correctly</li> <li>Language selector works in each version</li> </ol>"},{"location":"TESTING_I18N/#testing-multilingual-versioning","title":"Testing Multilingual Versioning","text":"<p>Test English version: - Visit http://localhost:8000/latest/ - Verify content is in English - Switch to version 0.0.14-test - Verify English content loads</p> <p>Test Spanish version: - Visit http://localhost:8000/latest/es/ - Verify content is in Spanish - Switch to version 0.0.14-test - Verify Spanish content loads</p> <p>Test German version: - Visit http://localhost:8000/latest/de/ - Verify content is in German - Switch to version 0.0.14-test - Verify German content loads</p>"},{"location":"TESTING_I18N/#cleanup-test-versions","title":"Cleanup Test Versions","text":"<p>After testing, clean up test versions:</p> <pre><code># Delete test versions\nmike delete 0.0.14-test\nmike delete 0.0.15-test\nmike delete dev-test\n\n# Verify deletion\nmike list\n</code></pre>"},{"location":"TESTING_I18N/#common-issues","title":"Common Issues","text":"<p>Issue: Version selector not appearing - Solution: Deploy at least two versions - Solution: Verify <code>extra.version.provider: mike</code> in mkdocs.yml</p> <p>Issue: Language selector disappears when using mike - Solution: Verify <code>reconfigure_material: true</code> in i18n plugin configuration - Solution: Ensure mkdocs-static-i18n is installed</p> <p>Issue: URLs not working correctly - Solution: Check that both mike and i18n plugins are properly configured - Solution: Clear browser cache and retry</p> <p>Note: This testing is for local development only. GitHub Actions will handle automated deployment in production.</p>"},{"location":"TESTING_I18N/#next-steps","title":"Next Steps","text":"<p>After successful local testing:</p> <ol> <li>Commit changes to your feature branch</li> <li>Push to GitHub</li> <li>Create Pull Request for review</li> <li>GitHub Actions (if configured) will automatically build and deploy to GitHub Pages</li> <li>Future phase: Consider integrating Crowdin for community-driven translations</li> <li>Future phase: Set up automated deployment workflow</li> </ol>"},{"location":"TESTING_I18N/#additional-testing-advanced","title":"Additional Testing (Advanced)","text":""},{"location":"TESTING_I18N/#test-seo-and-alternate-links","title":"Test SEO and Alternate Links","text":"<p>Use browser developer tools to verify alternate language links:</p> <ol> <li>Open browser developer tools (<code>F12</code>)</li> <li>Navigate to the Elements/Inspector tab</li> <li>Search for <code>&lt;link rel=\"alternate\"</code></li> <li>Verify all three languages are listed with correct <code>hreflang</code> and <code>href</code> attributes</li> </ol>"},{"location":"TESTING_I18N/#test-search-functionality","title":"Test Search Functionality","text":"<ol> <li>In each language version, use the search bar</li> <li>Search for a term that appears in documentation (e.g., \"WebSocket\", \"server\", \"callback\")</li> <li>Verify search results are relevant and in the correct language</li> <li>Verify search doesn't return duplicate results across languages</li> </ol>"},{"location":"TESTING_I18N/#test-mobile-responsiveness","title":"Test Mobile Responsiveness","text":"<ol> <li>Open documentation in browser</li> <li>Open developer tools (<code>F12</code>)</li> <li>Toggle device toolbar (mobile view)</li> <li>Test language selector on mobile devices</li> <li>Verify navigation and content are properly responsive</li> </ol>"},{"location":"TESTING_I18N/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter issues during testing:</p> <ol> <li>Check this guide first for solutions</li> <li>Review MkDocs console output for error messages</li> <li>Check browser console for JavaScript errors</li> <li>Create a GitHub Issue with:</li> <li>Description of the problem</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Console output or error messages</li> <li>Environment details (OS, Python version, MkDocs version)</li> </ol>"},{"location":"TESTING_I18N/#conclusion","title":"Conclusion","text":"<p>The multilingual documentation implementation is complete when:</p> <ul> <li>\u2705 All pages exist in all three languages (English, Spanish, German)</li> <li>\u2705 Language selector works correctly</li> <li>\u2705 Navigation is properly translated</li> <li>\u2705 Build completes without errors</li> <li>\u2705 All validation checklist items are checked</li> </ul> <p>Happy testing! \ud83d\ude80</p>"},{"location":"VERCEL_SETUP/","title":"Vercel Integration for Test Reports","text":"<p>This document explains how to set up Vercel integration for automatically deploying Allure test reports.</p>"},{"location":"VERCEL_SETUP/#required-secrets","title":"Required Secrets","text":"<p>You need to configure the following GitHub repository secrets:</p>"},{"location":"VERCEL_SETUP/#1-vercel_token","title":"1. VERCEL_TOKEN","text":"<ol> <li>Go to Vercel Dashboard</li> <li>Click on your profile \u2192 Settings \u2192 Tokens</li> <li>Create a new token with appropriate scope</li> <li>Copy the token and add it as <code>VERCEL_TOKEN</code> in GitHub repository secrets</li> </ol>"},{"location":"VERCEL_SETUP/#2-vercel_project_id","title":"2. VERCEL_PROJECT_ID","text":"<ol> <li>Create a new project on Vercel (can be empty initially)</li> <li>Go to the project settings</li> <li>Copy the Project ID from the General tab</li> <li>Add it as <code>VERCEL_PROJECT_ID</code> in GitHub repository secrets</li> </ol>"},{"location":"VERCEL_SETUP/#3-vercel_org_id","title":"3. VERCEL_ORG_ID","text":"<ol> <li>Go to your Vercel team/organization settings</li> <li>Copy the Team ID or Organization ID</li> <li>Add it as <code>VERCEL_ORG_ID</code> in GitHub repository secrets</li> </ol>"},{"location":"VERCEL_SETUP/#how-it-works","title":"How it works","text":"<ol> <li>Test Execution: All test matrix jobs run and generate Allure results</li> <li>Artifact Upload: Each job uploads its Allure results as artifacts</li> <li>Report Generation: After all tests complete, a separate job:</li> <li>Downloads all artifacts</li> <li>Merges them into a single allure-results directory  </li> <li>Generates HTML report using Allure CLI</li> <li>Deploys the report to Vercel</li> </ol>"},{"location":"VERCEL_SETUP/#accessing-reports","title":"Accessing Reports","text":"<p>Once deployed, the reports will be available at: <pre><code>https://your-project-name.vercel.app\n</code></pre></p> <p>Each pull request will get its own deployment with a unique URL that will be shown in the GitHub Actions logs.</p>"},{"location":"VERCEL_SETUP/#local-testing","title":"Local Testing","text":"<p>To test the Allure integration locally:</p> <pre><code># Install allure-pytest\npip install allure-pytest\n\n# Run tests with allure\npytest --alluredir=allure-results tests/\n\n# Generate HTML report (requires Allure CLI)\nallure generate allure-results/ --clean -o allure-report/\n\n# Serve the report locally\nallure open allure-report/\n</code></pre>"},{"location":"VERCEL_SETUP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"VERCEL_SETUP/#missing-artifacts","title":"Missing artifacts","text":"<ul> <li>Check that the test jobs completed successfully</li> <li>Verify the <code>allure-results/</code> directory contains JSON files</li> <li>Ensure <code>--alluredir</code> path matches the artifact upload path</li> </ul>"},{"location":"VERCEL_SETUP/#deployment-failures","title":"Deployment failures","text":"<ul> <li>Verify all three Vercel secrets are correctly set</li> <li>Check that the Vercel project exists and is accessible</li> <li>Review the GitHub Actions logs for detailed error messages</li> </ul>"},{"location":"VERCEL_SETUP/#empty-reports","title":"Empty reports","text":"<ul> <li>Ensure tests are actually running and generating results</li> <li>Check that allure-pytest is installed via tox deps</li> <li>Verify the allure-results directory structure</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides complete API documentation for d-back, automatically generated from the source code docstrings. All classes and methods include detailed descriptions, parameters, return values, and examples.</p>"},{"location":"api-reference/#introduction","title":"Introduction","text":"<p>The d-back API is organized into two main components:</p> <ul> <li>WebSocketServer: The main server class for handling WebSocket connections, HTTP requests, and message broadcasting</li> <li>MockDataProvider: Provides mock data and periodic background tasks for development and testing</li> </ul> <p>All API documentation follows Google-style docstrings with comprehensive examples. For usage patterns and integration guides, see the User Guide.</p>"},{"location":"api-reference/#websocketserver","title":"WebSocketServer","text":"<p>The main server class for handling WebSocket connections, HTTP requests, and message broadcasting. This is your primary interface to d-back functionality.</p>"},{"location":"api-reference/#d_back.server.WebSocketServer","title":"<code>WebSocketServer(port=3000, host='localhost')</code>","text":"<p>WebSocket server for managing real-time connections and broadcasting messages.</p> <p>This server handles WebSocket connections for Discord-like applications, providing real-time communication, user presence management, message broadcasting, and static file serving. It supports custom data providers through callback registration and includes mock data functionality for testing.</p> <p>The server automatically detects websockets library version and enables HTTP support when available (websockets 10.0+ with Python 3.8+).</p> <p>Attributes:</p> Name Type Description <code>port</code> <code>int</code> <p>The port number the server listens on.</p> <code>host</code> <code>str</code> <p>The hostname or IP address the server binds to.</p> <code>server</code> <p>The websockets server instance.</p> <code>connections</code> <code>set</code> <p>Set of active WebSocket connections.</p> <code>static_dir</code> <code>Path</code> <p>Directory path for serving static files.</p> <code>mock_provider</code> <code>MockDataProvider</code> <p>Provider for mock test data.</p> Example <p>Basic usage::</p> <pre><code>server = WebSocketServer(port=3000, host=\"localhost\")\nawait server.run_forever()\n</code></pre> <p>With custom data callbacks::</p> <pre><code>def get_servers():\n    return {\n        \"server1\": {\"id\": \"server1\", \"name\": \"My Server\", \"default\": True}\n    }\n\ndef get_users(server_id):\n    return {\n        \"user123\": {\n            \"uid\": \"user123\",\n            \"username\": \"JohnDoe\",\n            \"status\": \"online\",\n            \"roleColor\": \"#3498db\"\n        }\n    }\n\nserver = WebSocketServer()\nserver.on_get_server_data(get_servers)\nserver.on_get_user_data(get_users)\nawait server.run_forever()\n</code></pre> <p>Initialize the WebSocket server.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>The port number to listen on. Defaults to 3000.</p> <code>3000</code> <code>host</code> <code>str</code> <p>The hostname or IP address to bind to. Defaults to \"localhost\".   Use \"0.0.0.0\" to accept connections from any interface.</p> <code>'localhost'</code> Note <p>The server initializes with mock data provider by default. Register custom callbacks using on_get_server_data() and on_get_user_data() to override mock data behavior.</p> Source code in <code>d_back/server.py</code> <pre><code>def __init__(self, port: int = 3000, host: str = \"localhost\"):\n    \"\"\"Initialize the WebSocket server.\n\n    Args:\n        port: The port number to listen on. Defaults to 3000.\n        host: The hostname or IP address to bind to. Defaults to \"localhost\".\n              Use \"0.0.0.0\" to accept connections from any interface.\n\n    Note:\n        The server initializes with mock data provider by default. Register custom\n        callbacks using on_get_server_data() and on_get_user_data() to override\n        mock data behavior.\n    \"\"\"\n    self.port = port\n    self.host = host\n    self.server = None  # WebSocket server instance\n    self.connections: set = set()  # Store active connections\n    self._on_get_server_data: Optional[Callable[[], Awaitable[Dict[str, Dict[str, Any]]]]] = None\n    self._on_get_user_data: Optional[Callable[[str], Awaitable[Dict[str, Dict[str, Any]]]]] = None\n    self._on_static_request: Optional[Callable[[str], Awaitable[Optional[Tuple[str, str]]]]] = None\n    self.static_dir = Path(__file__).parent / \"dist\"  # Default static directory\n    self._on_validate_discord_user: Optional[Callable[[str, Dict[str, Any], str], Awaitable[bool]]] = None\n    self._on_get_client_id: Optional[Callable[[str], Awaitable[str]]] = None\n    self.mock_provider = MockDataProvider(self)  # Mock data provider\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.start","title":"<code>start()</code>  <code>async</code>","text":"<p>Start the WebSocket server and wait for it to close.</p> <p>This method initializes the websockets server with the configured host and port, registers the connection handler and HTTP request processor, and then waits for the server to close.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>OSError</code> <p>If the port is already in use or network binding fails.</p> <code>Exception</code> <p>For other server startup failures.</p> Note <p>This method blocks until the server is stopped. Use run_forever() for a more convenient async context manager approach.</p> Source code in <code>d_back/server.py</code> <pre><code>async def start(self) -&gt; None:\n    \"\"\"Start the WebSocket server and wait for it to close.\n\n    This method initializes the websockets server with the configured host and port,\n    registers the connection handler and HTTP request processor, and then waits\n    for the server to close.\n\n    Returns:\n        None\n\n    Raises:\n        OSError: If the port is already in use or network binding fails.\n        Exception: For other server startup failures.\n\n    Note:\n        This method blocks until the server is stopped. Use run_forever() for\n        a more convenient async context manager approach.\n    \"\"\"\n    self.server = await websockets.serve(\n        self._handler, \n        self.host, \n        self.port, \n        process_request=self._process_request\n    )\n    print(f\"WebSocket server started on ws://{self.host}:{self.port}\")\n    await self.server.wait_closed()\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>Gracefully stop the WebSocket server.</p> <p>This method closes the server and waits for all existing connections to terminate. Active connections are allowed to finish their current operations before shutdown.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Note <p>After calling this method, the server can be restarted by calling start() again.</p> Source code in <code>d_back/server.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"Gracefully stop the WebSocket server.\n\n    This method closes the server and waits for all existing connections to terminate.\n    Active connections are allowed to finish their current operations before shutdown.\n\n    Returns:\n        None\n\n    Note:\n        After calling this method, the server can be restarted by calling start() again.\n    \"\"\"\n    if self.server:\n        self.server.close()\n        await self.server.wait_closed()\n        print(\"WebSocket server stopped\")\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.broadcast_message","title":"<code>broadcast_message(server, uid, message, channel)</code>  <code>async</code>","text":"<p>Broadcast a chat message to all clients connected to the specified server.</p> <p>Sends a message from a user to all WebSocket clients currently connected to the same Discord server. Automatically handles connection failures and removes closed connections.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str</code> <p>The Discord server ID where the message is sent.</p> required <code>uid</code> <code>str</code> <p>The user ID of the message sender.</p> required <code>message</code> <code>str</code> <p>The text content of the message.</p> required <code>channel</code> <code>str</code> <p>The channel ID where the message is posted.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>ConnectionClosed</code> <p>When attempting to send to a closed connection (handled internally, connection is removed).</p> <p>Examples:</p> <pre><code>await server.broadcast_message(\n    server=\"232769614004748288\",\n    uid=\"user123\",\n    message=\"Hello everyone!\",\n    channel=\"general\"\n)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>async def broadcast_message(self, server: str, uid: str, message: str, channel: str) -&gt; None:\n    \"\"\"Broadcast a chat message to all clients connected to the specified server.\n\n    Sends a message from a user to all WebSocket clients currently connected to\n    the same Discord server. Automatically handles connection failures and removes\n    closed connections.\n\n    Args:\n        server: The Discord server ID where the message is sent.\n        uid: The user ID of the message sender.\n        message: The text content of the message.\n        channel: The channel ID where the message is posted.\n\n    Returns:\n        None\n\n    Raises:\n        websockets.ConnectionClosed: When attempting to send to a closed connection\n            (handled internally, connection is removed).\n\n    Examples:\n\n        await server.broadcast_message(\n            server=\"232769614004748288\",\n            uid=\"user123\",\n            message=\"Hello everyone!\",\n            channel=\"general\"\n        )\n    \"\"\"\n    # Filter connections to only include those connected to the specified server\n    # Use discordServer like the original implementation\n    server_connections = [ws for ws in self.connections if hasattr(ws, 'discordServer') and ws.discordServer == server]\n\n    if not server_connections:\n        print(f\"[INFO] No connections to broadcast to for server: {server}\")\n        return\n\n    msg = {\n        \"type\": \"message\",\n        \"server\": server,\n        \"data\": {\n            \"uid\": uid,\n            \"message\": message,\n            \"channel\": channel\n        }\n    }\n\n    print(f\"[BROADCAST] Sending message to {len(server_connections)} connections on server {server}: {message}\")\n\n    # Create a copy to avoid modification during iteration\n    connections_copy = server_connections.copy()\n\n    for websocket in connections_copy:\n        try:\n            await websocket.send(json.dumps(msg))\n        except websockets.ConnectionClosed:\n            print(\"[INFO] Removed closed connection during broadcast\")\n            # Remove closed connections\n            self.connections.discard(websocket)\n        except Exception as e:\n            print(f\"[ERROR] Failed to send message to connection: {e}\")\n            # Optionally remove problematic connections\n            self.connections.discard(websocket)\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.on_get_server_data","title":"<code>on_get_server_data(callback)</code>","text":"<p>Register a callback to provide server configuration data.</p> <p>The callback function will be called to retrieve the list of available Discord servers and their configurations. This overrides the default mock data provider.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[], Awaitable[Dict[str, Dict[str, Any]]]]</code> <p>An async callable that returns a dictionary of server configurations. Expected signature: async def callback() -&gt; Dict[str, Dict[str, Any]] Each server dict should contain: id, name, default (bool), passworded (bool)</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>async def get_servers():\n    return {\n        \"server1\": {\n            \"id\": \"server1\",\n            \"name\": \"My Server\",\n            \"default\": True,\n            \"passworded\": False\n        }\n    }\n\nserver.on_get_server_data(get_servers)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def on_get_server_data(self, callback: Callable[[], Awaitable[Dict[str, Dict[str, Any]]]]) -&gt; None:\n    \"\"\"Register a callback to provide server configuration data.\n\n    The callback function will be called to retrieve the list of available Discord\n    servers and their configurations. This overrides the default mock data provider.\n\n    Args:\n        callback: An async callable that returns a dictionary of server configurations.\n            Expected signature: async def callback() -&gt; Dict[str, Dict[str, Any]]\n            Each server dict should contain: id, name, default (bool), passworded (bool)\n\n    Returns:\n        None\n\n    Examples:\n\n        async def get_servers():\n            return {\n                \"server1\": {\n                    \"id\": \"server1\",\n                    \"name\": \"My Server\",\n                    \"default\": True,\n                    \"passworded\": False\n                }\n            }\n\n        server.on_get_server_data(get_servers)\n    \"\"\"\n    self._on_get_server_data = callback\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.on_get_user_data","title":"<code>on_get_user_data(callback)</code>","text":"<p>Register a callback to provide user data for a specific server.</p> <p>The callback function will be called to retrieve user information for clients connecting to a Discord server. This overrides the default mock data provider.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[str], Awaitable[Dict[str, Dict[str, Any]]]]</code> <p>An async callable that takes a server ID and returns user data. Expected signature: async def callback(server_id: str) -&gt; Dict[str, Dict[str, Any]] Each user dict should contain: uid, username, status, roleColor</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>async def get_users(server_id):\n    return {\n        \"user123\": {\n            \"uid\": \"user123\",\n            \"username\": \"JohnDoe\",\n            \"status\": \"online\",\n            \"roleColor\": \"#3498db\"\n        }\n    }\n\nserver.on_get_user_data(get_users)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def on_get_user_data(self, callback: Callable[[str], Awaitable[Dict[str, Dict[str, Any]]]]) -&gt; None:\n    \"\"\"Register a callback to provide user data for a specific server.\n\n    The callback function will be called to retrieve user information for clients\n    connecting to a Discord server. This overrides the default mock data provider.\n\n    Args:\n        callback: An async callable that takes a server ID and returns user data.\n            Expected signature: async def callback(server_id: str) -&gt; Dict[str, Dict[str, Any]]\n            Each user dict should contain: uid, username, status, roleColor\n\n    Returns:\n        None\n\n    Examples:\n\n        async def get_users(server_id):\n            return {\n                \"user123\": {\n                    \"uid\": \"user123\",\n                    \"username\": \"JohnDoe\",\n                    \"status\": \"online\",\n                    \"roleColor\": \"#3498db\"\n                }\n            }\n\n        server.on_get_user_data(get_users)\n    \"\"\"\n    self._on_get_user_data = callback\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.on_static_request","title":"<code>on_static_request(callback)</code>","text":"<p>Register a callback for custom static file handling.</p> <p>The callback function allows you to serve custom content for specific paths, overriding the default static file handler. Return None to use default handling.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[str], Awaitable[Optional[Tuple[str, str]]]]</code> <p>An async callable that takes a path and returns custom content. Expected signature: async def callback(path: str) -&gt; Optional[Tuple[str, str]] Return None to let default handler process the request, or return (content_type, content) to serve custom content.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>async def custom_handler(path):\n    if path == \"/api/custom\":\n        return \"application/json\", '{\"status\": \"ok\"}'\n    return None  # Let default handler take over\n\nserver.on_static_request(custom_handler)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def on_static_request(self, callback: Callable[[str], Awaitable[Optional[Tuple[str, str]]]]) -&gt; None:\n    \"\"\"Register a callback for custom static file handling.\n\n    The callback function allows you to serve custom content for specific paths,\n    overriding the default static file handler. Return None to use default handling.\n\n    Args:\n        callback: An async callable that takes a path and returns custom content.\n            Expected signature: async def callback(path: str) -&gt; Optional[Tuple[str, str]]\n            Return None to let default handler process the request, or\n            return (content_type, content) to serve custom content.\n\n    Returns:\n        None\n\n    Examples:\n\n        async def custom_handler(path):\n            if path == \"/api/custom\":\n                return \"application/json\", '{\"status\": \"ok\"}'\n            return None  # Let default handler take over\n\n        server.on_static_request(custom_handler)\n    \"\"\"\n    self._on_static_request = callback\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.on_validate_discord_user","title":"<code>on_validate_discord_user(callback)</code>","text":"<p>Register a callback to validate Discord OAuth users.</p> <p>The callback function will be called to verify Discord OAuth tokens and validate user permissions for accessing the WebSocket server.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[str, Dict[str, Any], str], Awaitable[bool]]</code> <p>An async callable that validates a Discord OAuth token and user info. Expected signature: async def callback(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool Should return True if the user is valid and authorized.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>async def validate_user(token, user_info, server_id):\n    # Verify token with Discord API\n    # Check user permissions for the specific server\n    return is_valid and is_authorized\n\nserver.on_validate_discord_user(validate_user)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def on_validate_discord_user(self, callback: Callable[[str, Dict[str, Any], str], Awaitable[bool]]) -&gt; None:\n    \"\"\"Register a callback to validate Discord OAuth users.\n\n    The callback function will be called to verify Discord OAuth tokens and\n    validate user permissions for accessing the WebSocket server.\n\n    Args:\n        callback: An async callable that validates a Discord OAuth token and user info.\n            Expected signature: async def callback(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool\n            Should return True if the user is valid and authorized.\n\n    Returns:\n        None\n\n    Examples:\n\n        async def validate_user(token, user_info, server_id):\n            # Verify token with Discord API\n            # Check user permissions for the specific server\n            return is_valid and is_authorized\n\n        server.on_validate_discord_user(validate_user)\n    \"\"\"\n    self._on_validate_discord_user = callback\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.on_get_client_id","title":"<code>on_get_client_id(callback)</code>","text":"<p>Register a callback to provide the OAuth2 client ID.</p> <p>The callback function should return the Discord OAuth2 application client ID used for authentication. This is sent to connecting clients for OAuth flow.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[str], Awaitable[str]]</code> <p>An async callable that returns the OAuth2 client ID for a server. Expected signature: async def callback(server_id: str) -&gt; str Should return the Discord application client ID string.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>async def get_client_id(server_id):\n    return \"123456789012345678\"\n\nserver.on_get_client_id(get_client_id)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def on_get_client_id(self, callback: Callable[[str], Awaitable[str]]) -&gt; None:\n    \"\"\"Register a callback to provide the OAuth2 client ID.\n\n    The callback function should return the Discord OAuth2 application client ID\n    used for authentication. This is sent to connecting clients for OAuth flow.\n\n    Args:\n        callback: An async callable that returns the OAuth2 client ID for a server.\n            Expected signature: async def callback(server_id: str) -&gt; str\n            Should return the Discord application client ID string.\n\n    Returns:\n        None\n\n    Examples:\n\n        async def get_client_id(server_id):\n            return \"123456789012345678\"\n\n        server.on_get_client_id(get_client_id)\n    \"\"\"\n    self._on_get_client_id = callback\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.run_forever","title":"<code>run_forever()</code>  <code>async</code>","text":"<p>Run the server forever with automatic HTTP support detection.</p> <p>This method starts the WebSocket server and automatically detects whether HTTP static file serving is supported based on the Python version and websockets library version. Falls back to WebSocket-only mode if HTTP support is unavailable.</p> HTTP support requires <ul> <li>Python 3.8 or higher</li> <li>websockets 10.0 or higher</li> <li>Available HTTP import modules (websockets.http11 or websockets.http)</li> </ul> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If server fails to start on the configured host and port.</p> <code>KeyboardInterrupt</code> <p>When server is interrupted by user (handled gracefully).</p> <p>Examples:</p> <pre><code>server = WebSocketServer(port=3000)\nawait server.run_forever()  # Runs until interrupted\n</code></pre> Note <p>This method runs indefinitely until interrupted. Use asyncio.create_task() if you need to run other async operations concurrently.</p> Source code in <code>d_back/server.py</code> <pre><code>async def run_forever(self) -&gt; None:\n    \"\"\"Run the server forever with automatic HTTP support detection.\n\n    This method starts the WebSocket server and automatically detects whether\n    HTTP static file serving is supported based on the Python version and websockets\n    library version. Falls back to WebSocket-only mode if HTTP support is unavailable.\n\n    HTTP support requires:\n        - Python 3.8 or higher\n        - websockets 10.0 or higher\n        - Available HTTP import modules (websockets.http11 or websockets.http)\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If server fails to start on the configured host and port.\n        KeyboardInterrupt: When server is interrupted by user (handled gracefully).\n\n    Examples:\n\n        server = WebSocketServer(port=3000)\n        await server.run_forever()  # Runs until interrupted\n\n    Note:\n        This method runs indefinitely until interrupted. Use asyncio.create_task()\n        if you need to run other async operations concurrently.\n    \"\"\"\n    # For Python 3.8+ compatibility, start with WebSocket-only mode\n    # and only try HTTP if we're confident it will work\n    has_http_support = False\n\n    try:\n        import websockets\n        # Check websockets version\n        websockets_version = tuple(map(int, websockets.__version__.split('.')[:2]))\n\n        # Try HTTP support on Python 3.8+ with websockets 10.0+\n        import sys\n        python_version = sys.version_info[:2]\n\n        if python_version &gt;= (3, 8) and websockets_version &gt;= (10, 0):\n            try:\n                # Quick test of HTTP imports\n                from websockets.http11 import Response  # noqa: F401\n                from websockets.http import Headers  # noqa: F401\n                has_http_support = True\n                print(f\"[DEBUG] HTTP support enabled (Python {python_version}, websockets {websockets.__version__})\")\n            except ImportError:\n                try:\n                    from websockets.http import Response, Headers  # noqa: F401\n                    has_http_support = True\n                    print(\"[DEBUG] HTTP support enabled with fallback imports\")\n                except ImportError:\n                    print(\"[DEBUG] HTTP imports not available, using WebSocket-only mode\")\n        else:\n            print(f\"[DEBUG] WebSocket-only mode (Python {python_version}, websockets {websockets.__version__} - version too old for HTTP)\")\n\n    except Exception as e:\n        print(f\"[WARNING] Error checking HTTP support, falling back to WebSocket-only: {e}\")\n        has_http_support = False\n\n    if has_http_support:\n        try:\n            async with websockets.serve(\n                self._handler, \n                self.host, \n                self.port, \n                process_request=self._process_request\n            ):\n                print(f\"Mock WebSocket server running on ws://{self.host}:{self.port} (with HTTP support)\")\n                await asyncio.Future()  # run forever\n        except Exception as e:\n            print(f\"[WARNING] Failed to start with HTTP support: {e}\")\n            print(\"[INFO] Falling back to WebSocket-only mode\")\n            has_http_support = False\n\n    if not has_http_support:\n        async with websockets.serve(\n            self._handler, \n            self.host, \n            self.port\n        ):\n            print(f\"Mock WebSocket server running on ws://{self.host}:{self.port} (WebSocket-only mode)\")\n            await asyncio.Future()  # run forever\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.broadcast_presence","title":"<code>broadcast_presence(server, uid, status, username=None, role_color=None, delete=False)</code>  <code>async</code>","text":"<p>Broadcast a user presence update to all clients connected to a server.</p> <p>Sends presence information (online status, username, role color) to all WebSocket connections associated with the specified Discord server. Used to notify clients when users come online, go offline, or change status.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str</code> <p>Discord server ID to broadcast to</p> required <code>uid</code> <code>str</code> <p>User ID whose presence is being updated</p> required <code>status</code> <code>str</code> <p>User's current status (\"online\", \"idle\", \"dnd\", \"offline\")</p> required <code>username</code> <code>str</code> <p>Optional username to include in the update</p> <code>None</code> <code>role_color</code> <code>str</code> <p>Optional hex color code for the user's role (e.g., \"#ff6b6b\")</p> <code>None</code> <code>delete</code> <code>bool</code> <p>If True, indicates the user should be removed from the presence list</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code># Broadcast user coming online\nawait server.broadcast_presence(\n    server=\"232769614004748288\",\n    uid=\"123456789012345001\",\n    status=\"online\",\n    username=\"vegeta897\",\n    role_color=\"#ff6b6b\"\n)\n\n# Broadcast user going offline\nawait server.broadcast_presence(\n    server=\"232769614004748288\",\n    uid=\"123456789012345001\",\n    status=\"offline\",\n    delete=True\n)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>async def broadcast_presence(self, server: str, uid: str, status: str, username: str = None, role_color: str = None, delete: bool = False) -&gt; None:\n    \"\"\"Broadcast a user presence update to all clients connected to a server.\n\n    Sends presence information (online status, username, role color) to all\n    WebSocket connections associated with the specified Discord server. Used\n    to notify clients when users come online, go offline, or change status.\n\n    Args:\n        server: Discord server ID to broadcast to\n        uid: User ID whose presence is being updated\n        status: User's current status (\"online\", \"idle\", \"dnd\", \"offline\")\n        username: Optional username to include in the update\n        role_color: Optional hex color code for the user's role (e.g., \"#ff6b6b\")\n        delete: If True, indicates the user should be removed from the presence list\n\n    Returns:\n        None\n\n    Examples:\n\n        # Broadcast user coming online\n        await server.broadcast_presence(\n            server=\"232769614004748288\",\n            uid=\"123456789012345001\",\n            status=\"online\",\n            username=\"vegeta897\",\n            role_color=\"#ff6b6b\"\n        )\n\n        # Broadcast user going offline\n        await server.broadcast_presence(\n            server=\"232769614004748288\",\n            uid=\"123456789012345001\",\n            status=\"offline\",\n            delete=True\n        )\n    \"\"\"\n    # Filter connections to only include those connected to the specified server\n    server_connections = [ws for ws in self.connections if hasattr(ws, 'discordServer') and ws.discordServer == server]\n\n    if not server_connections:\n        print(f\"[INFO] No connections to broadcast presence to for server: {server}\")\n        return\n\n    presence_data = {\n        \"uid\": uid,\n        \"status\": status\n    }\n\n    if username:\n        presence_data[\"username\"] = username\n    if role_color:\n        presence_data[\"roleColor\"] = role_color\n    if delete:\n        presence_data[\"delete\"] = True\n\n    msg = {\n        \"type\": \"presence\",\n        \"server\": server,\n        \"data\": presence_data\n    }\n\n    print(f\"[BROADCAST] Sending presence update to {len(server_connections)} connections on server {server}: {uid} -&gt; {status}\")\n\n    # Create a copy to avoid modification during iteration\n    connections_copy = server_connections.copy()\n\n    for websocket in connections_copy:\n        try:\n            await websocket.send(json.dumps(msg))\n        except websockets.ConnectionClosed:\n            print(\"[INFO] Removed closed connection during presence broadcast\")\n            # Remove closed connections\n            self.connections.discard(websocket)\n        except Exception as e:\n            print(f\"[ERROR] Failed to send presence update to connection: {e}\")\n            # Optionally remove problematic connections\n            self.connections.discard(websocket)\n</code></pre>"},{"location":"api-reference/#d_back.server.WebSocketServer.broadcast_client_id_update","title":"<code>broadcast_client_id_update(server, client_id)</code>  <code>async</code>","text":"<p>Broadcast an OAuth2 client ID update to all clients connected to a server.</p> <p>Sends the Discord OAuth2 application client ID to all WebSocket connections associated with the specified Discord server. Used to dynamically update the client ID for OAuth authentication flows.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str</code> <p>Discord server ID to broadcast to</p> required <code>client_id</code> <code>str</code> <p>Discord OAuth2 application client ID to send</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code># Update client ID for all connections to a server\nawait server.broadcast_client_id_update(\n    server=\"232769614004748288\",\n    client_id=\"123456789012345678\"\n)\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>async def broadcast_client_id_update(self, server: str, client_id: str) -&gt; None:\n    \"\"\"Broadcast an OAuth2 client ID update to all clients connected to a server.\n\n    Sends the Discord OAuth2 application client ID to all WebSocket connections\n    associated with the specified Discord server. Used to dynamically update\n    the client ID for OAuth authentication flows.\n\n    Args:\n        server: Discord server ID to broadcast to\n        client_id: Discord OAuth2 application client ID to send\n\n    Returns:\n        None\n\n    Examples:\n\n        # Update client ID for all connections to a server\n        await server.broadcast_client_id_update(\n            server=\"232769614004748288\",\n            client_id=\"123456789012345678\"\n        )\n    \"\"\"\n    # Filter connections to only include those connected to the specified server\n    server_connections = [ws for ws in self.connections if hasattr(ws, 'discordServer') and ws.discordServer == server]\n\n    if not server_connections:\n        print(f\"[INFO] No connections to broadcast client ID update to for server: {server}\")\n        return\n\n    msg = {\n        \"type\": \"update-clientid\",\n        \"server\": server,\n        \"data\": {\n            \"clientId\": client_id\n        }\n    }\n\n    print(f\"[BROADCAST] Sending client ID update to {len(server_connections)} connections on server {server}: {client_id}\")\n\n    # Create a copy to avoid modification during iteration\n    connections_copy = server_connections.copy()\n\n    for websocket in connections_copy:\n        try:\n            await websocket.send(json.dumps(msg))\n        except websockets.ConnectionClosed:\n            print(\"[INFO] Removed closed connection during client ID broadcast\")\n            # Remove closed connections\n            self.connections.discard(websocket)\n        except Exception as e:\n            print(f\"[ERROR] Failed to send client ID update to connection: {e}\")\n            # Optionally remove problematic connections\n            self.connections.discard(websocket)\n</code></pre>"},{"location":"api-reference/#mockdataprovider","title":"MockDataProvider","text":"<p>Provides mock data and periodic background tasks for development and testing. This class is used automatically when custom callbacks are not registered.</p>"},{"location":"api-reference/#d_back.mock.data.MockDataProvider","title":"<code>MockDataProvider(server_instance)</code>","text":"<p>Provides mock data and periodic background tasks for WebSocket server testing.</p> <p>This class generates test data that simulates a Discord-like server environment with multiple servers, users, and real-time updates. It provides both static data (user lists, server configurations) and dynamic behaviors (status updates, message broadcasts) for development and testing purposes.</p> The mock provider includes predefined data for several test servers <ul> <li>D-World: Main test server with 4 users</li> <li>Docs (WIP): Documentation server with 1 user</li> <li>OAuth2 Protected Server: Authentication testing server</li> <li>My Repos: Repository showcase server with 21 users</li> </ul> <p>Attributes:</p> Name Type Description <code>server</code> <p>Reference to the WebSocketServer instance using this provider.</p> <p>Examples:</p> <p>Basic usage:</p> <pre><code>server = WebSocketServer()\nmock_provider = MockDataProvider(server)\n\n# Get user data for a specific server\nusers = mock_provider.get_mock_user_data(\"232769614004748288\")\n# Returns: {\"uid1\": {\"uid\": \"...\", \"username\": \"...\", ...}, ...}\n\n# Get all available servers\nservers = mock_provider.get_mock_server_data()\n# Returns: {\"server_id\": {\"id\": \"...\", \"name\": \"...\", ...}, ...}\n</code></pre> Note <p>The mock data provider is automatically instantiated by WebSocketServer. You typically don't need to create instances manually unless testing the provider in isolation.</p> <p>Initialize the mock data provider.</p> <p>Parameters:</p> Name Type Description Default <code>server_instance</code> <code>WebSocketServer</code> <p>The WebSocketServer instance that owns this provider. Used for accessing server methods like _random_status().</p> required Source code in <code>d_back/mock/data.py</code> <pre><code>def __init__(self, server_instance: 'WebSocketServer'):\n    \"\"\"Initialize the mock data provider.\n\n    Args:\n        server_instance: The WebSocketServer instance that owns this provider.\n            Used for accessing server methods like _random_status().\n    \"\"\"\n    self.server = server_instance\n</code></pre>"},{"location":"api-reference/#d_back.mock.data.MockDataProvider.get_mock_user_data","title":"<code>get_mock_user_data(discord_server_id=None)</code>","text":"<p>Get mock user data for a specific Discord server.</p> <p>Returns a dictionary of mock users with their profile information including user ID, username, online status, and role color. Each server has a predefined set of users for consistent testing.</p> <p>Parameters:</p> Name Type Description Default <code>discord_server_id</code> <code>str</code> <p>Optional Discord server ID to get users for. Supported IDs: - \"232769614004748288\": D-World server (4 users) - \"482241773318701056\": Docs (WIP) server (1 user) - \"123456789012345678\": OAuth2 Protected server (1 user) - \"987654321098765432\": My Repos server (21 users) If None or unknown, returns empty dict.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Dictionary mapping user IDs to user data objects. Each user object contains: - uid (str): Unique user identifier - username (str): Display name - status (str): Online status (\"online\", \"idle\", \"dnd\", \"offline\") - roleColor (str): Hex color code for user's role (e.g., \"#ff6b6b\")</p> <p>Examples:</p> <pre><code>provider = MockDataProvider(server)\nusers = provider.get_mock_user_data(\"232769614004748288\")\n# Returns:\n# {\n#     \"123456789012345001\": {\n#         \"uid\": \"123456789012345001\",\n#         \"username\": \"vegeta897\",\n#         \"status\": \"online\",\n#         \"roleColor\": \"#ff6b6b\"\n#     },\n#     ...\n# }\n</code></pre> Source code in <code>d_back/mock/data.py</code> <pre><code>def get_mock_user_data(self, discord_server_id: str = None) -&gt; Dict[str, Any]:\n    \"\"\"Get mock user data for a specific Discord server.\n\n    Returns a dictionary of mock users with their profile information including\n    user ID, username, online status, and role color. Each server has a predefined\n    set of users for consistent testing.\n\n    Args:\n        discord_server_id: Optional Discord server ID to get users for.\n            Supported IDs:\n            - \"232769614004748288\": D-World server (4 users)\n            - \"482241773318701056\": Docs (WIP) server (1 user)\n            - \"123456789012345678\": OAuth2 Protected server (1 user)\n            - \"987654321098765432\": My Repos server (21 users)\n            If None or unknown, returns empty dict.\n\n    Returns:\n        Dict[str, Any]: Dictionary mapping user IDs to user data objects.\n            Each user object contains:\n            - uid (str): Unique user identifier\n            - username (str): Display name\n            - status (str): Online status (\"online\", \"idle\", \"dnd\", \"offline\")\n            - roleColor (str): Hex color code for user's role (e.g., \"#ff6b6b\")\n\n    Examples:\n\n        provider = MockDataProvider(server)\n        users = provider.get_mock_user_data(\"232769614004748288\")\n        # Returns:\n        # {\n        #     \"123456789012345001\": {\n        #         \"uid\": \"123456789012345001\",\n        #         \"username\": \"vegeta897\",\n        #         \"status\": \"online\",\n        #         \"roleColor\": \"#ff6b6b\"\n        #     },\n        #     ...\n        # }\n    \"\"\"\n\n    # D-World server users (default)\n    if discord_server_id == \"232769614004748288\":\n        return {\n            \"123456789012345001\": {\n                \"uid\": \"123456789012345001\",\n                \"username\": \"vegeta897\",\n                \"status\": \"online\",\n                \"roleColor\": \"#ff6b6b\"\n            },\n            \"123456789012345002\": {\n                \"uid\": \"123456789012345002\",\n                \"username\": \"Cog-Creators\",\n                \"status\": \"idle\",\n                \"roleColor\": \"#4ecdc4\"\n            },\n            \"123456789012345003\": {\n                \"uid\": \"123456789012345003\",\n                \"username\": \"d-zone-org\",\n                \"status\": \"dnd\",\n                \"roleColor\": \"#45b7d1\"\n            },\n            \"123456789012345004\": {\n                \"uid\": \"123456789012345004\",\n                \"username\": \"NNTin\",\n                \"status\": \"online\",\n                \"roleColor\": \"#96ceb4\"\n            }\n        }\n\n    # Docs (WIP) server users\n    elif discord_server_id == \"482241773318701056\":\n        return {\n            \"223456789012345001\": {\n                \"uid\": \"223456789012345001\",\n                \"username\": \"nntin.xyz/me\",\n                \"status\": \"online\",\n                \"roleColor\": \"#feca57\"\n            }\n        }\n\n    # OAuth2 Protected server users\n    elif discord_server_id == \"123456789012345678\":\n        return {\n            \"323456789012345001\": {\n                \"uid\": \"323456789012345001\",\n                \"username\": \"NNTin\",\n                \"status\": \"online\",\n                \"roleColor\": \"#ff9ff3\"\n            }\n        }\n\n    # My Repos server users\n    elif discord_server_id == \"987654321098765432\":\n        return {\n            \"423456789012345001\": {\n                \"uid\": \"423456789012345001\",\n                \"username\": \"me\",\n                \"status\": \"online\",\n                \"roleColor\": \"#54a0ff\"\n            },\n            \"423456789012345002\": {\n                \"uid\": \"423456789012345002\",\n                \"username\": \"nntin.github.io\",\n                \"status\": \"idle\",\n                \"roleColor\": \"#5f27cd\"\n            },\n            \"423456789012345003\": {\n                \"uid\": \"423456789012345003\",\n                \"username\": \"d-zone\",\n                \"status\": \"online\",\n                \"roleColor\": \"#00d2d3\"\n            },\n            \"423456789012345004\": {\n                \"uid\": \"423456789012345004\",\n                \"username\": \"d-back\",\n                \"status\": \"dnd\",\n                \"roleColor\": \"#ff6348\"\n            },\n            \"423456789012345005\": {\n                \"uid\": \"423456789012345005\",\n                \"username\": \"d-cogs\",\n                \"status\": \"online\",\n                \"roleColor\": \"#ff4757\"\n            },\n            \"423456789012345006\": {\n                \"uid\": \"423456789012345006\",\n                \"username\": \"Cubify-Reddit\",\n                \"status\": \"offline\",\n                \"roleColor\": \"#3742fa\"\n            },\n            \"423456789012345007\": {\n                \"uid\": \"423456789012345007\",\n                \"username\": \"Dota-2-Emoticons\",\n                \"status\": \"idle\",\n                \"roleColor\": \"#2ed573\"\n            },\n            \"423456789012345008\": {\n                \"uid\": \"423456789012345008\",\n                \"username\": \"Dota-2-Reddit-Flair-Mosaic\",\n                \"status\": \"online\",\n                \"roleColor\": \"#ffa502\"\n            },\n            \"423456789012345009\": {\n                \"uid\": \"423456789012345009\",\n                \"username\": \"Red-kun\",\n                \"status\": \"dnd\",\n                \"roleColor\": \"#ff3838\"\n            },\n            \"423456789012345010\": {\n                \"uid\": \"423456789012345010\",\n                \"username\": \"Reply-Dota-2-Reddit\",\n                \"status\": \"online\",\n                \"roleColor\": \"#ff9f43\"\n            },\n            \"423456789012345011\": {\n                \"uid\": \"423456789012345011\",\n                \"username\": \"Reply-LoL-Reddit\",\n                \"status\": \"idle\",\n                \"roleColor\": \"#0abde3\"\n            },\n            \"423456789012345012\": {\n                \"uid\": \"423456789012345012\",\n                \"username\": \"crosku\",\n                \"status\": \"online\",\n                \"roleColor\": \"#006ba6\"\n            },\n            \"423456789012345013\": {\n                \"uid\": \"423456789012345013\",\n                \"username\": \"dev-tracker-reddit\",\n                \"status\": \"offline\",\n                \"roleColor\": \"#8e44ad\"\n            },\n            \"423456789012345014\": {\n                \"uid\": \"423456789012345014\",\n                \"username\": \"discord-logo\",\n                \"status\": \"online\",\n                \"roleColor\": \"#7289da\"\n            },\n            \"423456789012345015\": {\n                \"uid\": \"423456789012345015\",\n                \"username\": \"discord-twitter-bot\",\n                \"status\": \"idle\",\n                \"roleColor\": \"#1da1f2\"\n            },\n            \"423456789012345016\": {\n                \"uid\": \"423456789012345016\",\n                \"username\": \"discord-web-bridge\",\n                \"status\": \"dnd\",\n                \"roleColor\": \"#2c2f33\"\n            },\n            \"423456789012345017\": {\n                \"uid\": \"423456789012345017\",\n                \"username\": \"pasteindex\",\n                \"status\": \"online\",\n                \"roleColor\": \"#f39c12\"\n            },\n            \"423456789012345018\": {\n                \"uid\": \"423456789012345018\",\n                \"username\": \"pasteview\",\n                \"status\": \"idle\",\n                \"roleColor\": \"#e74c3c\"\n            },\n            \"423456789012345019\": {\n                \"uid\": \"423456789012345019\",\n                \"username\": \"shell-kun\",\n                \"status\": \"online\",\n                \"roleColor\": \"#1abc9c\"\n            },\n            \"423456789012345020\": {\n                \"uid\": \"423456789012345020\",\n                \"username\": \"tracker-reddit-discord\",\n                \"status\": \"offline\",\n                \"roleColor\": \"#9b59b6\"\n            },\n            \"423456789012345021\": {\n                \"uid\": \"423456789012345021\",\n                \"username\": \"twitter-backend\",\n                \"status\": \"online\",\n                \"roleColor\": \"#1da1f2\"\n            }\n        }\n\n    # Fallback: return empty if unknown server\n    return {}\n</code></pre>"},{"location":"api-reference/#d_back.mock.data.MockDataProvider.get_mock_server_data","title":"<code>get_mock_server_data()</code>","text":"<p>Get mock server data with all available Discord servers.</p> <p>Returns a dictionary mapping Discord server IDs to server configuration objects. Used for testing server selection, display, and navigation features.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Dict[str, Any]]: Dictionary mapping Discord server snowflake IDs to server configuration objects. Each server object contains: - id (str): Internal server identifier - name (str): Server display name - passworded (bool): Whether OAuth2 authentication is required - default (bool, optional): Whether this is the default server</p> <p>Examples:</p> <pre><code>provider = MockDataProvider(server)\nservers = provider.get_mock_server_data()\n# Returns:\n# {\n#     \"232769614004748288\": {\n#         \"id\": \"dworld\",\n#         \"name\": \"D-World\",\n#         \"default\": True,\n#         \"passworded\": False\n#     },\n#     \"482241773318701056\": {\n#         \"id\": \"docs\",\n#         \"name\": \"Docs (WIP)\",\n#         \"passworded\": False\n#     },\n#     ...\n# }\n\nfor snowflake_id, server_info in servers.items():\n    print(f\"{server_info['name']} (ID: {snowflake_id})\")\n</code></pre> Source code in <code>d_back/mock/data.py</code> <pre><code>def get_mock_server_data(self) -&gt; Dict[str, Any]:\n    \"\"\"Get mock server data with all available Discord servers.\n\n    Returns a dictionary mapping Discord server IDs to server configuration\n    objects. Used for testing server selection, display, and navigation features.\n\n    Returns:\n        Dict[str, Dict[str, Any]]: Dictionary mapping Discord server snowflake IDs\n            to server configuration objects. Each server object contains:\n            - id (str): Internal server identifier\n            - name (str): Server display name\n            - passworded (bool): Whether OAuth2 authentication is required\n            - default (bool, optional): Whether this is the default server\n\n    Examples:\n\n        provider = MockDataProvider(server)\n        servers = provider.get_mock_server_data()\n        # Returns:\n        # {\n        #     \"232769614004748288\": {\n        #         \"id\": \"dworld\",\n        #         \"name\": \"D-World\",\n        #         \"default\": True,\n        #         \"passworded\": False\n        #     },\n        #     \"482241773318701056\": {\n        #         \"id\": \"docs\",\n        #         \"name\": \"Docs (WIP)\",\n        #         \"passworded\": False\n        #     },\n        #     ...\n        # }\n\n        for snowflake_id, server_info in servers.items():\n            print(f\"{server_info['name']} (ID: {snowflake_id})\")\n    \"\"\"\n    return {\n        \"232769614004748288\": {\n            \"id\": \"dworld\",\n            \"name\": \"D-World\",\n            \"default\": True,\n            \"passworded\": False\n        },\n        \"482241773318701056\": {\n            \"id\": \"docs\", \n            \"name\": \"Docs (WIP)\",\n            \"passworded\": False\n        },\n        \"123456789012345678\": {\n            \"id\": \"oauth\",\n            \"name\": \"OAuth2 Protected Server\",\n            \"passworded\": True\n        },\n        \"987654321098765432\": {\n            \"id\": \"repos\",\n            \"name\": \"My Repos\",\n            \"passworded\": False\n        }\n    }\n</code></pre>"},{"location":"api-reference/#d_back.mock.data.MockDataProvider.periodic_status_updates","title":"<code>periodic_status_updates(websocket)</code>  <code>async</code>","text":"<p>Periodically send mock user status changes to a connected client.</p> <p>Background task that continuously generates random user status updates and sends them to the specified WebSocket connection. Simulates realistic user activity by randomly changing user statuses every 4 seconds.</p> <p>This method runs until the WebSocket connection is closed or the task is cancelled. It selects random users from the current server and updates their online status (online, idle, dnd, offline).</p> <p>Parameters:</p> Name Type Description Default <code>websocket</code> <code>WebSocketServerProtocol</code> <p>WebSocket connection to send updates to. Must have a discordServer attribute identifying which server's users to update.</p> required Note <p>This is a coroutine that runs indefinitely for the lifetime of the WebSocket connection. It automatically handles ConnectionClosed exceptions gracefully.</p> <p>Examples:</p> <pre><code># Called automatically by the server for each connection\ntask = asyncio.create_task(\n    mock_provider.periodic_status_updates(websocket)\n)\n\n# Updates will be sent in this format:\n# {\n#     \"type\": \"presence\",\n#     \"server\": \"232769614004748288\",\n#     \"data\": {\n#         \"uid\": \"123456789012345001\",\n#         \"status\": \"online\"\n#     }\n# }\n</code></pre> <p>Raises:</p> Type Description <code>ConnectionClosed</code> <p>When the WebSocket connection is closed. This exception is caught and handled gracefully.</p> Source code in <code>d_back/mock/data.py</code> <pre><code>async def periodic_status_updates(self, websocket: 'WebSocketServerProtocol') -&gt; None:\n    \"\"\"Periodically send mock user status changes to a connected client.\n\n    Background task that continuously generates random user status updates\n    and sends them to the specified WebSocket connection. Simulates realistic\n    user activity by randomly changing user statuses every 4 seconds.\n\n    This method runs until the WebSocket connection is closed or the task\n    is cancelled. It selects random users from the current server and updates\n    their online status (online, idle, dnd, offline).\n\n    Args:\n        websocket: WebSocket connection to send updates to. Must have a\n            discordServer attribute identifying which server's users to update.\n\n    Note:\n        This is a coroutine that runs indefinitely for the lifetime of the\n        WebSocket connection. It automatically handles ConnectionClosed\n        exceptions gracefully.\n\n    Examples:\n\n        # Called automatically by the server for each connection\n        task = asyncio.create_task(\n            mock_provider.periodic_status_updates(websocket)\n        )\n\n        # Updates will be sent in this format:\n        # {\n        #     \"type\": \"presence\",\n        #     \"server\": \"232769614004748288\",\n        #     \"data\": {\n        #         \"uid\": \"123456789012345001\",\n        #         \"status\": \"online\"\n        #     }\n        # }\n\n    Raises:\n        websockets.ConnectionClosed: When the WebSocket connection is closed.\n            This exception is caught and handled gracefully.\n    \"\"\"\n    uids = list(self.get_mock_user_data(websocket.discordServer).keys())\n    try:\n        while True:\n            await asyncio.sleep(4)\n            status = self.server._random_status()\n            uid = random.choice(uids)\n            presence_msg = {\n                \"type\": \"presence\",\n                \"server\": websocket.discordServer,\n                \"data\": {\n                    \"uid\": uid,\n                    \"status\": status\n                }\n            }\n            print(f\"[SEND] presence update for {uid}: {status}\")\n            await websocket.send(json.dumps(presence_msg))\n    except websockets.ConnectionClosed:\n        print(\"[INFO] Presence update task stopped: connection closed\")\n        # Remove closed connections\n        self.server.connections.discard(websocket)\n    except Exception as e:\n        print(f\"[ERROR] Failed to send message to connection: {e}\")\n        # Optionally remove problematic connections\n        self.server.connections.discard(websocket)\n</code></pre>"},{"location":"api-reference/#d_back.mock.data.MockDataProvider.periodic_messages","title":"<code>periodic_messages(websocket)</code>  <code>async</code>","text":"<p>Periodically send mock chat messages to a connected client.</p> <p>Background task that continuously generates random chat messages from mock users and sends them to the specified WebSocket connection. Simulates realistic chat activity by sending messages every 5 seconds.</p> <p>This method runs until the WebSocket connection is closed or the task is cancelled. It selects random users from the current server and random messages from a predefined list to create chat events.</p> <p>Parameters:</p> Name Type Description Default <code>websocket</code> <code>WebSocketServerProtocol</code> <p>WebSocket connection to send messages to. Must have a discordServer attribute identifying which server's users to use.</p> required Note <p>This is a coroutine that runs indefinitely for the lifetime of the WebSocket connection. It automatically handles ConnectionClosed exceptions gracefully.</p> <p>Examples:</p> <pre><code># Called automatically by the server for each connection\ntask = asyncio.create_task(\n    mock_provider.periodic_messages(websocket)\n)\n\n# Messages will be sent in this format:\n# {\n#     \"type\": \"message\",\n#     \"server\": \"232769614004748288\",\n#     \"data\": {\n#         \"uid\": \"123456789012345001\",\n#         \"message\": \"hello\",\n#         \"channel\": \"527964146659229701\"\n#     }\n# }\n</code></pre> <p>Raises:</p> Type Description <code>ConnectionClosed</code> <p>When the WebSocket connection is closed. This exception is caught and handled gracefully.</p> Source code in <code>d_back/mock/data.py</code> <pre><code>async def periodic_messages(self, websocket: 'WebSocketServerProtocol') -&gt; None:\n    \"\"\"Periodically send mock chat messages to a connected client.\n\n    Background task that continuously generates random chat messages from\n    mock users and sends them to the specified WebSocket connection. Simulates\n    realistic chat activity by sending messages every 5 seconds.\n\n    This method runs until the WebSocket connection is closed or the task\n    is cancelled. It selects random users from the current server and random\n    messages from a predefined list to create chat events.\n\n    Args:\n        websocket: WebSocket connection to send messages to. Must have a\n            discordServer attribute identifying which server's users to use.\n\n    Note:\n        This is a coroutine that runs indefinitely for the lifetime of the\n        WebSocket connection. It automatically handles ConnectionClosed\n        exceptions gracefully.\n\n    Examples:\n\n        # Called automatically by the server for each connection\n        task = asyncio.create_task(\n            mock_provider.periodic_messages(websocket)\n        )\n\n        # Messages will be sent in this format:\n        # {\n        #     \"type\": \"message\",\n        #     \"server\": \"232769614004748288\",\n        #     \"data\": {\n        #         \"uid\": \"123456789012345001\",\n        #         \"message\": \"hello\",\n        #         \"channel\": \"527964146659229701\"\n        #     }\n        # }\n\n    Raises:\n        websockets.ConnectionClosed: When the WebSocket connection is closed.\n            This exception is caught and handled gracefully.\n    \"\"\"\n    uids = list(self.get_mock_user_data(websocket.discordServer).keys())\n    messages = [\n        \"hello\",\n        \"how are you?\",\n        \"this is a test message\",\n        \"D-Zone rocks!\",\n        \"what's up?\"\n    ]\n    try:\n        while True:\n            await asyncio.sleep(5)\n            uid = random.choice(uids)\n            msg_text = random.choice(messages)\n            msg = {\n                \"type\": \"message\",\n                \"server\": websocket.discordServer,\n                \"data\": {\n                    \"uid\": uid,\n                    \"message\": msg_text,\n                    \"channel\": \"527964146659229701\"\n                }\n            }\n            print(f\"[SEND] periodic message from {uid}: {msg_text}\")\n            await websocket.send(json.dumps(msg))\n    except websockets.ConnectionClosed:\n        print(\"[INFO] Periodic message task stopped: connection closed\")\n        # Remove closed connections\n        self.server.connections.discard(websocket)\n    except Exception as e:\n        print(f\"[ERROR] Failed to send message to connection: {e}\")\n        # Optionally remove problematic connections\n        self.server.connections.discard(websocket)\n</code></pre>"},{"location":"api-reference/#utility-functions","title":"Utility Functions","text":"<p>Helper functions for command-line interface and version management.</p>"},{"location":"api-reference/#parse_args","title":"parse_args","text":"<p>Parse command-line arguments for the D-Back WebSocket server.</p> <p>Provides command-line interface for configuring server parameters including port, host, static file directory, and version information.</p> <p>Returns:</p> Type Description <p>argparse.Namespace: Parsed arguments containing: - port (int): Server port number (default: 3000) - host (str): Server hostname (default: 'localhost') - static_dir (str): Custom static files directory (default: None)</p> <p>Examples:</p> <pre><code>$ python -m d_back --port 8080 --host 0.0.0.0\n$ python -m d_back --static-dir ./my-static-files\n$ python -m d_back --version\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def parse_args():\n    \"\"\"Parse command-line arguments for the D-Back WebSocket server.\n\n    Provides command-line interface for configuring server parameters including\n    port, host, static file directory, and version information.\n\n    Returns:\n        argparse.Namespace: Parsed arguments containing:\n            - port (int): Server port number (default: 3000)\n            - host (str): Server hostname (default: 'localhost')\n            - static_dir (str): Custom static files directory (default: None)\n\n    Examples:\n\n        $ python -m d_back --port 8080 --host 0.0.0.0\n        $ python -m d_back --static-dir ./my-static-files\n        $ python -m d_back --version\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description='D-Back WebSocket Server',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--port', \n        type=int, \n        default=3000, \n        help='Port to run the WebSocket server on'\n    )\n    parser.add_argument(\n        '--host', \n        type=str, \n        default='localhost', \n        help='Host to bind the WebSocket server to'\n    )\n    parser.add_argument(\n        '--static-dir',\n        type=str,\n        default=None,\n        help='Directory to serve static files from (default: built-in dist directory)'\n    )\n    parser.add_argument(\n        '--version',\n        action='version',\n        version=f'%(prog)s {get_version()}'\n    )\n    return parser.parse_args()\n</code></pre>"},{"location":"api-reference/#get_version","title":"get_version","text":"<p>Get the current version of the d_back package.</p> <p>Attempts to retrieve the version from the package's version attribute. Falls back to \"unknown\" if the version cannot be determined.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The package version string (e.g., \"0.0.12\") or \"unknown\".</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_version()\n'0.0.12'\n</code></pre> Source code in <code>d_back/server.py</code> <pre><code>def get_version():\n    \"\"\"Get the current version of the d_back package.\n\n    Attempts to retrieve the version from the package's __version__ attribute.\n    Falls back to \"unknown\" if the version cannot be determined.\n\n    Returns:\n        str: The package version string (e.g., \"0.0.12\") or \"unknown\".\n\n    Examples:\n\n        &gt;&gt;&gt; get_version()\n        '0.0.12'\n    \"\"\"\n    try:\n        from . import __version__\n        return __version__\n    except ImportError:\n        return \"unknown\"\n</code></pre>"},{"location":"api-reference/#main","title":"main","text":"<p>Main async entry point for the D-Back WebSocket server.</p> <p>Parses command-line arguments, initializes the WebSocket server with the specified configuration, and starts the server in run-forever mode.</p> This function handles <ul> <li>Argument parsing for port, host, and static directory</li> <li>Server initialization and configuration</li> <li>Static directory validation</li> <li>Server startup and lifecycle management</li> </ul> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If server fails to start or encounters fatal errors.</p> <code>KeyboardInterrupt</code> <p>Propagated from server interruption.</p> <p>Examples:</p> <pre><code># Run with default settings\nawait main()\n</code></pre> Note <p>This is the primary entry point when running d_back as a module. Use main_sync() for synchronous execution from main.</p> Source code in <code>d_back/server.py</code> <pre><code>async def main():\n    \"\"\"Main async entry point for the D-Back WebSocket server.\n\n    Parses command-line arguments, initializes the WebSocket server with the\n    specified configuration, and starts the server in run-forever mode.\n\n    This function handles:\n        - Argument parsing for port, host, and static directory\n        - Server initialization and configuration\n        - Static directory validation\n        - Server startup and lifecycle management\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If server fails to start or encounters fatal errors.\n        KeyboardInterrupt: Propagated from server interruption.\n\n    Examples:\n\n        # Run with default settings\n        await main()\n\n    Note:\n        This is the primary entry point when running d_back as a module.\n        Use main_sync() for synchronous execution from __main__.\n    \"\"\"\n    args = parse_args()\n\n    print(f\"Starting D-Back WebSocket Server v{get_version()}\")\n    print(f\"Host: {args.host}\")\n    print(f\"Port: {args.port}\")\n\n    server = WebSocketServer(port=args.port, host=args.host)\n\n    # Set custom static directory if provided\n    if args.static_dir:\n        static_path = Path(args.static_dir)\n        if static_path.exists() and static_path.is_dir():\n            server.static_dir = static_path\n            print(f\"Static directory: {static_path}\")\n        else:\n            print(f\"Warning: Static directory '{args.static_dir}' does not exist or is not a directory\")\n            print(f\"Using default static directory: {server.static_dir}\")\n    else:\n        print(f\"Static directory: {server.static_dir}\")\n\n    await server.run_forever()\n</code></pre>"},{"location":"api-reference/#main_sync","title":"main_sync","text":"<p>Synchronous entry point wrapper for the D-Back WebSocket server.</p> <p>Wraps the async main() function in asyncio.run() to provide a synchronous entry point. Handles KeyboardInterrupt gracefully for clean server shutdown.</p> <p>Returns:</p> Type Description <p>None</p> <p>Examples:</p> <pre><code>if __name__ == \"__main__\":\n    main_sync()\n</code></pre> Note <p>This is the entry point used when running as a script or via setuptools console_scripts. It ensures proper async context management.</p> Source code in <code>d_back/server.py</code> <pre><code>def main_sync():\n    \"\"\"Synchronous entry point wrapper for the D-Back WebSocket server.\n\n    Wraps the async main() function in asyncio.run() to provide a synchronous\n    entry point. Handles KeyboardInterrupt gracefully for clean server shutdown.\n\n    Returns:\n        None\n\n    Examples:\n\n        if __name__ == \"__main__\":\n            main_sync()\n\n    Note:\n        This is the entry point used when running as a script or via setuptools\n        console_scripts. It ensures proper async context management.\n    \"\"\"\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        print(\"\\n[INFO] Server stopped by user\")\n</code></pre>"},{"location":"api-reference/#usage-examples","title":"Usage Examples","text":"<p>For practical examples of using these APIs, see:</p> <ul> <li>Getting Started: Basic usage and first connection</li> <li>Configuration: Server setup and configuration</li> <li>Callbacks &amp; Customization: Callback usage examples</li> <li>Custom Data Providers: Data provider implementation patterns</li> </ul>"},{"location":"api-reference/#type-hints","title":"Type Hints","text":"<p>All methods include comprehensive type hints for parameters and return values. When working with callbacks, import the necessary types:</p> <pre><code>from typing import Dict, Any, Optional, Tuple, Callable, Awaitable\n</code></pre> <p>For more information about Python type hints, see the official typing documentation.</p>"},{"location":"developer-guide/","title":"Developer Guide","text":"<p>Welcome to the d-back developer guide! Thank you for your interest in contributing to this project. This guide covers everything you need to know to get started with development, understand the architecture, run tests, and submit contributions.</p>"},{"location":"developer-guide/#introduction","title":"Introduction","text":"<p>d-back is an open-source project released under the MIT License. We welcome contributions of all kinds: bug fixes, new features, documentation improvements, and more. This guide will help you set up your development environment and understand how the project is structured.</p> <p>GitHub Repository: https://github.com/NNTin/d-back</p> <p>License: MIT - See LICENSE for details</p>"},{"location":"developer-guide/#getting-started-with-development","title":"Getting Started with Development","text":""},{"location":"developer-guide/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork:    <pre><code>git clone https://github.com/YOUR_USERNAME/d-back.git\ncd d-back\n</code></pre></li> <li>Add upstream remote:    <pre><code>git remote add upstream https://github.com/NNTin/d-back.git\n</code></pre></li> </ol>"},{"location":"developer-guide/#set-up-development-environment","title":"Set Up Development Environment","text":"<ol> <li>Create a virtual environment:</li> </ol> <p>=== \"Windows\"        <pre><code>python -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> <p>=== \"macOS/Linux\"        <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre></p> <ol> <li> <p>Install in development mode:    <pre><code>pip install -e .\n</code></pre></p> </li> <li> <p>Install test dependencies:    <pre><code>pip install pytest pytest-asyncio websockets\n</code></pre></p> </li> <li> <p>Install documentation dependencies (optional):    <pre><code>pip install -e .[docs]\n</code></pre></p> </li> <li> <p>Verify installation:    <pre><code>d_back --version\npytest tests/\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/#project-architecture","title":"Project Architecture","text":"<p>Understanding the codebase structure will help you navigate and contribute effectively.</p>"},{"location":"developer-guide/#directory-structure","title":"Directory Structure","text":"<pre><code>d-back/\n\u251c\u2500\u2500 d_back/                 # Main package directory\n\u2502   \u251c\u2500\u2500 __init__.py         # Package initialization and exports\n\u2502   \u251c\u2500\u2500 __main__.py         # CLI entry point (python -m d_back)\n\u2502   \u251c\u2500\u2500 server.py           # WebSocketServer implementation\n\u2502   \u2514\u2500\u2500 mock/               # Mock data providers\n\u2502       \u251c\u2500\u2500 __init__.py     # Mock package initialization\n\u2502       \u2514\u2500\u2500 data.py         # MockDataProvider class\n\u251c\u2500\u2500 tests/                  # Test suite\n\u2502   \u251c\u2500\u2500 test_websocket_server.py # WebSocket functionality tests\n\u2502   \u251c\u2500\u2500 test_browser_integration.py # Browser integration tests\n\u2502   \u251c\u2500\u2500 helpers/            # Test utilities\n\u2502   \u2502   \u2514\u2500\u2500 mock_websocket_client.py\n\u2502   \u2514\u2500\u2500 README.md           # Testing documentation\n\u251c\u2500\u2500 docs/                   # Documentation source files (MkDocs)\n\u2502   \u251c\u2500\u2500 index.md            # Documentation homepage\n\u2502   \u251c\u2500\u2500 getting-started.md  # Installation and setup guide\n\u2502   \u251c\u2500\u2500 user-guide/         # User guide sections\n\u2502   \u251c\u2500\u2500 api-reference.md    # API documentation\n\u2502   \u2514\u2500\u2500 developer-guide.md  # This file\n\u251c\u2500\u2500 setup.cfg               # Package configuration\n\u251c\u2500\u2500 pyproject.toml          # Build system configuration\n\u251c\u2500\u2500 mkdocs.yml              # Documentation configuration\n\u251c\u2500\u2500 requirements.txt        # Runtime dependencies\n\u2514\u2500\u2500 README.md               # Project readme\n</code></pre>"},{"location":"developer-guide/#core-components","title":"Core Components","text":""},{"location":"developer-guide/#websocketserver-d_backserverpy","title":"WebSocketServer (<code>d_back/server.py</code>)","text":"<p>The main server class responsible for:</p> <ul> <li>Connection Management: Maintains a set of active WebSocket connections</li> <li>Callback System: Provides hooks for customizing behavior:</li> <li><code>on_get_user_data</code>: Fetch user data for a server</li> <li><code>on_get_server_data</code>: Fetch list of available servers</li> <li><code>on_static_request</code>: Handle custom static file requests</li> <li><code>on_validate_discord_user</code>: Validate OAuth2 tokens</li> <li><code>on_get_client_id</code>: Provide OAuth2 client IDs</li> <li>HTTP Static File Serving: Uses websockets 10.0+ support for serving files</li> <li>Message Broadcasting: Methods for sending updates to all connected clients:</li> <li><code>broadcast_message</code>: Send chat messages</li> <li><code>broadcast_presence</code>: Send presence updates (status changes)</li> <li><code>broadcast_client_id_update</code>: Send OAuth2 configuration changes</li> <li>OAuth2 Authentication: Built-in flow for Discord authentication</li> </ul> <p>Key Methods: - <code>start()</code>: Initialize and start the server - <code>stop()</code>: Gracefully shutdown the server - <code>run_forever()</code>: Run the server indefinitely - <code>_handle_connection()</code>: Process incoming WebSocket connections - <code>_serve_static_file()</code>: Serve HTTP static files with security</p>"},{"location":"developer-guide/#mockdataprovider-d_backmockdatapy","title":"MockDataProvider (<code>d_back/mock/data.py</code>)","text":"<p>Provides mock data for development and testing:</p> <ul> <li>Mock User Data: Generates realistic Discord user objects with various statuses</li> <li>Mock Server Configurations: Pre-configured test servers (d-world, docs, oauth2, my repos)</li> <li>Periodic Background Tasks: Simulates user activity:</li> <li>Random status changes</li> <li>Random chat messages</li> <li>Realistic timing patterns</li> </ul> <p>Key Methods: - <code>get_mock_server_data(server_id)</code>: Returns mock users for a server - <code>get_mock_servers()</code>: Returns list of available mock servers - <code>_start_background_tasks()</code>: Initiates periodic updates - <code>_random_status_change()</code>: Simulates presence changes - <code>_random_message()</code>: Simulates chat activity</p>"},{"location":"developer-guide/#message-protocol","title":"Message Protocol","text":"<p>WebSocket messages use JSON format with a <code>type</code> field to determine the message kind.</p>"},{"location":"developer-guide/#client-server-messages","title":"Client \u2192 Server Messages","text":"<p>get_user_data: <pre><code>{\n  \"type\": \"get_user_data\",\n  \"serverId\": \"232769614004748288\"\n}\n</code></pre></p> <p>authenticate (OAuth2): <pre><code>{\n  \"type\": \"authenticate\",\n  \"token\": \"oauth2_access_token\",\n  \"serverId\": \"232769614004748288\"\n}\n</code></pre></p>"},{"location":"developer-guide/#server-client-messages","title":"Server \u2192 Client Messages","text":"<p>connect (initial connection): <pre><code>{\n  \"type\": \"connect\",\n  \"servers\": {\n    \"232769614004748288\": {\n      \"id\": \"232769614004748288\",\n      \"name\": \"d-world\",\n      \"passworded\": false,\n      \"default\": true\n    }\n  }\n}\n</code></pre></p> <p>user_data: <pre><code>{\n  \"type\": \"user_data\",\n  \"serverId\": \"232769614004748288\",\n  \"users\": {\n    \"user123\": {\n      \"uid\": \"user123\",\n      \"username\": \"TestUser\",\n      \"status\": \"online\",\n      \"roleColor\": \"#ff6b6b\"\n    }\n  }\n}\n</code></pre></p> <p>message (chat message): <pre><code>{\n  \"type\": \"message\",\n  \"server\": \"232769614004748288\",\n  \"uid\": \"user123\",\n  \"message\": \"Hello!\",\n  \"channel\": \"channel456\"\n}\n</code></pre></p> <p>presence (status update): <pre><code>{\n  \"type\": \"presence\",\n  \"server\": \"232769614004748288\",\n  \"uid\": \"user123\",\n  \"status\": \"idle\",\n  \"username\": \"TestUser\",\n  \"roleColor\": \"#ff6b6b\",\n  \"delete\": false\n}\n</code></pre></p> <p>client_id_update: <pre><code>{\n  \"type\": \"client_id_update\",\n  \"server\": \"232769614004748288\",\n  \"clientId\": \"123456789012345678\"\n}\n</code></pre></p>"},{"location":"developer-guide/#http-support","title":"HTTP Support","text":"<p>d-back includes HTTP support for serving static files (requires websockets 10.0+):</p> <ul> <li>Version Detection: Checks websockets library version at runtime</li> <li>Fallback Behavior: Logs warning if HTTP not supported</li> <li>Static File Serving: Serves files from <code>dist/</code> directory by default</li> <li>Security: Path traversal protection prevents accessing files outside static directory</li> <li>Content Types: Automatically detects MIME types based on file extensions</li> </ul> <p>API Endpoints: - <code>/api/version</code>: Returns server version information (if implemented) - All other paths: Serve from static directory</p>"},{"location":"developer-guide/#testing","title":"Testing","text":"<p>Comprehensive testing ensures d-back remains stable and reliable.</p>"},{"location":"developer-guide/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_websocket_server.py  # WebSocket functionality tests\n\u251c\u2500\u2500 test_browser_integration.py # Browser integration tests\n\u251c\u2500\u2500 helpers/\n\u2502   \u2514\u2500\u2500 mock_websocket_client.py  # Mock client for testing\n\u2514\u2500\u2500 README.md                 # Detailed testing documentation\n</code></pre>"},{"location":"developer-guide/#test-coverage","title":"Test Coverage","text":"<p>The test suite covers:</p> <ul> <li>\u2705 WebSocket server initialization and startup</li> <li>\u2705 Client connection and disconnection</li> <li>\u2705 Message sending and receiving</li> <li>\u2705 User data requests and responses</li> <li>\u2705 Server list retrieval</li> <li>\u2705 OAuth2 authentication flow</li> <li>\u2705 Error handling and edge cases</li> <li>\u2705 Callback customization</li> <li>\u2705 Broadcasting functionality</li> <li>\u2705 Static file serving</li> <li>\u2705 Path traversal protection</li> <li>\u2705 Graceful shutdown</li> </ul>"},{"location":"developer-guide/#running-tests","title":"Running Tests","text":""},{"location":"developer-guide/#option-1-pytest-recommended","title":"Option 1: pytest (Recommended)","text":"<pre><code># Run all tests\npytest\n\n# Run with verbose output\npytest -v\n\n# Run specific test file\npytest tests/test_websocket_server.py\n\n# Run specific test\npytest tests/test_websocket_server.py::test_server_startup\n\n# Run with coverage\npytest --cov=d_back --cov-report=html\n</code></pre>"},{"location":"developer-guide/#option-2-simple-test-runner","title":"Option 2: Simple Test Runner","text":"<p>For Python 3.8+ without pytest:</p> <pre><code>python -m tests.test_websocket_server\n</code></pre>"},{"location":"developer-guide/#option-3-manual-testing","title":"Option 3: Manual Testing","text":"<p>Start the server and test manually:</p> <pre><code># Terminal 1: Start server\nd_back\n\n# Terminal 2: Test with Python client\npython test_client.py\n</code></pre>"},{"location":"developer-guide/#writing-tests","title":"Writing Tests","text":"<p>Tests use pytest and pytest-asyncio for async support:</p> <pre><code>import pytest\nimport websockets\nimport json\nfrom d_back.server import WebSocketServer\n\n@pytest.mark.asyncio\nasync def test_my_feature():\n    \"\"\"Test description.\"\"\"\n    # Setup\n    server = WebSocketServer(port=3001, host=\"localhost\")\n    await server.start()\n\n    try:\n        # Test\n        async with websockets.connect(\"ws://localhost:3001\") as websocket:\n            # Send request\n            await websocket.send(json.dumps({\n                \"type\": \"get_user_data\",\n                \"serverId\": \"232769614004748288\"\n            }))\n\n            # Receive response\n            response = await websocket.recv()\n            data = json.loads(response)\n\n            # Assertions\n            assert data[\"type\"] == \"user_data\"\n            assert \"users\" in data\n\n    finally:\n        # Cleanup\n        await server.stop()\n</code></pre>"},{"location":"developer-guide/#test-configuration","title":"Test Configuration","text":"<p>Test settings are defined in <code>pyproject.toml</code>:</p> <pre><code>[tool.pytest.ini_options]\nasyncio_mode = \"auto\"\ntestpaths = [\"tests\"]\npython_files = \"test_*.py\"\npython_functions = \"test_*\"\n</code></pre>"},{"location":"developer-guide/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"developer-guide/#code-style","title":"Code Style","text":"<p>Follow these conventions to maintain code quality:</p> <ul> <li>PEP 8: Follow Python style guide</li> <li>Type Hints: Add type annotations to all functions</li> <li>Docstrings: Use Google-style docstrings</li> <li>Function Size: Keep functions focused and under 50 lines when possible</li> <li>Variable Names: Use descriptive names (avoid single letters except loops)</li> </ul> <p>Example: <pre><code>async def fetch_user_data(server_id: str, include_offline: bool = False) -&gt; Dict[str, Any]:\n    \"\"\"\n    Fetch user data for a Discord server.\n\n    Args:\n        server_id: Discord server snowflake ID.\n        include_offline: Whether to include offline users.\n\n    Returns:\n        Dictionary mapping user IDs to user objects.\n\n    Examples:\n        &gt;&gt;&gt; data = await fetch_user_data(\"123456789\")\n        &gt;&gt;&gt; print(data.keys())\n        dict_keys(['user1', 'user2'])\n    \"\"\"\n    # Implementation\n    pass\n</code></pre></p>"},{"location":"developer-guide/#documentation","title":"Documentation","text":"<p>Document your changes thoroughly:</p> <ul> <li>Docstrings: Add to all public classes and methods</li> <li>Examples: Include usage examples in docstrings</li> <li>User Guide: Update relevant documentation pages</li> <li>CHANGELOG: Add entry describing your change</li> </ul> <p>Test documentation builds: <pre><code>mkdocs serve\n</code></pre></p> <p>Visit <code>http://127.0.0.1:8000</code> to preview.</p>"},{"location":"developer-guide/#documentation-translation","title":"Documentation Translation","text":""},{"location":"developer-guide/#overview","title":"Overview","text":"<p>The d-back documentation is available in multiple languages (English, Spanish, German). We use Crowdin to manage translations collaboratively. English is the source language \u2014 make changes to English files first. Translations are synchronized using Crowdin and GitHub Actions. The project uses <code>mkdocs-static-i18n</code> with the suffix structure (e.g., <code>index.es.md</code>, <code>index.de.md</code>).</p>"},{"location":"developer-guide/#crowdin-project-setup","title":"Crowdin Project Setup","text":"<ol> <li>Create a Crowdin project at https://crowdin.com and select Markdown as the file type.</li> <li>Set English as the source language and add Spanish (<code>es</code>) and German (<code>de</code>) as target languages.</li> <li>Install the Crowdin GitHub App on the repository, or configure Crowdin CLI with GitHub Actions. The repository root <code>crowdin.yml</code> defines file patterns and parser options used by Crowdin.</li> </ol> <p>Required GitHub secrets (Repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions):</p> <ul> <li><code>CROWDIN_PROJECT_ID</code> \u2014 Crowdin project ID</li> <li><code>CROWDIN_PERSONAL_TOKEN</code> \u2014 Crowdin personal access token</li> </ul>"},{"location":"developer-guide/#setting-up-github-secrets","title":"Setting Up GitHub Secrets","text":"<p>Create the required secrets for Crowdin integration:</p> <ol> <li>Obtain Crowdin Credentials:</li> <li>Project ID: <ul> <li>Log in to Crowdin</li> <li>Navigate to your project</li> <li>Go to Settings \u2192 API</li> <li>Copy the Project ID (numeric value)</li> </ul> </li> <li> <p>Personal Access Token:</p> <ul> <li>Go to Account Settings \u2192 API</li> <li>Click \"New Token\"</li> <li>Name: \"d-back GitHub Actions\"</li> <li>Scopes: Select \"Projects\" (read/write)</li> <li>Click \"Create\"</li> <li>Copy the token immediately (it won't be shown again)</li> </ul> </li> <li> <p>Add Secrets to GitHub Repository:</p> </li> <li>Navigate to: Repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Click \"New repository secret\"</li> <li>Add <code>CROWDIN_PROJECT_ID</code>:<ul> <li>Name: <code>CROWDIN_PROJECT_ID</code></li> <li>Value: Your Crowdin project ID (numeric)</li> <li>Click \"Add secret\"</li> </ul> </li> <li> <p>Add <code>CROWDIN_PERSONAL_TOKEN</code>:</p> <ul> <li>Name: <code>CROWDIN_PERSONAL_TOKEN</code></li> <li>Value: Your Crowdin personal access token</li> <li>Click \"Add secret\"</li> </ul> </li> <li> <p>Verify Secrets:</p> </li> <li>Secrets should appear in the repository secrets list</li> <li>Secret values are hidden and cannot be viewed after creation</li> <li>Only repository administrators can manage secrets</li> </ol> <p>Important Security Notes: - Never commit tokens or project IDs to the repository - Tokens have full access to your Crowdin project - keep them secure - Rotate tokens periodically for security - Use repository secrets, not environment secrets (for repository-specific access)</p>"},{"location":"developer-guide/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Overview:</p> <p>The Crowdin synchronization is automated via GitHub Actions. The workflow is defined in <code>.github/workflows/crowdin.yml</code> and handles: - Uploading English source files to Crowdin when documentation is updated - Downloading translations and creating pull requests for review</p> <p>Workflow Triggers:</p> <ol> <li>Automatic Upload (Push to main):</li> <li>Triggers when documentation files are pushed to the main branch</li> <li>Uploads new/changed English source files to Crowdin</li> <li>Translators are notified of new content to translate</li> <li> <p>Runs automatically - no manual intervention needed</p> </li> <li> <p>Manual Download (workflow_dispatch):</p> </li> <li>Triggered manually from GitHub Actions UI</li> <li>Downloads completed translations from Crowdin</li> <li>Creates a pull request with translation updates</li> <li>Allows review before merging translations</li> </ol> <p>How It Works:</p> <ol> <li>Source Upload Process:</li> <li>Developer merges documentation changes to main branch</li> <li>GitHub Actions detects changes in <code>docs/**/*.md</code> files</li> <li>Workflow uploads changed English files to Crowdin</li> <li>Crowdin analyzes changes and notifies translators</li> <li> <p>Translators see new/modified strings in Crowdin editor</p> </li> <li> <p>Translation Download Process:</p> </li> <li>Maintainer manually triggers the workflow from GitHub Actions UI</li> <li>Workflow downloads completed translations from Crowdin</li> <li>Creates a new branch: <code>crowdin-translations</code></li> <li>Creates a pull request with title: \"docs: update translations from Crowdin\"</li> <li>PR includes labels: documentation, translations, crowdin</li> <li>Maintainer reviews and merges the PR</li> </ol> <p>Testing the Workflow:</p> <ol> <li>Test Source Upload:</li> <li>Make a small change to an English documentation file (e.g., add a sentence to <code>docs/index.md</code>)</li> <li>Commit and push to main branch</li> <li>Navigate to: Repository \u2192 Actions \u2192 Crowdin Sync workflow</li> <li>Verify the workflow runs successfully</li> <li> <p>Check Crowdin project to confirm the new content appears</p> </li> <li> <p>Test Translation Download:</p> </li> <li>Ensure some translations are completed in Crowdin</li> <li>Navigate to: Repository \u2192 Actions \u2192 Crowdin Sync workflow</li> <li>Click \"Run workflow\" button</li> <li>Select \"main\" branch</li> <li>Click \"Run workflow\"</li> <li>Wait for workflow to complete</li> <li>Check Pull Requests tab for new PR from Crowdin</li> <li>Review the PR and merge if translations look correct</li> </ol> <p>Monitoring Workflow:</p> <ul> <li>View workflow runs: Repository \u2192 Actions \u2192 Crowdin Sync</li> <li>Check workflow status: See status badge (can be added to README)</li> <li>Workflow logs: Click on any workflow run to see detailed logs</li> <li>Failed workflows: Error messages appear in logs with troubleshooting info</li> </ul> <p>Troubleshooting Workflow Issues:</p> <p>Issue: Workflow fails with \"Authentication failed\" - Solution: Verify <code>CROWDIN_PROJECT_ID</code> and <code>CROWDIN_PERSONAL_TOKEN</code> secrets are set correctly - Solution: Check that the personal access token has \"Projects\" scope enabled - Solution: Ensure the token hasn't expired (tokens don't expire by default, but can be revoked)</p> <p>Issue: Workflow runs but no files uploaded to Crowdin - Solution: Check that changed files match the patterns in <code>crowdin.yml</code> (<code>/docs/**/*.md</code>) - Solution: Verify files are not in the ignore list in <code>crowdin.yml</code> - Solution: Check workflow logs for file detection messages</p> <p>Issue: Translation PR not created - Solution: Ensure workflow was triggered via workflow_dispatch (manual trigger) - Solution: Verify there are completed translations in Crowdin to download - Solution: Check that GitHub Actions has write permissions for pull requests - Solution: Review workflow logs for PR creation errors</p> <p>Issue: PR created but translations missing - Solution: Verify translations are marked as \"approved\" in Crowdin (if approval workflow is enabled) - Solution: Check that translation files match the pattern in <code>crowdin.yml</code> - Solution: Ensure translators completed translations for all languages (Spanish and German)</p> <p>Localization Branch:</p> <p>The workflow creates a branch named <code>crowdin-translations</code> for translation updates: - This branch is automatically created/updated by the workflow - Each translation download overwrites this branch with latest translations - The branch is used as the source for the pull request - After merging the PR, the branch can be deleted (GitHub offers this option) - The workflow will recreate the branch on the next translation download</p> <p>Best Practices: - Run translation downloads periodically (e.g., weekly) to keep translations up-to-date - Review translation PRs carefully before merging - Test the documentation build locally after merging translations - Coordinate with translators about translation deadlines - Use Crowdin's approval workflow for quality control (optional)</p>"},{"location":"developer-guide/#translation-workflow","title":"Translation Workflow","text":"<ol> <li>Edit English source files (for example: <code>docs/index.md</code>, <code>docs/getting-started.md</code>) and submit a pull request.</li> <li>After the PR is merged into <code>main</code>, Crowdin will detect changed strings and notify translators.</li> <li>Translators translate content in the Crowdin editor. Crowdin preserves code blocks, inline code, and markdown formatting.</li> <li>Translations are synced back to the repository via Crowdin GitHub integration or through GitHub Actions. Crowdin will create PRs with translation updates for maintainers to review and merge.</li> </ol>"},{"location":"developer-guide/#file-structure-and-naming","title":"File Structure and Naming","text":"<ul> <li>English (source): <code>docs/index.md</code>, <code>docs/getting-started.md</code>, <code>docs/user-guide/configuration.md</code></li> <li>Spanish: <code>docs/index.es.md</code>, <code>docs/getting-started.es.md</code>, <code>docs/user-guide/configuration.es.md</code></li> <li>German: <code>docs/index.de.md</code>, <code>docs/getting-started.de.md</code>, <code>docs/user-guide/configuration.de.md</code></li> </ul> <p>This suffix-based convention matches <code>mkdocs-static-i18n</code> configuration in <code>mkdocs.yml</code>.</p>"},{"location":"developer-guide/#what-gets-translated","title":"What Gets Translated","text":"<p>Translated content includes:</p> <ul> <li>Explanatory text, section headings, and titles</li> <li>User-facing messages and instructions</li> <li>Non-code examples' descriptions</li> </ul> <p>Not translated:</p> <ul> <li>Code blocks and inline code</li> <li>Function and class names</li> <li>File paths and URLs</li> <li>Configuration keys and values</li> <li>Project names and technical terms (e.g., d-back, d-zone, WebSocket, OAuth2)</li> </ul>"},{"location":"developer-guide/#excluded-files","title":"Excluded Files","text":"<p>The following files are intentionally excluded from Crowdin translation:</p> <ul> <li><code>docs/VERCEL_SETUP.md</code> (internal Vercel deployment docs)</li> <li><code>docs/TESTING_I18N.md</code> (internal i18n testing docs)</li> <li><code>docs/.pages</code> (navigation configuration)</li> <li>API reference files (auto-generated by <code>mkdocstrings</code>)</li> </ul>"},{"location":"developer-guide/#testing-translations-locally","title":"Testing Translations Locally","text":"<pre><code># Install documentation dependencies\npip install -e .[docs]\n\n# Serve documentation locally with all languages\nmkdocs serve\n\n# Build documentation (generates site/ directory with all languages)\nmkdocs build\n</code></pre> <p>Check specific language previews:</p> <ul> <li>English: <code>http://127.0.0.1:8000/</code></li> <li>Spanish: <code>http://127.0.0.1:8000/es/</code></li> <li>German: <code>http://127.0.0.1:8000/de/</code></li> </ul>"},{"location":"developer-guide/#translation-best-practices","title":"Translation Best Practices","text":"<ul> <li>Use a formal tone for user-facing content (Spanish: \"usted\", German: \"Sie\").</li> <li>Keep technical terms and project names in English.</li> <li>Preserve markdown formatting, code blocks, and inline code.</li> <li>Test translations locally before submitting them.</li> </ul>"},{"location":"developer-guide/#adding-new-languages","title":"Adding New Languages","text":"<p>To add a new language:</p> <ol> <li>Update <code>mkdocs.yml</code> i18n configuration to include the new language.</li> <li>Update <code>crowdin.yml</code> with the new <code>two_letters_code</code>.</li> <li>Add the language in the Crowdin project settings.</li> <li>Create initial translation files following the suffix pattern.</li> <li>Update this section with the new language details.</li> </ol>"},{"location":"developer-guide/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues:</p> <ul> <li>Translations not appearing in Crowdin: ensure file patterns in <code>crowdin.yml</code> match committed files and they are not listed in <code>ignore</code>.</li> <li>Translations not syncing to GitHub: check GitHub Actions logs and verify <code>CROWDIN_PROJECT_ID</code> and <code>CROWDIN_PERSONAL_TOKEN</code> are set.</li> <li>Broken formatting: review translations in Crowdin editor and verify code blocks are preserved.</li> </ul>"},{"location":"developer-guide/#resources","title":"Resources","text":"<ul> <li>Crowdin documentation: https://support.crowdin.com/</li> <li>mkdocs-static-i18n: https://github.com/ultrabug/mkdocs-static-i18n</li> <li>Material for MkDocs i18n: https://squidfunk.github.io/mkdocs-material/setup/changing-the-language/</li> </ul>"},{"location":"developer-guide/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/my-awesome-feature\n</code></pre></p> </li> <li> <p>Make your changes:</p> </li> <li>Write code</li> <li>Add tests</li> <li> <p>Update documentation</p> </li> <li> <p>Ensure tests pass:    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"feat: add awesome feature\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/my-awesome-feature\n</code></pre></p> </li> <li> <p>Create Pull Request on GitHub:</p> </li> <li>Provide clear description</li> <li>Link related issues</li> <li> <p>Explain motivation and changes</p> </li> <li> <p>Respond to review feedback:</p> </li> <li>Address comments</li> <li>Push additional commits</li> <li>Request re-review</li> </ol>"},{"location":"developer-guide/#commit-message-format","title":"Commit Message Format","text":"<p>Use conventional commits format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes (formatting) - <code>refactor</code>: Code refactoring - <code>test</code>: Test additions or changes - <code>chore</code>: Maintenance tasks</p> <p>Examples: <pre><code>feat: add OAuth2 token validation callback\n\nImplement on_validate_discord_user callback to support\nDiscord OAuth2 authentication flow.\n\nCloses #123\n</code></pre></p> <pre><code>fix: handle connection errors gracefully\n\nAdd try-except block to prevent server crash when\nclient disconnects unexpectedly.\n</code></pre> <pre><code>docs: update API reference with examples\n\nAdd comprehensive examples to WebSocketServer methods\nin API documentation.\n</code></pre>"},{"location":"developer-guide/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/#day-to-day-development","title":"Day-to-Day Development","text":"<ol> <li> <p>Sync with upstream:    <pre><code>git fetch upstream\ngit rebase upstream/main\n</code></pre></p> </li> <li> <p>Create feature branch:    <pre><code>git checkout -b feature/my-feature\n</code></pre></p> </li> <li> <p>Make changes and test:    <pre><code># Edit files\npytest\nmkdocs serve  # If updating docs\n</code></pre></p> </li> <li> <p>Commit and push:    <pre><code>git add .\ngit commit -m \"feat: add my feature\"\ngit push origin feature/my-feature\n</code></pre></p> </li> <li> <p>Create Pull Request on GitHub</p> </li> </ol>"},{"location":"developer-guide/#debugging","title":"Debugging","text":""},{"location":"developer-guide/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"developer-guide/#use-python-debugger","title":"Use Python Debugger","text":"<pre><code>import pdb\n\nasync def my_function():\n    # Set breakpoint\n    pdb.set_trace()\n    # Code here\n</code></pre>"},{"location":"developer-guide/#test-with-mock-client","title":"Test with Mock Client","text":"<pre><code>from tests.helpers.mock_websocket_client import MockWebSocketClient\n\nasync def test_manually():\n    client = MockWebSocketClient(\"ws://localhost:3000\")\n    await client.connect()\n    await client.send_message({\"type\": \"get_user_data\", \"serverId\": \"123\"})\n    response = await client.receive_message()\n    print(response)\n</code></pre>"},{"location":"developer-guide/#check-browser-console","title":"Check Browser Console","text":"<p>When testing frontend integration, open browser DevTools and check: - Console for errors - Network tab for WebSocket messages - Application tab for connection status</p>"},{"location":"developer-guide/#websocket-inspection-tools","title":"WebSocket Inspection Tools","text":"<p>Use tools like: - Chrome DevTools: Network \u2192 WS tab - Postman: WebSocket request feature - wscat: Command-line WebSocket client</p>"},{"location":"developer-guide/#release-process","title":"Release Process","text":""},{"location":"developer-guide/#version-numbering","title":"Version Numbering","text":"<p>d-back follows Semantic Versioning:</p> <ul> <li>MAJOR.MINOR.PATCH (e.g., 1.2.3)</li> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backwards compatible)</li> <li>PATCH: Bug fixes</li> </ul>"},{"location":"developer-guide/#version-location","title":"Version Location","text":"<p>Version is defined in <code>setup.cfg</code>:</p> <pre><code>[metadata]\nname = d_back\nversion = 0.0.14\n</code></pre>"},{"location":"developer-guide/#creating-a-release","title":"Creating a Release","text":"<ol> <li>Update version in <code>setup.cfg</code></li> <li>Update CHANGELOG.md with release notes</li> <li>Commit changes:    <pre><code>git commit -am \"chore: bump version to 0.0.15\"\n</code></pre></li> <li>Create git tag:    <pre><code>git tag v0.0.15\ngit push origin v0.0.15\n</code></pre></li> <li>GitHub Actions automatically builds and publishes to PyPI</li> </ol>"},{"location":"developer-guide/#documentation-versioning","title":"Documentation Versioning","text":"<p>d-back uses mike for documentation versioning, which integrates seamlessly with Material for MkDocs to provide a version selector in the documentation. The versioning strategy uses three types of versions:</p> <ul> <li>Stable versions: Created from git tags (e.g., 0.0.14, 0.1.0, 1.0.0)</li> <li>Prerelease 'latest': Tracks the main branch (production-ready but not yet tagged)</li> <li>Prerelease 'dev': Tracks the develop branch (development/testing)</li> </ul> <p>The version selector appears in the top navigation bar, allowing users to switch between different documentation versions.</p>"},{"location":"developer-guide/#versioning-strategy","title":"Versioning Strategy","text":"<p>1. Stable Versions (from tags)</p> <p>Created when a new version is tagged:</p> <ul> <li>Version number matches the git tag without the 'v' prefix</li> <li>These versions are permanent and immutable</li> <li>Example: Tag v0.0.15 creates documentation version 0.0.15</li> <li>Command: <code>mike deploy 0.0.15 --push</code></li> </ul> <p>2. Latest Prerelease (main branch)</p> <p>Represents the current state of the main branch:</p> <ul> <li>Alias: 'latest'</li> <li>Updated on every push to main</li> <li>This is the default version users see</li> <li>Command: <code>mike deploy &lt;commit-sha&gt; latest --push --update-aliases</code></li> </ul> <p>3. Dev Prerelease (develop branch)</p> <p>Represents the current state of the develop branch:</p> <ul> <li>Alias: 'dev'</li> <li>Updated on every push to develop</li> <li>Used for testing documentation changes before release</li> <li>Command: <code>mike deploy &lt;commit-sha&gt; dev --push --update-aliases</code></li> </ul>"},{"location":"developer-guide/#local-testing","title":"Local Testing","text":"<p>Test mike locally before deploying:</p> <pre><code># Install documentation dependencies (includes mike)\npip install -e .[docs]\n\n# Deploy a test version locally (doesn't push to remote)\nmike deploy 0.0.14-test\n\n# Deploy with an alias\nmike deploy 0.0.15-test latest --update-aliases\n\n# Set the default version (what users see when visiting the docs)\nmike set-default latest\n\n# List all deployed versions\nmike list\n\n# Serve the versioned documentation locally\nmike serve\n# Visit http://localhost:8000 to test\n# Use the version selector in the top navigation to switch between versions\n\n# Delete a test version\nmike delete 0.0.14-test\n</code></pre> <p>Important notes for local testing:</p> <ul> <li>Mike creates a <code>gh-pages</code> branch locally to store versioned documentation</li> <li>Use test version names (e.g., 0.0.14-test) to avoid conflicts with production versions</li> <li>The <code>--push</code> flag is omitted during local testing to prevent accidental deployment</li> <li>Always test the version selector functionality before deploying</li> <li>Verify that all three languages (English, Spanish, German) work correctly in each version</li> </ul>"},{"location":"developer-guide/#version-aliases","title":"Version Aliases","text":"<p>Aliases are symbolic names that point to specific versions:</p> <ul> <li>Common aliases: 'latest' (main branch), 'dev' (develop branch), 'stable' (latest stable release)</li> <li>Aliases can be updated to point to different versions</li> <li>Example: After releasing 0.1.0, update 'stable' alias: <code>mike deploy 0.1.0 stable --update-aliases</code></li> <li>The <code>--update-aliases</code> flag updates existing aliases instead of creating duplicates</li> </ul>"},{"location":"developer-guide/#deployment-workflow","title":"Deployment Workflow","text":"<p>Manual deployment process (for local testing or when needed):</p> <p>For stable releases: <pre><code># After creating a git tag (e.g., v0.0.15)\nmike deploy 0.0.15 stable --push --update-aliases\nmike set-default stable --push\n</code></pre></p> <p>For main branch updates: <pre><code># After merging to main\nmike deploy &lt;commit-sha&gt; latest --push --update-aliases\n</code></pre></p> <p>For develop branch updates: <pre><code># After merging to develop\nmike deploy &lt;commit-sha&gt; dev --push --update-aliases\n</code></pre></p> <p>Note: These commands are for manual deployment. Automated deployment via GitHub Actions is the recommended approach for production (see \"Automated Deployment with GitHub Actions\" below).</p>"},{"location":"developer-guide/#automated-deployment-with-github-actions","title":"Automated Deployment with GitHub Actions","text":"<p>Documentation deployment is automated via GitHub Actions. The workflow is defined in <code>.github/workflows/docs.yml</code> and handles all production deployments.</p> <p>Overview:</p> <ul> <li>Documentation deploys automatically on pushes to main, develop, and tag creation</li> <li>The workflow manages versioning with mike and deploys to GitHub Pages</li> <li>Manual deployment using mike locally is still available for testing</li> <li>All three languages (English, Spanish, German) are built and deployed together</li> </ul> <p>Automatic Triggers:</p> <ol> <li>Tag creation (v*): Creates a stable version</li> <li>Example: Tag <code>v0.0.15</code> deploys version <code>0.0.15</code> with alias <code>stable</code></li> <li>Stable versions are permanent and immutable</li> <li>Set as the default version users see</li> <li>Command executed: <code>mike deploy 0.0.15 stable --push --update-aliases</code></li> <li> <p>Command executed: <code>mike set-default stable --push</code></p> </li> <li> <p>Push to main: Deploys 'latest' prerelease</p> </li> <li>Represents the current production-ready state</li> <li>Not set as default (stable releases remain the default)</li> <li>Uses stable version identifier 'edge'</li> <li> <p>Command executed: <code>mike deploy edge latest --push --update-aliases</code></p> </li> <li> <p>Push to develop: Deploys 'dev' prerelease</p> </li> <li>Represents the current development state</li> <li>Used for testing documentation changes before release</li> <li>Not set as default (dev is for testing only)</li> <li>Uses stable version identifier 'development'</li> <li> <p>Command executed: <code>mike deploy development dev --push --update-aliases</code></p> </li> <li> <p>Manual trigger: Available via <code>workflow_dispatch</code> in GitHub Actions UI</p> </li> <li>Useful for testing or re-deploying documentation</li> <li>Access via: Repository \u2192 Actions tab \u2192 Documentation workflow \u2192 Run workflow</li> </ol> <p>Workflow Process:</p> <ol> <li>Checkout repository: Fetches full git history (required for mike to access gh-pages branch)</li> <li>Set up Python 3.11: Installs Python with pip caching for faster builds</li> <li>Install dependencies: Runs <code>pip install -e .[docs]</code> to install mkdocs-material, mkdocs-static-i18n, mkdocstrings, and mike from setup.cfg</li> <li>Configure git: Sets up git user for automated commits to gh-pages branch</li> <li>Determine version: Analyzes the trigger type (tag, main, or develop) to decide deployment strategy</li> <li>Deploy with mike: Executes appropriate mike command to deploy versioned documentation to gh-pages branch</li> <li>GitHub Pages serves updated documentation: Changes appear within 1-2 minutes at https://nntin.github.io/d-back/</li> </ol> <p>Version Strategy:</p> <ul> <li>Stable versions (from tags): Permanent, immutable, represent official releases; always set as default</li> <li>'latest' alias: Updated on every main branch push; available in version selector but not set as default</li> <li>'dev' alias: Updated on every develop branch push, for testing only (never set as default)</li> <li>The version selector in documentation navigation shows all available versions</li> </ul> <p>Monitoring Deployments:</p> <ul> <li>View workflow runs: Repository \u2192 Actions tab \u2192 Documentation workflow</li> <li>Check deployment status: See the Documentation Status badge in README.md</li> <li>Workflow logs: Detailed deployment information available in each workflow run</li> <li>Failed deployments: Error messages appear in workflow logs with troubleshooting information</li> </ul> <p>GitHub Pages Configuration:</p> <p>First-time setup (only needed once):</p> <ol> <li>Go to: Repository Settings \u2192 Pages</li> <li>Set Source: Deploy from a branch</li> <li>Set Branch: <code>gh-pages</code> (created automatically by first workflow run)</li> <li>Click Save</li> <li>Documentation will be available at: https://nntin.github.io/d-back/</li> <li>Changes appear within 1-2 minutes after workflow completion</li> </ol> <p>Manual Deployment (if needed):</p> <p>The automated workflow handles most deployment scenarios. Manual deployment may be needed for:</p> <ul> <li>Testing documentation changes locally before pushing</li> <li>Fixing deployment issues that require local troubleshooting</li> <li>Deploying from a local branch for testing purposes</li> </ul> <p>Use the mike commands documented in the \"Deployment Workflow\" subsection above for manual deployment.</p> <p>Troubleshooting Workflow Issues:</p> <p>Issue: Workflow fails on git push to gh-pages - Solution: Check that Actions have write permissions   - Go to: Settings \u2192 Actions \u2192 General \u2192 Workflow permissions   - Select: \"Read and write permissions\"   - Click Save</p> <p>Issue: Deployed version not appearing in version selector - Solution: Verify the trigger condition matched the expected branch or tag - Solution: Check workflow logs to confirm deployment completed successfully - Solution: Ensure at least two versions are deployed for selector to appear</p> <p>Issue: Old content appearing in newly deployed version - Solution: Clear browser cache and reload - Solution: Check that workflow completed successfully in Actions tab - Solution: Verify the correct version was deployed by checking workflow logs</p> <p>Issue: gh-pages branch not created - Solution: Check workflow logs for errors during first deployment - Solution: Verify Actions have write permissions (see first issue above) - Solution: Manually trigger workflow via workflow_dispatch to retry</p>"},{"location":"developer-guide/#best-practices","title":"Best Practices","text":"<ul> <li>Always test locally with <code>mike serve</code> before deploying</li> <li>Use semantic versioning for stable releases (MAJOR.MINOR.PATCH)</li> <li>Keep 'latest' as the default version for users</li> <li>Document breaking changes in version-specific release notes</li> <li>Maintain at least the last 3 stable versions for reference</li> <li>Delete very old versions to keep the version list manageable: <code>mike delete 0.0.1 --push</code></li> <li>Verify multilingual support works in all deployed versions</li> </ul>"},{"location":"developer-guide/#troubleshooting_1","title":"Troubleshooting","text":"<p>Issue: Version selector not appearing - Solution: Verify <code>extra.version.provider: mike</code> is set in mkdocs.yml (already configured at line 137) - Solution: Ensure at least two versions are deployed - Solution: Check that Material theme is properly configured</p> <p>Issue: Versions not deploying - Solution: Ensure mike is installed: <code>pip install -e .[docs]</code> - Solution: Check that gh-pages branch exists - Solution: Verify git remote is configured correctly</p> <p>Issue: Language selector conflicts with version selector - Solution: Both selectors should work together; verify mkdocs-static-i18n configuration - Solution: Test with <code>mike serve</code> to ensure both selectors appear</p> <p>Issue: Old content appearing in new version - Solution: Use <code>mike deploy --update-aliases</code> to refresh aliases - Solution: Clear browser cache - Solution: Rebuild with <code>mkdocs build --clean</code> before deploying</p>"},{"location":"developer-guide/#resources_1","title":"Resources","text":"<ul> <li>Mike documentation: https://github.com/jimporter/mike</li> <li>Material for MkDocs versioning: https://squidfunk.github.io/mkdocs-material/setup/setting-up-versioning/</li> <li>Semantic Versioning: https://semver.org/</li> </ul> <p>Note: Documentation deployment is fully automated via GitHub Actions. See the \"Automated Deployment with GitHub Actions\" section above for details on how the workflow deploys documentation on branch pushes and tag creation.</p>"},{"location":"developer-guide/#future-enhancements","title":"Future Enhancements","text":"<p>We welcome contributions in these areas:</p>"},{"location":"developer-guide/#real-discord-api-integration","title":"Real Discord API Integration","text":"<ul> <li>Discord.py integration examples</li> <li>Gateway event forwarding</li> <li>Presence tracking improvements</li> <li>Voice channel support</li> </ul>"},{"location":"developer-guide/#additional-authentication-methods","title":"Additional Authentication Methods","text":"<ul> <li>GitHub OAuth</li> <li>Google OAuth</li> <li>Custom JWT tokens</li> <li>API key authentication</li> </ul>"},{"location":"developer-guide/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Connection pooling</li> <li>Redis caching layer</li> <li>Load balancing support</li> <li>Horizontal scaling</li> </ul>"},{"location":"developer-guide/#test-coverage_1","title":"Test Coverage","text":"<ul> <li>Integration tests with Discord API</li> <li>Load testing and benchmarks</li> <li>Security testing</li> <li>Frontend integration tests</li> </ul>"},{"location":"developer-guide/#documentation_1","title":"Documentation","text":"<ul> <li>Video tutorials</li> <li>Interactive examples</li> <li>Additional language translations (Spanish, German, etc.)</li> <li>Architecture diagrams</li> </ul>"},{"location":"developer-guide/#plugin-system","title":"Plugin System","text":"<ul> <li>Extensibility framework</li> <li>Community plugins</li> <li>Plugin marketplace</li> </ul>"},{"location":"developer-guide/#getting-help","title":"Getting Help","text":""},{"location":"developer-guide/#resources_2","title":"Resources","text":"<ul> <li>GitHub Issues: Report bugs</li> <li>GitHub Discussions: Ask questions</li> <li>API Reference: Complete API docs</li> <li>User Guide: Usage patterns</li> </ul>"},{"location":"developer-guide/#contact","title":"Contact","text":"<ul> <li>Repository: github.com/NNTin/d-back</li> <li>Issues: github.com/NNTin/d-back/issues</li> <li>Email: See GitHub profile</li> </ul>"},{"location":"developer-guide/#thank-you","title":"Thank You!","text":"<p>Thank you for contributing to d-back! Your efforts help make this project better for everyone. We appreciate your time and dedication.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to d-back! This guide will help you get up and running with the WebSocket server that powers the d-zone ambient life simulation. By the end of this guide, you'll have d-back installed and serving mock Discord data through WebSocket connections.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Python 3.8 or higher installed on your system</li> <li>pip package manager (usually comes with Python)</li> <li>Basic understanding of async/await in Python (helpful but not required)</li> <li>Git (optional, only needed if installing from source)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>d-back can be installed in several ways. Choose the method that best fits your needs:</p>"},{"location":"getting-started/#from-pypi-recommended","title":"From PyPI (Recommended)","text":"<p>The easiest way to install d-back is from the Python Package Index:</p> <pre><code>pip install d-back\n</code></pre>"},{"location":"getting-started/#from-source","title":"From Source","text":"<p>For the latest development version or if you want to contribute:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/NNTin/d-back.git\ncd d-back\n</code></pre></p> </li> <li> <p>Create a virtual environment (recommended):</p> </li> </ol> <p>=== \"Windows\"        <pre><code>python -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> <p>=== \"macOS/Linux\"        <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre></p> <ol> <li>Install in development mode:    <pre><code>pip install -e .\n</code></pre></li> </ol>"},{"location":"getting-started/#with-documentation-dependencies","title":"With Documentation Dependencies","text":"<p>If you plan to build the documentation locally:</p> <pre><code>pip install d-back[docs]\n</code></pre> <p>Or from source:</p> <pre><code>pip install -e .[docs]\n</code></pre>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that d-back is correctly installed:</p> <pre><code>d_back --version\n</code></pre> <p>You should see output similar to:</p> <pre><code>d-back version 0.0.14\n</code></pre> <p>Troubleshooting</p> <p>If the <code>d_back</code> command is not found, ensure your Python scripts directory is in your PATH. Alternatively, you can run d-back as a Python module: <code>python -m d_back --version</code></p>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":"<p>Now that d-back is installed, let's get it running!</p>"},{"location":"getting-started/#command-line-approach","title":"Command-Line Approach","text":"<p>The simplest way to start the server is with default settings:</p> <pre><code># Start with defaults (localhost:3000)\nd_back\n</code></pre> <p>Or run it as a Python module:</p> <pre><code>python -m d_back\n</code></pre> <p>You should see console output similar to:</p> <pre><code>WebSocket server started on ws://localhost:3000\nServing static files from: /path/to/d_back/dist\nPress Ctrl+C to stop the server\n</code></pre> <p>Default Settings</p> <p>By default, d-back runs on <code>localhost:3000</code> and serves the built-in d-zone frontend from static files.</p>"},{"location":"getting-started/#programmatic-approach","title":"Programmatic Approach","text":"<p>For more control, you can use d-back in your Python code:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Optional: Set up custom callbacks\n    # server.on_get_user_data(my_user_data_callback)\n    # server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\n# Run the server\nasyncio.run(main())\n</code></pre> <p>Each step explained: 1. Import modules: Import asyncio for async execution and WebSocketServer class 2. Create server: Instantiate WebSocketServer with desired port and host 3. Configure callbacks (optional): Customize data sources with callback functions 4. Start server: Call <code>await server.start()</code> to begin accepting connections</p>"},{"location":"getting-started/#your-first-websocket-connection","title":"Your First WebSocket Connection","text":"<p>Once the server is running, you can test the WebSocket connection from a client.</p>"},{"location":"getting-started/#using-javascriptbrowser","title":"Using JavaScript/Browser","text":"<p>Open your browser console and run:</p> <pre><code>// Connect to d-back\nconst socket = new WebSocket('ws://localhost:3000');\n\nsocket.onopen = () =&gt; {\n    console.log('Connected to d-back!');\n    // Request user data for a mock server\n    socket.send(JSON.stringify({\n        type: 'get_user_data',\n        serverId: '232769614004748288'\n    }));\n};\n\nsocket.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Received:', data);\n};\n</code></pre> <p>Message Format: The <code>get_user_data</code> request includes: - <code>type</code>: Message type (<code>\"get_user_data\"</code>) - <code>serverId</code>: Discord server ID (snowflake format)</p> <p>Expected Response: You'll receive a JSON object containing user data: <pre><code>{\n  \"type\": \"user_data\",\n  \"serverId\": \"232769614004748288\",\n  \"users\": {\n    \"user123\": {\n      \"uid\": \"user123\",\n      \"username\": \"ExampleUser\",\n      \"status\": \"online\",\n      \"roleColor\": \"#ff6b6b\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"getting-started/#using-python-websockets-library","title":"Using Python websockets Library","text":"<p>You can also connect using Python's <code>websockets</code> library:</p> <pre><code>import asyncio\nimport json\nimport websockets\n\nasync def test_connection():\n    uri = \"ws://localhost:3000\"\n    async with websockets.connect(uri) as websocket:\n        print(\"Connected to d-back!\")\n\n        # Request user data\n        request = {\n            \"type\": \"get_user_data\",\n            \"serverId\": \"232769614004748288\"\n        }\n        await websocket.send(json.dumps(request))\n\n        # Receive response\n        response = await websocket.recv()\n        data = json.loads(response)\n        print(\"Received:\", data)\n\nasyncio.run(test_connection())\n</code></pre>"},{"location":"getting-started/#expected-behavior","title":"Expected Behavior","text":"<p>When you successfully connect, you should see: 1. Connection established: WebSocket opens successfully 2. Server list received: Initial message with available Discord servers 3. User data returned: Response with mock user presence and role information</p>"},{"location":"getting-started/#understanding-mock-data","title":"Understanding Mock Data","text":"<p>d-back comes with pre-configured mock Discord servers for development and testing. This means you can start building and testing immediately without setting up Discord API credentials!</p> <p>The available mock servers are:</p> <ul> <li>d-world server (<code>232769614004748288</code>): Main development server with 4 active users across different statuses</li> <li>docs server (<code>482241773318701056</code>): Documentation server with 1 user</li> <li>oauth2 server (<code>123456789012345678</code>): Protected server for testing OAuth2 authentication flows with 1 user</li> <li>my repos server (<code>987654321098765432</code>): Repository showcase server with 21 users</li> </ul> <p>Perfect for Development</p> <p>Mock data is ideal for:</p> <ul> <li>Frontend development without backend dependencies</li> <li>Testing d-zone visualization with realistic data</li> <li>Demonstrating the system without Discord API keys</li> <li>CI/CD pipelines and automated testing</li> </ul> <p>To use real Discord data in production, you'll need to implement custom data providers. See the Custom Data Providers guide for details.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Congratulations! You now have d-back up and running. Here's what to explore next:</p> <ul> <li>User Guide: Learn about configuration options, callbacks, and customization</li> <li>Configuration: Customize server settings, ports, and static file serving</li> <li>Callbacks &amp; Customization: Replace mock data with your own data sources</li> <li>Custom Data Providers: Integrate with Discord API or databases</li> <li>API Reference: Detailed documentation of all classes and methods</li> <li>Developer Guide: Contributing guidelines and architecture overview</li> </ul> <p>Need Help?</p> <p>If you encounter issues, check the GitHub Issues or start a Discussion.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the d-back user guide! This comprehensive guide covers everything you need to effectively use d-back as a WebSocket server for your d-zone ambient life simulation or other real-time applications.</p>"},{"location":"user-guide/#introduction","title":"Introduction","text":"<p>This guide is designed for users who have already completed the Getting Started tutorial and want to dive deeper into d-back's features and capabilities. Whether you're looking to customize server behavior, integrate with real Discord data, or optimize your setup, you'll find the information you need here.</p> <p>The user guide is organized into three main areas:</p> <ul> <li>Configuration: Learn how to configure d-back through command-line options, environment variables, and programmatic settings</li> <li>Callbacks &amp; Customization: Discover how to customize server behavior using callback functions for data retrieval, authentication, and more</li> <li>Custom Data Providers: Replace mock data with real Discord API integration or your own custom data sources</li> </ul>"},{"location":"user-guide/#guide-structure","title":"Guide Structure","text":"<ul> <li> <p> Configuration</p> <p>Learn about command-line options, environment variables, and server settings</p> <p> Configuration Guide</p> </li> <li> <p> Callbacks &amp; Customization</p> <p>Customize server behavior with callback functions for data retrieval and authentication</p> <p> Callbacks Guide</p> </li> <li> <p> Custom Data Providers</p> <p>Replace mock data with real Discord API integration or custom data sources</p> <p> Data Providers Guide</p> </li> </ul>"},{"location":"user-guide/#common-use-cases","title":"Common Use Cases","text":"<p>Need to accomplish a specific task? Here are quick links to common scenarios:</p> Scenario Where to Look I want to change the server port Configuration \u2192 Command-Line Options I want to serve my own static files Configuration \u2192 Static File Serving I want to use real Discord data Custom Data Providers I want to add OAuth2 authentication Callbacks \u2192 OAuth2 Validation I want to broadcast custom messages Callbacks \u2192 Broadcasting Methods I want to customize user data format Callbacks \u2192 User Data Callback"},{"location":"user-guide/#quick-reference","title":"Quick Reference","text":"<p>Here's a summary of key concepts you'll encounter in this guide:</p> Concept Description WebSocketServer Main server class that handles WebSocket connections, HTTP requests, and message broadcasting MockDataProvider Built-in test data generator that simulates Discord user activity Callbacks Customization hooks that allow you to override default behavior (e.g., <code>on_get_user_data</code>, <code>on_get_server_data</code>) Static File Serving Built-in HTTP server for delivering frontend assets like HTML, CSS, and JavaScript Broadcasting Methods for sending real-time updates to connected clients (presence, messages, etc.) OAuth2 Integration Support for Discord OAuth2 authentication and token validation <p>Need API Details?</p> <p>For detailed API documentation including method signatures, parameters, and return types, see the API Reference.</p>"},{"location":"user-guide/#whats-next","title":"What's Next?","text":"<p>Ready to customize your d-back setup? Start with:</p> <ol> <li>Configuration - Set up your server with the right settings</li> <li>Callbacks &amp; Customization - Learn how to customize behavior</li> <li>Custom Data Providers - Integrate real data sources</li> </ol> <p>Questions?</p> <p>If you can't find what you're looking for, check the API Reference or visit our GitHub Discussions.</p>"},{"location":"user-guide/callbacks/","title":"Callbacks &amp; Customization","text":"<p>Learn how to customize d-back's behavior using callbacks to override default functionality, integrate with external data sources, and implement custom authentication logic.</p>"},{"location":"user-guide/callbacks/#introduction","title":"Introduction","text":"<p>d-back provides a powerful callback system that allows you to customize nearly every aspect of server behavior. Callbacks are async functions that you register with the server to replace default implementations, making it easy to:</p> <ul> <li>Replace mock data with real Discord API data</li> <li>Implement custom authentication and authorization</li> <li>Integrate with databases or other data sources</li> <li>Customize static file serving</li> <li>Add logging and monitoring</li> </ul> <p>All callbacks are async functions, designed to work seamlessly with Python's asyncio framework. The callback system is defined in the <code>WebSocketServer</code> class and provides hooks at key points in the request lifecycle.</p>"},{"location":"user-guide/callbacks/#available-callbacks","title":"Available Callbacks","text":""},{"location":"user-guide/callbacks/#on_get_server_data-callback","title":"on_get_server_data Callback","text":"<p>Purpose: Provide a list of available Discord servers (guilds) to clients.</p> <p>Signature: <pre><code>async def callback() -&gt; Dict[str, Any]\n</code></pre></p> <p>Expected Return Format: <pre><code>{\n    \"server_id_1\": {\n        \"id\": \"server_id_1\",\n        \"name\": \"My Discord Server\",\n        \"passworded\": False,\n        \"default\": True\n    },\n    \"server_id_2\": {\n        \"id\": \"server_id_2\",\n        \"name\": \"Another Server\",\n        \"passworded\": True,\n        \"default\": False\n    }\n}\n</code></pre></p> <p>Example: <pre><code>async def get_my_servers():\n    \"\"\"Fetch available Discord servers from a database.\"\"\"\n    # Your custom logic here\n    return {\n        \"232769614004748288\": {\n            \"id\": \"232769614004748288\",\n            \"name\": \"d-world\",\n            \"passworded\": False,\n            \"default\": True\n        }\n    }\n\nserver = WebSocketServer()\nserver.on_get_server_data(get_my_servers)\n</code></pre></p> <p>Use Case: Integrate with the Discord API to fetch the list of servers your bot is in, or fetch from a database of configured servers.</p>"},{"location":"user-guide/callbacks/#on_get_user_data-callback","title":"on_get_user_data Callback","text":"<p>Purpose: Provide user data (presence, roles, etc.) for a specific Discord server.</p> <p>Signature: <pre><code>async def callback(server_id: str) -&gt; Dict[str, Any]\n</code></pre></p> <p>Parameters: - <code>server_id</code> (str): Discord server snowflake ID</p> <p>Expected Return Format: <pre><code>{\n    \"user_id_1\": {\n        \"uid\": \"user_id_1\",\n        \"username\": \"CoolUser\",\n        \"status\": \"online\",  # online, idle, dnd, offline\n        \"roleColor\": \"#ff6b6b\"  # Hex color code\n    },\n    \"user_id_2\": {\n        \"uid\": \"user_id_2\",\n        \"username\": \"AnotherUser\",\n        \"status\": \"idle\",\n        \"roleColor\": \"#5bc0de\"\n    }\n}\n</code></pre></p> <p>Example: <pre><code>async def my_user_data_provider(server_id: str):\n    \"\"\"Fetch real user data from Discord API.\"\"\"\n    # Your custom logic here\n    return {\n        \"user123\": {\n            \"uid\": \"user123\",\n            \"username\": \"MyUser\",\n            \"status\": \"online\",\n            \"roleColor\": \"#ff6b6b\"\n        }\n    }\n\nserver = WebSocketServer()\nserver.on_get_user_data(my_user_data_provider)\n</code></pre></p> <p>Use Case: Fetch real Discord member data, query a database, or implement custom presence tracking.</p>"},{"location":"user-guide/callbacks/#on_static_request-callback","title":"on_static_request Callback","text":"<p>Purpose: Handle custom static file requests with dynamic generation or custom routing.</p> <p>Signature: <pre><code>async def callback(path: str) -&gt; Optional[Tuple[str, str]]\n</code></pre></p> <p>Parameters: - <code>path</code> (str): Requested file path (e.g., <code>\"/index.html\"</code>, <code>\"/api/data\"</code>)</p> <p>Expected Return: - <code>Tuple[str, str]</code>: (content_type, content) if handled - both strings - <code>None</code>: Fall back to default static file serving</p> <p>Example: <pre><code>async def custom_static_handler(path: str):\n    \"\"\"Dynamically generate or route static files.\"\"\"\n    if path == \"/api/status\":\n        # Return dynamic JSON\n        data = {\"status\": \"ok\", \"version\": \"1.0.0\"}\n        return (\"application/json\", json.dumps(data))\n\n    # Return None to use default static file serving\n    return None\n\nserver = WebSocketServer()\nserver.on_static_request(custom_static_handler)\n</code></pre></p> <p>Use Cases: - Dynamic file generation - Custom API endpoints - CDN integration - A/B testing different frontend versions - Server-side rendering</p>"},{"location":"user-guide/callbacks/#on_validate_discord_user-callback","title":"on_validate_discord_user Callback","text":"<p>Purpose: Validate Discord OAuth2 tokens and verify user membership in a server.</p> <p>Signature: <pre><code>async def callback(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool\n</code></pre></p> <p>Parameters: - <code>token</code> (str): Discord OAuth2 access token - <code>user_info</code> (Dict[str, Any]): User information from Discord OAuth2 - <code>server_id</code> (str): Discord server ID to validate membership in</p> <p>Expected Return: - <code>bool</code>: True if the token is valid and user is a member, False otherwise</p> <p>Example: <pre><code>import aiohttp\n\nasync def validate_token(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool:\n    \"\"\"Validate Discord OAuth2 token and check server membership.\"\"\"\n    try:\n        # Validate token with Discord API\n        async with aiohttp.ClientSession() as session:\n            headers = {\"Authorization\": f\"Bearer {token}\"}\n\n            # Check server membership\n            async with session.get(f\"https://discord.com/api/users/@me/guilds\", headers=headers) as resp:\n                if resp.status != 200:\n                    return False\n                guilds = await resp.json()\n\n                # Check if user is in the requested server\n                is_member = any(guild[\"id\"] == server_id for guild in guilds)\n                return is_member\n\n    except Exception as e:\n        print(f\"Token validation error: {e}\")\n        return False\n\nserver = WebSocketServer()\nserver.on_validate_discord_user(validate_token)\n</code></pre></p> <p>Use Case: Implement real Discord OAuth2 validation for protected servers.</p> <p>Security Note</p> <p>Always validate tokens server-side. Never trust client-provided user IDs without token validation.</p>"},{"location":"user-guide/callbacks/#on_get_client_id-callback","title":"on_get_client_id Callback","text":"<p>Purpose: Provide the Discord OAuth2 client ID for a specific server.</p> <p>Signature: <pre><code>async def callback(server_id: str) -&gt; str\n</code></pre></p> <p>Parameters: - <code>server_id</code> (str): Discord server ID</p> <p>Expected Return: - <code>str</code>: OAuth2 client ID string</p> <p>Example: <pre><code>async def get_client_id(server_id: str) -&gt; str:\n    \"\"\"Return OAuth2 client ID for a server.\"\"\"\n    # Could fetch from database or configuration\n    client_ids = {\n        \"232769614004748288\": \"123456789012345678\",\n        \"482241773318701056\": \"987654321098765432\"\n    }\n    return client_ids.get(server_id, \"default_client_id\")\n\nserver = WebSocketServer()\nserver.on_get_client_id(get_client_id)\n</code></pre></p> <p>Use Case: Support different OAuth2 applications per server for multi-tenant setups.</p>"},{"location":"user-guide/callbacks/#registering-callbacks","title":"Registering Callbacks","text":"<p>To register callbacks with d-back, call the callback method with your async function as an argument:</p> <pre><code>server = WebSocketServer()\nserver.on_get_user_data(my_callback_function)\n</code></pre> <p>Async Requirement</p> <p>All callbacks must be async functions (defined with <code>async def</code>). Synchronous functions will cause errors.</p>"},{"location":"user-guide/callbacks/#complete-example-with-multiple-callbacks","title":"Complete Example with Multiple Callbacks","text":"<pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\n# Define callbacks\nasync def get_servers():\n    return {\n        \"232769614004748288\": {\n            \"id\": \"232769614004748288\",\n            \"name\": \"d-world\",\n            \"passworded\": False,\n            \"default\": True\n        }\n    }\n\nasync def get_users(server_id: str):\n    # Fetch from database or Discord API\n    return {\n        \"user123\": {\n            \"uid\": \"user123\",\n            \"username\": \"TestUser\",\n            \"status\": \"online\",\n            \"roleColor\": \"#ff6b6b\"\n        }\n    }\n\nasync def validate_user(token: str, user_info: Dict[str, Any], server_id: str):\n    # Implement real OAuth2 validation\n    return True\n\n# Create and configure server\nasync def main():\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Register callbacks\n    server.on_get_server_data(get_servers)\n    server.on_get_user_data(get_users)\n    server.on_validate_discord_user(validate_user)\n\n    # Start server\n    await server.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"user-guide/callbacks/#broadcasting-methods","title":"Broadcasting Methods","text":"<p>In addition to receiving data through callbacks, d-back provides methods to broadcast updates to all connected clients.</p>"},{"location":"user-guide/callbacks/#broadcast_message","title":"broadcast_message","text":"<p>Purpose: Send chat messages to all clients subscribed to a server.</p> <p>Signature: <pre><code>async def broadcast_message(\n    server: str,\n    uid: str,\n    message: str,\n    channel: str\n)\n</code></pre></p> <p>Parameters: - <code>server</code> (str): Discord server ID - <code>uid</code> (str): User ID sending the message - <code>message</code> (str): Message content - <code>channel</code> (str): Channel ID where message was sent</p> <p>Example: <pre><code># When a Discord message is received\nawait server.broadcast_message(\n    server=\"232769614004748288\",\n    uid=\"user123\",\n    message=\"Hello, d-zone!\",\n    channel=\"channel456\"\n)\n</code></pre></p>"},{"location":"user-guide/callbacks/#broadcast_presence","title":"broadcast_presence","text":"<p>Purpose: Send user presence updates (status changes, online/offline events).</p> <p>Signature: <pre><code>async def broadcast_presence(\n    server: str,\n    uid: str,\n    status: str,\n    username: Optional[str] = None,\n    role_color: Optional[str] = None,\n    delete: bool = False\n)\n</code></pre></p> <p>Parameters: - <code>server</code> (str): Discord server ID - <code>uid</code> (str): User ID - <code>status</code> (str): User status (<code>\"online\"</code>, <code>\"idle\"</code>, <code>\"dnd\"</code>, <code>\"offline\"</code>) - <code>username</code> (Optional[str]): Username (required for new users) - <code>role_color</code> (Optional[str]): Role color hex code - <code>delete</code> (bool): Whether to remove the user (for offline/leave events)</p> <p>Example - User comes online: <pre><code>await server.broadcast_presence(\n    server=\"232769614004748288\",\n    uid=\"user123\",\n    status=\"online\",\n    username=\"CoolUser\",\n    role_color=\"#ff6b6b\"\n)\n</code></pre></p> <p>Example - User goes offline: <pre><code>await server.broadcast_presence(\n    server=\"232769614004748288\",\n    uid=\"user123\",\n    status=\"offline\",\n    delete=True\n)\n</code></pre></p>"},{"location":"user-guide/callbacks/#broadcast_client_id_update","title":"broadcast_client_id_update","text":"<p>Purpose: Send OAuth2 client ID updates to clients.</p> <p>Signature: <pre><code>async def broadcast_client_id_update(\n    server: str,\n    client_id: str\n)\n</code></pre></p> <p>Parameters: - <code>server</code> (str): Discord server ID - <code>client_id</code> (str): New OAuth2 client ID</p> <p>Example: <pre><code># When OAuth2 configuration changes\nawait server.broadcast_client_id_update(\n    server=\"232769614004748288\",\n    client_id=\"new_client_id_here\"\n)\n</code></pre></p> <p>Use Case: Dynamic OAuth2 configuration updates without reconnecting clients.</p>"},{"location":"user-guide/callbacks/#oauth2-integration","title":"OAuth2 Integration","text":"<p>d-back includes built-in support for Discord OAuth2 authentication, allowing you to restrict access to specific servers.</p>"},{"location":"user-guide/callbacks/#oauth2-flow","title":"OAuth2 Flow","text":"<ol> <li>Client requests connection to a protected server</li> <li>Server checks if the server requires authentication (passworded: true)</li> <li>Client obtains OAuth2 token from Discord</li> <li>Client sends token to d-back</li> <li>d-back validates token using <code>on_validate_discord_user</code> callback</li> <li>Server grants or denies access based on validation result</li> </ol>"},{"location":"user-guide/callbacks/#implementing-oauth2-validation","title":"Implementing OAuth2 Validation","text":"<pre><code>import aiohttp\n\nasync def oauth2_validator(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool:\n    \"\"\"Validate Discord OAuth2 token.\"\"\"\n    try:\n        async with aiohttp.ClientSession() as session:\n            # Validate with Discord API\n            headers = {\"Authorization\": f\"Bearer {token}\"}\n            async with session.get(\"https://discord.com/api/users/@me/guilds\", headers=headers) as resp:\n                if resp.status == 200:\n                    guilds = await resp.json()\n                    # Check membership\n                    for guild in guilds:\n                        if guild[\"id\"] == server_id:\n                            return True\n\n        return False\n\n    except Exception as e:\n        print(f\"OAuth2 validation error: {e}\")\n        return False\n\nserver = WebSocketServer()\nserver.on_validate_discord_user(oauth2_validator)\n</code></pre>"},{"location":"user-guide/callbacks/#security-considerations","title":"Security Considerations","text":"<p>Security Best Practices</p> <ul> <li>Always validate tokens server-side, never trust client claims</li> <li>Use HTTPS in production to protect tokens in transit</li> <li>Implement rate limiting to prevent token brute-forcing</li> <li>Log authentication attempts for security monitoring</li> <li>Rotate OAuth2 client secrets regularly</li> <li>Set appropriate token expiration times</li> </ul>"},{"location":"user-guide/callbacks/#error-handling","title":"Error Handling","text":"<p>Robust error handling in callbacks is essential for server stability.</p>"},{"location":"user-guide/callbacks/#best-practices","title":"Best Practices","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\nasync def safe_user_data_provider(server_id: str):\n    \"\"\"User data provider with comprehensive error handling.\"\"\"\n    try:\n        # Your data fetching logic\n        data = await fetch_user_data(server_id)\n\n        # Validate data format\n        if not isinstance(data, dict):\n            logger.error(f\"Invalid data format for server {server_id}\")\n            return {}\n\n        return data\n\n    except ConnectionError as e:\n        logger.error(f\"Connection error fetching user data: {e}\")\n        # Return empty dict or cached data\n        return {}\n\n    except Exception as e:\n        logger.exception(f\"Unexpected error in user data provider: {e}\")\n        # Return safe default\n        return {}\n\nserver = WebSocketServer()\nserver.on_get_user_data(safe_user_data_provider)\n</code></pre>"},{"location":"user-guide/callbacks/#error-handling-checklist","title":"Error Handling Checklist","text":"<ul> <li>\u2705 Use try-except blocks to catch exceptions</li> <li>\u2705 Log errors for debugging and monitoring</li> <li>\u2705 Return safe defaults on error (empty dict, None, etc.)</li> <li>\u2705 Validate input parameters before processing</li> <li>\u2705 Validate output format before returning</li> <li>\u2705 Don't let exceptions propagate to crash the server</li> <li>\u2705 Implement retries for transient failures (with backoff)</li> </ul>"},{"location":"user-guide/callbacks/#best-practices_1","title":"Best Practices","text":""},{"location":"user-guide/callbacks/#keep-callbacks-lightweight","title":"Keep Callbacks Lightweight","text":"<p>Callbacks are called frequently, so performance matters:</p> <pre><code># \u274c Bad: Expensive operation on every call\nasync def slow_callback(server_id: str):\n    # This queries the database every single time\n    data = await database.query_all_users(server_id)\n    return data\n\n# \u2705 Good: Use caching\nfrom functools import lru_cache\nimport time\n\n_cache = {}\n_cache_ttl = 60  # seconds\n\nasync def fast_callback(server_id: str):\n    # Check cache first\n    if server_id in _cache:\n        cached_data, cached_time = _cache[server_id]\n        if time.time() - cached_time &lt; _cache_ttl:\n            return cached_data\n\n    # Cache miss, fetch from database\n    data = await database.query_all_users(server_id)\n    _cache[server_id] = (data, time.time())\n    return data\n</code></pre>"},{"location":"user-guide/callbacks/#validate-input-parameters","title":"Validate Input Parameters","text":"<pre><code>async def validated_callback(server_id: str):\n    # Validate input\n    if not server_id or not isinstance(server_id, str):\n        logger.warning(f\"Invalid server_id: {server_id}\")\n        return {}\n\n    if not server_id.isdigit():\n        logger.warning(f\"server_id is not a snowflake: {server_id}\")\n        return {}\n\n    # Proceed with valid input\n    return await fetch_data(server_id)\n</code></pre>"},{"location":"user-guide/callbacks/#return-consistent-data-structures","title":"Return Consistent Data Structures","text":"<pre><code># Always return the expected format\nasync def consistent_callback(server_id: str):\n    try:\n        data = await fetch_data(server_id)\n\n        # Ensure correct format\n        if not isinstance(data, dict):\n            return {}\n\n        # Validate required fields\n        for user_id, user_data in data.items():\n            required_fields = [\"uid\", \"username\", \"status\", \"roleColor\"]\n            if not all(field in user_data for field in required_fields):\n                logger.warning(f\"User {user_id} missing required fields\")\n                # Fix or skip invalid user\n                continue\n\n        return data\n\n    except Exception:\n        # Always return expected type on error\n        return {}\n</code></pre>"},{"location":"user-guide/callbacks/#test-callbacks-independently","title":"Test Callbacks Independently","text":"<pre><code>import pytest\n\n@pytest.mark.asyncio\nasync def test_user_data_callback():\n    \"\"\"Test user data callback returns correct format.\"\"\"\n    data = await my_user_data_provider(\"232769614004748288\")\n\n    # Check return type\n    assert isinstance(data, dict)\n\n    # Check user data format\n    for user_id, user_data in data.items():\n        assert \"uid\" in user_data\n        assert \"username\" in user_data\n        assert \"status\" in user_data\n        assert user_data[\"status\"] in [\"online\", \"idle\", \"dnd\", \"offline\"]\n        assert \"roleColor\" in user_data\n        assert user_data[\"roleColor\"].startswith(\"#\")\n</code></pre>"},{"location":"user-guide/callbacks/#whats-next","title":"What's Next?","text":"<p>Now that you understand callbacks, explore how to implement complete custom data providers:</p> <ul> <li>Custom Data Providers: Full Discord API integration examples</li> <li>API Reference: Detailed API documentation</li> <li>Configuration: Server configuration options</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>This guide covers all the ways you can configure d-back to suit your needs, from command-line options to programmatic settings and environment variables.</p>"},{"location":"user-guide/configuration/#introduction","title":"Introduction","text":"<p>d-back offers flexible configuration options to adapt to different deployment scenarios. Whether you're running it from the command line during development or integrating it into a larger Python application, you have full control over server behavior, network settings, and static file serving.</p>"},{"location":"user-guide/configuration/#command-line-options","title":"Command-Line Options","text":"<p>When running d-back from the command line, you can customize its behavior using various options:</p>"},{"location":"user-guide/configuration/#available-options","title":"Available Options","text":"Option Default Description Example <code>--port</code> <code>3000</code> Port to run the WebSocket server on <code>d_back --port 8080</code> <code>--host</code> <code>localhost</code> Host to bind the server to <code>d_back --host 0.0.0.0</code> <code>--static-dir</code> Built-in Directory to serve static files from <code>d_back --static-dir ./my-frontend-build</code> <code>--version</code> - Show version information <code>d_back --version</code>"},{"location":"user-guide/configuration/#usage-examples","title":"Usage Examples","text":"<p>Default startup (localhost:3000): <pre><code>d_back\n</code></pre></p> <p>Custom host and port: <pre><code>d_back --host 0.0.0.0 --port 8080\n</code></pre></p> <p>This makes the server accessible from other machines on your network.</p> <p>Custom static directory: <pre><code>d_back --static-dir ./my-frontend-build\n</code></pre></p> <p>Serve your own frontend files instead of the built-in d-zone interface.</p> <p>Get help: <pre><code>d_back --help\n</code></pre></p> <p>Display all available command-line options.</p> <p>Check version: <pre><code>d_back --version\n</code></pre></p> <p>Running as a Module</p> <p>You can also run d-back as a Python module with the same options: <pre><code>python -m d_back --host 0.0.0.0 --port 8080\n</code></pre></p>"},{"location":"user-guide/configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<p>For more control and integration into your Python applications, you can configure d-back programmatically:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance with custom settings\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Configure callbacks (optional)\n    server.on_get_user_data(my_user_data_callback)\n    server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"user-guide/configuration/#constructor-parameters","title":"Constructor Parameters","text":"<p>The <code>WebSocketServer</code> class accepts the following parameters:</p> <ul> <li><code>port</code> (int, optional): The port number to listen on. Defaults to <code>3000</code>.</li> <li><code>host</code> (str, optional): The hostname or IP address to bind to. Defaults to <code>\"localhost\"</code>.</li> </ul>"},{"location":"user-guide/configuration/#when-to-use-programmatic-configuration","title":"When to Use Programmatic Configuration","text":"<p>Use programmatic configuration when you:</p> <ul> <li>Need to integrate d-back into a larger Python application</li> <li>Want to dynamically configure settings based on runtime conditions</li> <li>Need to access server instance methods and attributes</li> <li>Want to implement custom startup/shutdown logic</li> </ul>"},{"location":"user-guide/configuration/#accessing-server-attributes","title":"Accessing Server Attributes","text":"<p>Once you create a <code>WebSocketServer</code> instance, you can access various attributes:</p> <pre><code>server = WebSocketServer(port=3000, host=\"localhost\")\n\n# Access configuration\nprint(f\"Server will run on {server.host}:{server.port}\")\n\n# Access connections (set of connected WebSocket clients)\nprint(f\"Active connections: {len(server.connections)}\")\n\n# Access data provider\nprint(f\"Using data provider: {server.data_provider}\")\n</code></pre>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>While d-back doesn't use environment variables by default, you can easily extend it to support environment-based configuration:</p> <pre><code>import os\nfrom d_back.server import WebSocketServer\n\n# Example: Use environment variables\nport = int(os.getenv('D_BACK_PORT', 3000))\nhost = os.getenv('D_BACK_HOST', 'localhost')\n\nserver = WebSocketServer(port=port, host=host)\n</code></pre>"},{"location":"user-guide/configuration/#recommended-environment-variables","title":"Recommended Environment Variables","text":"<p>Here's a suggested pattern for environment variable naming:</p> Environment Variable Type Default Description <code>D_BACK_PORT</code> int <code>3000</code> Server port <code>D_BACK_HOST</code> str <code>localhost</code> Server host <code>D_BACK_STATIC_DIR</code> str Built-in Static files directory"},{"location":"user-guide/configuration/#example-full-environment-variable-integration","title":"Example: Full Environment Variable Integration","text":"<pre><code>import os\nimport asyncio\nfrom pathlib import Path\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Read configuration from environment\n    port = int(os.getenv('D_BACK_PORT', 3000))\n    host = os.getenv('D_BACK_HOST', 'localhost')\n    static_dir = os.getenv('D_BACK_STATIC_DIR')\n\n    # Create server\n    server = WebSocketServer(port=port, host=host)\n\n    # Configure static directory if provided\n    if static_dir:\n        server.static_dir = Path(static_dir)\n\n    # Start server\n    await server.start()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>Deployment Flexibility</p> <p>Using environment variables makes it easy to deploy d-back across different environments (development, staging, production) without code changes.</p>"},{"location":"user-guide/configuration/#static-file-serving","title":"Static File Serving","text":"<p>d-back includes a built-in HTTP server for serving static files, making it easy to deliver your d-zone frontend or other web assets.</p>"},{"location":"user-guide/configuration/#default-behavior","title":"Default Behavior","text":"<p>By default, d-back serves static files from its built-in <code>dist/</code> directory, which contains the d-zone frontend.</p>"},{"location":"user-guide/configuration/#custom-static-directory","title":"Custom Static Directory","text":"<p>To serve your own static files:</p> <p>Command-line: <pre><code>d_back --static-dir ./my-frontend-build\n</code></pre></p> <p>Programmatic: <pre><code>from pathlib import Path\nserver = WebSocketServer(port=3000, host=\"localhost\")\nserver.static_dir = Path(\"./my-frontend-build\")\n</code></pre></p>"},{"location":"user-guide/configuration/#requirements","title":"Requirements","text":"<p>Static file serving requires websockets version 10.0 or higher for HTTP protocol support. This is automatically handled by d-back's dependencies.</p>"},{"location":"user-guide/configuration/#security","title":"Security","text":"<p>d-back includes path traversal protection to prevent accessing files outside the static directory. Requests like <code>/../../../etc/passwd</code> are automatically blocked.</p> <p>Security Note</p> <p>Always ensure your static directory doesn't contain sensitive files. Only serve files that are intended to be publicly accessible.</p>"},{"location":"user-guide/configuration/#file-types","title":"File Types","text":"<p>The server automatically detects content types based on file extensions:</p> <ul> <li><code>.html</code> \u2192 <code>text/html</code></li> <li><code>.css</code> \u2192 <code>text/css</code></li> <li><code>.js</code> \u2192 <code>application/javascript</code></li> <li><code>.json</code> \u2192 <code>application/json</code></li> <li><code>.png</code>, <code>.jpg</code>, <code>.gif</code> \u2192 Appropriate image types</li> <li>And more...</li> </ul>"},{"location":"user-guide/configuration/#mock-server-configuration","title":"Mock Server Configuration","text":"<p>d-back comes with pre-configured mock Discord servers for development and testing. These servers provide realistic user data without requiring Discord API credentials.</p>"},{"location":"user-guide/configuration/#available-mock-servers","title":"Available Mock Servers","text":"Server Name Server ID Description User Count d-world server <code>232769614004748288</code> Main development server with diverse user activity 4 users docs server <code>482241773318701056</code> Documentation server with moderate activity 1 user oauth2 server <code>123456789012345678</code> Protected server for testing OAuth2 flows 1 user my repos server <code>987654321098765432</code> Repository showcase server 21 users"},{"location":"user-guide/configuration/#using-mock-servers","title":"Using Mock Servers","text":"<p>Mock servers are automatically available when you start d-back. You can request data for any of these servers using their server ID:</p> <pre><code>// JavaScript WebSocket client example\nsocket.send(JSON.stringify({\n    type: 'get_user_data',\n    serverId: '232769614004748288'  // d-world server\n}));\n</code></pre>"},{"location":"user-guide/configuration/#mock-data-characteristics","title":"Mock Data Characteristics","text":"<p>The mock data includes:</p> <ul> <li>User statuses: online, idle, dnd (do not disturb), offline</li> <li>Role colors: Hex color codes for visual representation</li> <li>Realistic names: Varied Discord-style usernames</li> <li>Dynamic updates: Status changes and messages occur periodically</li> </ul> <p>Development Only</p> <p>Mock servers are designed for development and testing. For production deployments, implement custom data providers to use real Discord data. See the Custom Data Providers guide.</p>"},{"location":"user-guide/configuration/#server-lifecycle","title":"Server Lifecycle","text":"<p>Understanding the server lifecycle helps you manage startup, operation, and shutdown effectively.</p>"},{"location":"user-guide/configuration/#starting-the-server","title":"Starting the Server","text":"<p>Method 1: <code>start()</code> <pre><code>await server.start()\n</code></pre> Starts the WebSocket server and HTTP listener. This method returns immediately after startup, allowing you to perform additional operations.</p> <p>Method 2: <code>run_forever()</code> <pre><code>await server.run_forever()\n</code></pre> Starts the server and runs it indefinitely until interrupted. This is useful for simple server scripts.</p>"},{"location":"user-guide/configuration/#stopping-the-server","title":"Stopping the Server","text":"<p>Graceful shutdown: <pre><code>await server.stop()\n</code></pre> Closes all active connections and stops the server cleanly.</p> <p>Signal handling: The server automatically handles <code>Ctrl+C</code> (SIGINT) for graceful shutdown. When you press <code>Ctrl+C</code>, the server will:</p> <ol> <li>Stop accepting new connections</li> <li>Close existing connections gracefully</li> <li>Clean up resources</li> <li>Exit</li> </ol>"},{"location":"user-guide/configuration/#complete-lifecycle-example","title":"Complete Lifecycle Example","text":"<pre><code>import asyncio\nimport signal\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Setup signal handler for graceful shutdown\n    loop = asyncio.get_event_loop()\n\n    def signal_handler():\n        print(\"\\nReceived shutdown signal...\")\n        asyncio.create_task(server.stop())\n\n    loop.add_signal_handler(signal.SIGINT, signal_handler)\n    loop.add_signal_handler(signal.SIGTERM, signal_handler)\n\n    # Start server\n    print(\"Starting server...\")\n    await server.start()\n\n    # Run forever\n    await server.run_forever()\n\nasyncio.run(main())\n</code></pre>"},{"location":"user-guide/configuration/#best-practices","title":"Best Practices","text":"<p>Follow these recommendations for optimal d-back configuration:</p>"},{"location":"user-guide/configuration/#network-configuration","title":"Network Configuration","text":"<p>Development vs Production</p> <ul> <li>Development: Use <code>localhost</code> to restrict access to your machine only</li> <li>Production: Use <code>0.0.0.0</code> to accept connections from any network interface</li> </ul> <p>Port Selection</p> <ul> <li>Avoid privileged ports (<code>&lt;1024</code>) unless running with appropriate permissions</li> <li>Common ports like <code>3000</code>, <code>8080</code>, or <code>8000</code> are good choices</li> <li>Check that your chosen port isn't already in use</li> </ul>"},{"location":"user-guide/configuration/#static-files","title":"Static Files","text":"<ul> <li>Organize: Keep static files in a dedicated directory</li> <li>Structure: Use standard web project structure (<code>index.html</code>, <code>css/</code>, <code>js/</code>, etc.)</li> <li>Build process: If using a frontend framework, configure your build output to the static directory</li> </ul>"},{"location":"user-guide/configuration/#configuration-management","title":"Configuration Management","text":"<ul> <li>Use environment variables for deployment-specific settings</li> <li>Use programmatic configuration for complex or dynamic setups</li> <li>Document your configuration in README or deployment guides</li> <li>Keep secrets secure: Never hardcode API keys or tokens</li> </ul>"},{"location":"user-guide/configuration/#performance","title":"Performance","text":"<ul> <li>Connection limits: Monitor the number of active connections</li> <li>Resource usage: Track memory and CPU usage under load</li> <li>Logging: Implement appropriate logging for debugging and monitoring</li> </ul> <p>Production Configuration Example</p> <pre><code>import os\nfrom d_back.server import WebSocketServer\n\n# Production-ready configuration\nserver = WebSocketServer(\n    port=int(os.getenv('PORT', 3000)),\n    host='0.0.0.0'  # Accept external connections\n)\n\n# Configure callbacks for real data\nserver.on_get_user_data(real_discord_data_provider)\nserver.on_validate_discord_user(oauth2_validator)\n\n# Start server\nawait server.start()\n</code></pre>"},{"location":"user-guide/configuration/#whats-next","title":"What's Next?","text":"<p>Now that you understand how to configure d-back, learn how to customize its behavior:</p> <ul> <li>Callbacks &amp; Customization: Override default behavior with custom callbacks</li> <li>Custom Data Providers: Replace mock data with real sources</li> <li>API Reference: Detailed API documentation</li> </ul>"},{"location":"user-guide/custom-data-providers/","title":"Custom Data Providers","text":"<p>Learn how to replace d-back's mock data with real Discord API integration, database sources, or any custom data provider to power your d-zone deployment.</p>"},{"location":"user-guide/custom-data-providers/#introduction","title":"Introduction","text":"<p>While d-back's mock data system is perfect for development and testing, production deployments require real data. Custom data providers allow you to:</p> <ul> <li>Integrate with the Discord API to fetch real user presence and server data</li> <li>Query databases for cached or processed user information</li> <li>Implement hybrid systems that combine multiple data sources</li> <li>Add custom business logic for data transformation</li> </ul> <p>This guide provides complete examples for implementing production-ready data providers with error handling, caching, and performance optimization.</p>"},{"location":"user-guide/custom-data-providers/#understanding-mock-data","title":"Understanding Mock Data","text":"<p>Before replacing the mock system, let's understand what it provides.</p>"},{"location":"user-guide/custom-data-providers/#mockdataprovider-class","title":"MockDataProvider Class","text":"<p>The <code>MockDataProvider</code> class (defined in <code>d_back/mock/data.py</code>) provides:</p> <ul> <li>User data: Mock Discord users with presence states (online, idle, dnd, offline)</li> <li>Server data: Pre-configured mock Discord servers</li> <li>Periodic updates: Background tasks that simulate status changes and messages</li> </ul>"},{"location":"user-guide/custom-data-providers/#mock-user-data-structure","title":"Mock User Data Structure","text":"<pre><code>{\n    \"user_id\": {\n        \"uid\": \"user_id\",           # Discord user snowflake ID\n        \"username\": \"Username\",      # Display name\n        \"status\": \"online\",          # online, idle, dnd, offline\n        \"roleColor\": \"#ff6b6b\"       # Hex color from highest role\n    }\n}\n</code></pre>"},{"location":"user-guide/custom-data-providers/#mock-server-data-structure","title":"Mock Server Data Structure","text":"<pre><code>{\n    \"server_id\": {\n        \"id\": \"server_id\",           # Discord server snowflake ID\n        \"name\": \"Server Name\",       # Guild name\n        \"passworded\": False,         # Whether OAuth2 is required\n        \"default\": True              # Whether this is the default server\n    }\n}\n</code></pre> <p>Automatic Fallback</p> <p>If you don't register custom callbacks, d-back automatically uses the <code>MockDataProvider</code> for development convenience.</p>"},{"location":"user-guide/custom-data-providers/#creating-a-custom-user-data-provider","title":"Creating a Custom User Data Provider","text":"<p>Let's build a custom user data provider step by step.</p>"},{"location":"user-guide/custom-data-providers/#step-1-define-the-function","title":"Step 1: Define the Function","text":"<pre><code>async def get_user_data(server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Fetch user data for a Discord server.\n\n    Args:\n        server_id: Discord server snowflake ID\n\n    Returns:\n        Dictionary mapping user IDs to user objects\n    \"\"\"\n    # Implementation here\n    pass\n</code></pre>"},{"location":"user-guide/custom-data-providers/#step-2-implement-data-fetching","title":"Step 2: Implement Data Fetching","text":"<pre><code>import aiohttp\nfrom typing import Dict, Any\n\nasync def get_user_data(server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Fetch real user data from Discord API.\"\"\"\n    try:\n        # In production, use environment variables for secrets\n        bot_token = os.getenv(\"DISCORD_BOT_TOKEN\")\n\n        async with aiohttp.ClientSession() as session:\n            headers = {\"Authorization\": f\"Bot {bot_token}\"}\n\n            # Fetch guild members\n            url = f\"https://discord.com/api/v10/guilds/{server_id}/members\"\n            params = {\"limit\": 1000}\n\n            async with session.get(url, headers=headers, params=params) as resp:\n                if resp.status != 200:\n                    print(f\"Error fetching members: {resp.status}\")\n                    return {}\n\n                members = await resp.json()\n\n                # Transform to d-back format\n                users = {}\n                for member in members:\n                    user = member[\"user\"]\n                    user_id = user[\"id\"]\n\n                    # Extract presence (requires gateway connection, simplified here)\n                    status = \"offline\"  # Default\n\n                    # Get role color\n                    role_color = get_highest_role_color(member.get(\"roles\", []))\n\n                    users[user_id] = {\n                        \"uid\": user_id,\n                        \"username\": user.get(\"nick\") or user[\"username\"],\n                        \"status\": status,\n                        \"roleColor\": role_color or \"#99AAB5\"  # Default gray\n                    }\n\n                return users\n\n    except Exception as e:\n        print(f\"Error in get_user_data: {e}\")\n        return {}\n\ndef get_highest_role_color(role_ids: list) -&gt; str:\n    \"\"\"Get color from highest role (simplified).\"\"\"\n    # In production, fetch role data from Discord API\n    # This is a placeholder\n    return \"#5865F2\"  # Discord blurple\n</code></pre>"},{"location":"user-guide/custom-data-providers/#step-3-register-the-callback","title":"Step 3: Register the Callback","text":"<pre><code>from d_back.server import WebSocketServer\n\nserver = WebSocketServer(port=3000, host=\"localhost\")\nserver.on_get_user_data(get_user_data)\n</code></pre>"},{"location":"user-guide/custom-data-providers/#creating-a-custom-server-data-provider","title":"Creating a Custom Server Data Provider","text":""},{"location":"user-guide/custom-data-providers/#basic-implementation","title":"Basic Implementation","text":"<pre><code>async def get_server_data() -&gt; Dict[str, Any]:\n    \"\"\"\n    Fetch available Discord servers.\n\n    Returns:\n        Dictionary mapping server IDs to server objects\n    \"\"\"\n    try:\n        bot_token = os.getenv(\"DISCORD_BOT_TOKEN\")\n\n        async with aiohttp.ClientSession() as session:\n            headers = {\"Authorization\": f\"Bot {bot_token}\"}\n            url = \"https://discord.com/api/v10/users/@me/guilds\"\n\n            async with session.get(url, headers=headers) as resp:\n                if resp.status != 200:\n                    return {}\n\n                guilds = await resp.json()\n\n                servers = {}\n                for guild in guilds:\n                    servers[guild[\"id\"]] = {\n                        \"id\": guild[\"id\"],\n                        \"name\": guild[\"name\"],\n                        \"passworded\": False,  # Configure per server\n                        \"default\": False\n                    }\n\n                # Set first server as default\n                if servers:\n                    first_id = next(iter(servers))\n                    servers[first_id][\"default\"] = True\n\n                return servers\n\n    except Exception as e:\n        print(f\"Error in get_server_data: {e}\")\n        return {}\n\nserver = WebSocketServer()\nserver.on_get_server_data(get_server_data)\n</code></pre>"},{"location":"user-guide/custom-data-providers/#discord-api-integration","title":"Discord API Integration","text":""},{"location":"user-guide/custom-data-providers/#complete-discord-bot-example","title":"Complete Discord Bot Example","text":"<p>Here's a production-ready example using discord.py:</p> <pre><code>import os\nimport asyncio\nimport discord\nfrom discord.ext import commands\nfrom d_back.server import WebSocketServer\n\n# Create Discord bot\nintents = discord.Intents.default()\nintents.presences = True\nintents.members = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n\n# Create WebSocket server\nws_server = WebSocketServer(port=3000, host=\"0.0.0.0\")\n\n# Data provider functions\nasync def get_discord_user_data(server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Fetch real-time user data from Discord bot.\"\"\"\n    try:\n        guild = bot.get_guild(int(server_id))\n        if not guild:\n            return {}\n\n        users = {}\n        for member in guild.members:\n            # Skip bots\n            if member.bot:\n                continue\n\n            # Get status\n            status_map = {\n                discord.Status.online: \"online\",\n                discord.Status.idle: \"idle\",\n                discord.Status.dnd: \"dnd\",\n                discord.Status.offline: \"offline\"\n            }\n            status = status_map.get(member.status, \"offline\")\n\n            # Get role color\n            role_color = \"#99AAB5\"  # Default gray\n            if member.roles:\n                # Get highest role with a color\n                for role in reversed(member.roles):\n                    if role.color.value != 0:\n                        role_color = f\"#{role.color.value:06x}\"\n                        break\n\n            users[str(member.id)] = {\n                \"uid\": str(member.id),\n                \"username\": member.display_name,\n                \"status\": status,\n                \"roleColor\": role_color\n            }\n\n        return users\n\n    except Exception as e:\n        print(f\"Error fetching user data: {e}\")\n        return {}\n\nasync def get_discord_servers() -&gt; Dict[str, Any]:\n    \"\"\"Fetch Discord guilds from bot.\"\"\"\n    try:\n        servers = {}\n        for guild in bot.guilds:\n            servers[str(guild.id)] = {\n                \"id\": str(guild.id),\n                \"name\": guild.name,\n                \"passworded\": False,\n                \"default\": False\n            }\n\n        # Set first server as default\n        if servers:\n            first_id = next(iter(servers))\n            servers[first_id][\"default\"] = True\n\n        return servers\n\n    except Exception as e:\n        print(f\"Error fetching servers: {e}\")\n        return {}\n\n# Register callbacks\nws_server.on_get_user_data(get_discord_user_data)\nws_server.on_get_server_data(get_discord_servers)\n\n# Discord bot events\n@bot.event\nasync def on_ready():\n    \"\"\"Start WebSocket server when bot is ready.\"\"\"\n    print(f\"Bot logged in as {bot.user}\")\n    print(f\"Starting WebSocket server...\")\n    await ws_server.start()\n\n@bot.event\nasync def on_presence_update(before, after):\n    \"\"\"Broadcast presence changes to d-zone.\"\"\"\n    if before.status != after.status:\n        status_map = {\n            discord.Status.online: \"online\",\n            discord.Status.idle: \"idle\",\n            discord.Status.dnd: \"dnd\",\n            discord.Status.offline: \"offline\"\n        }\n\n        await ws_server.broadcast_presence(\n            server=str(after.guild.id),\n            uid=str(after.id),\n            status=status_map.get(after.status, \"offline\"),\n            username=after.display_name,\n            role_color=get_role_color(after)\n        )\n\n@bot.event\nasync def on_message(message):\n    \"\"\"Broadcast messages to d-zone.\"\"\"\n    if message.author.bot:\n        return\n\n    await ws_server.broadcast_message(\n        server=str(message.guild.id),\n        uid=str(message.author.id),\n        message=message.content,\n        channel=str(message.channel.id)\n    )\n\ndef get_role_color(member) -&gt; str:\n    \"\"\"Extract role color from member.\"\"\"\n    if member.roles:\n        for role in reversed(member.roles):\n            if role.color.value != 0:\n                return f\"#{role.color.value:06x}\"\n    return \"#99AAB5\"\n\n# Main entry point\nasync def main():\n    \"\"\"Start both Discord bot and WebSocket server.\"\"\"\n    bot_token = os.getenv(\"DISCORD_BOT_TOKEN\")\n    if not bot_token:\n        raise ValueError(\"DISCORD_BOT_TOKEN environment variable not set\")\n\n    # Start bot (this will trigger on_ready which starts WS server)\n    await bot.start(bot_token)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Prerequisites</p> <p>Install discord.py: <code>pip install discord.py</code></p>"},{"location":"user-guide/custom-data-providers/#database-integration","title":"Database Integration","text":""},{"location":"user-guide/custom-data-providers/#using-asyncpg-with-postgresql","title":"Using asyncpg with PostgreSQL","text":"<pre><code>import asyncpg\nfrom typing import Dict, Any, Optional\n\nclass DatabaseProvider:\n    \"\"\"Database-backed data provider with caching.\"\"\"\n\n    def __init__(self, db_url: str):\n        self.db_url = db_url\n        self.pool: Optional[asyncpg.Pool] = None\n\n    async def connect(self):\n        \"\"\"Initialize database connection pool.\"\"\"\n        self.pool = await asyncpg.create_pool(self.db_url)\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Fetch user data from database.\"\"\"\n        if not self.pool:\n            return {}\n\n        try:\n            async with self.pool.acquire() as conn:\n                rows = await conn.fetch(\"\"\"\n                    SELECT user_id, username, status, role_color\n                    FROM discord_users\n                    WHERE server_id = $1 AND status != 'offline'\n                \"\"\", server_id)\n\n                users = {}\n                for row in rows:\n                    users[row[\"user_id\"]] = {\n                        \"uid\": row[\"user_id\"],\n                        \"username\": row[\"username\"],\n                        \"status\": row[\"status\"],\n                        \"roleColor\": row[\"role_color\"]\n                    }\n\n                return users\n\n        except Exception as e:\n            print(f\"Database error: {e}\")\n            return {}\n\n    async def get_server_data(self) -&gt; Dict[str, Any]:\n        \"\"\"Fetch server data from database.\"\"\"\n        if not self.pool:\n            return {}\n\n        try:\n            async with self.pool.acquire() as conn:\n                rows = await conn.fetch(\"\"\"\n                    SELECT server_id, name, passworded, is_default\n                    FROM discord_servers\n                    WHERE enabled = true\n                \"\"\")\n\n                servers = {}\n                for row in rows:\n                    servers[row[\"server_id\"]] = {\n                        \"id\": row[\"server_id\"],\n                        \"name\": row[\"name\"],\n                        \"passworded\": row[\"passworded\"],\n                        \"default\": row[\"is_default\"]\n                    }\n\n                return servers\n\n        except Exception as e:\n            print(f\"Database error: {e}\")\n            return {}\n\n# Usage\nasync def main():\n    # Initialize database provider\n    db = DatabaseProvider(\"postgresql://user:pass@localhost/d_back\")\n    await db.connect()\n\n    # Create server with database callbacks\n    server = WebSocketServer(port=3000, host=\"0.0.0.0\")\n    server.on_get_user_data(db.get_user_data)\n    server.on_get_server_data(db.get_server_data)\n\n    await server.start()\n</code></pre>"},{"location":"user-guide/custom-data-providers/#schema-example","title":"Schema Example","text":"<pre><code>CREATE TABLE discord_servers (\n    server_id VARCHAR(20) PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    passworded BOOLEAN DEFAULT FALSE,\n    is_default BOOLEAN DEFAULT FALSE,\n    enabled BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE discord_users (\n    user_id VARCHAR(20),\n    server_id VARCHAR(20) REFERENCES discord_servers(server_id),\n    username VARCHAR(100) NOT NULL,\n    status VARCHAR(10) NOT NULL,\n    role_color VARCHAR(7) NOT NULL,\n    last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, server_id)\n);\n\nCREATE INDEX idx_users_server_status ON discord_users(server_id, status);\n</code></pre>"},{"location":"user-guide/custom-data-providers/#hybrid-approach","title":"Hybrid Approach","text":"<p>Combine mock and real data for gradual migration:</p> <pre><code>async def hybrid_user_data(server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Use real data for some servers, mock for others.\"\"\"\n    # Real data for production servers\n    production_servers = [\"232769614004748288\", \"482241773318701056\"]\n\n    if server_id in production_servers:\n        # Fetch from Discord API\n        return await get_discord_user_data(server_id)\n    else:\n        # Fall back to mock data\n        from d_back.mock.data import MockDataProvider\n        provider = MockDataProvider(server)\n        return await provider.get_mock_user_data(server_id)\n\nserver = WebSocketServer()\nserver.on_get_user_data(hybrid_user_data)\n</code></pre>"},{"location":"user-guide/custom-data-providers/#fallback-with-error-recovery","title":"Fallback with Error Recovery","text":"<pre><code>async def resilient_user_data(server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Try real data, fall back to mock on error.\"\"\"\n    try:\n        # Try real data source\n        data = await get_discord_user_data(server_id)\n\n        # Validate data\n        if data and isinstance(data, dict) and len(data) &gt; 0:\n            return data\n\n        # Empty or invalid, use fallback\n        raise ValueError(\"No data returned\")\n\n    except Exception as e:\n        print(f\"Falling back to mock data: {e}\")\n\n        # Use mock data as fallback\n        from d_back.mock.data import MockDataProvider\n        provider = MockDataProvider(server)\n        return await provider.get_mock_user_data(server_id)\n\nserver = WebSocketServer()\nserver.on_get_user_data(resilient_user_data)\n</code></pre>"},{"location":"user-guide/custom-data-providers/#real-time-updates","title":"Real-Time Updates","text":""},{"location":"user-guide/custom-data-providers/#forwarding-discord-events","title":"Forwarding Discord Events","text":"<pre><code>import discord\nfrom discord.ext import commands\n\nbot = commands.Bot(command_prefix=\"!\", intents=discord.Intents.all())\nws_server = WebSocketServer(port=3000, host=\"0.0.0.0\")\n\n@bot.event\nasync def on_presence_update(before, after):\n    \"\"\"Forward presence changes to connected clients.\"\"\"\n    # Only broadcast if status actually changed\n    if before.status == after.status:\n        return\n\n    status_map = {\n        discord.Status.online: \"online\",\n        discord.Status.idle: \"idle\",\n        discord.Status.dnd: \"dnd\",\n        discord.Status.offline: \"offline\"\n    }\n\n    # Get role color\n    role_color = \"#99AAB5\"\n    for role in reversed(after.roles):\n        if role.color.value != 0:\n            role_color = f\"#{role.color.value:06x}\"\n            break\n\n    # Broadcast to all connected clients\n    await ws_server.broadcast_presence(\n        server=str(after.guild.id),\n        uid=str(after.id),\n        status=status_map.get(after.status, \"offline\"),\n        username=after.display_name,\n        role_color=role_color,\n        delete=(after.status == discord.Status.offline)\n    )\n\n@bot.event\nasync def on_member_join(member):\n    \"\"\"Broadcast when a user joins.\"\"\"\n    await ws_server.broadcast_presence(\n        server=str(member.guild.id),\n        uid=str(member.id),\n        status=\"online\",\n        username=member.display_name,\n        role_color=get_role_color(member)\n    )\n\n@bot.event\nasync def on_member_remove(member):\n    \"\"\"Broadcast when a user leaves.\"\"\"\n    await ws_server.broadcast_presence(\n        server=str(member.guild.id),\n        uid=str(member.id),\n        status=\"offline\",\n        delete=True\n    )\n</code></pre>"},{"location":"user-guide/custom-data-providers/#performance-considerations","title":"Performance Considerations","text":"<p>Rate Limiting</p> <p>Discord's API has rate limits. Implement caching and batch requests to avoid hitting limits.</p> <pre><code>import time\nfrom functools import wraps\n\ndef rate_limit(calls_per_second=5):\n    \"\"\"Rate limiting decorator.\"\"\"\n    min_interval = 1.0 / calls_per_second\n    last_called = [0.0]\n\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            elapsed = time.time() - last_called[0]\n            wait_time = min_interval - elapsed\n            if wait_time &gt; 0:\n                await asyncio.sleep(wait_time)\n\n            last_called[0] = time.time()\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@rate_limit(calls_per_second=2)\nasync def fetch_discord_data(server_id: str):\n    \"\"\"Rate-limited Discord API calls.\"\"\"\n    # Implementation\n    pass\n</code></pre>"},{"location":"user-guide/custom-data-providers/#testing-custom-providers","title":"Testing Custom Providers","text":""},{"location":"user-guide/custom-data-providers/#unit-testing","title":"Unit Testing","text":"<pre><code>import pytest\nfrom unittest.mock import AsyncMock, patch\n\n@pytest.mark.asyncio\nasync def test_user_data_provider():\n    \"\"\"Test user data provider returns correct format.\"\"\"\n    # Mock Discord API response\n    mock_response = [\n        {\n            \"user\": {\"id\": \"123\", \"username\": \"TestUser\"},\n            \"roles\": [],\n            \"nick\": None\n        }\n    ]\n\n    with patch(\"aiohttp.ClientSession.get\") as mock_get:\n        mock_get.return_value.__aenter__.return_value.status = 200\n        mock_get.return_value.__aenter__.return_value.json = AsyncMock(return_value=mock_response)\n\n        # Test provider\n        data = await get_user_data(\"232769614004748288\")\n\n        # Assertions\n        assert isinstance(data, dict)\n        assert \"123\" in data\n        assert data[\"123\"][\"username\"] == \"TestUser\"\n        assert data[\"123\"][\"status\"] in [\"online\", \"idle\", \"dnd\", \"offline\"]\n</code></pre>"},{"location":"user-guide/custom-data-providers/#integration-testing","title":"Integration Testing","text":"<pre><code>@pytest.mark.asyncio\nasync def test_server_with_custom_provider():\n    \"\"\"Test WebSocketServer with custom data provider.\"\"\"\n    server = WebSocketServer(port=3001, host=\"localhost\")\n    server.on_get_user_data(get_user_data)\n\n    # Start server\n    await server.start()\n\n    # Connect client and test\n    async with websockets.connect(\"ws://localhost:3001\") as websocket:\n        # Request user data\n        await websocket.send(json.dumps({\n            \"type\": \"get_user_data\",\n            \"serverId\": \"232769614004748288\"\n        }))\n\n        # Receive response\n        response = await websocket.recv()\n        data = json.loads(response)\n\n        # Validate\n        assert data[\"type\"] == \"user_data\"\n        assert \"users\" in data\n\n    # Cleanup\n    await server.stop()\n</code></pre>"},{"location":"user-guide/custom-data-providers/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/custom-data-providers/#caching-strategy","title":"Caching Strategy","text":"<pre><code>import time\nfrom typing import Dict, Any, Tuple\n\nclass CachedDataProvider:\n    \"\"\"Data provider with intelligent caching.\"\"\"\n\n    def __init__(self, cache_ttl: int = 60):\n        self.cache_ttl = cache_ttl\n        self._user_cache: Dict[str, Tuple[Dict[str, Any], float]] = {}\n        self._server_cache: Tuple[Dict[str, Any], float] = ({}, 0)\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Get user data with caching.\"\"\"\n        # Check cache\n        if server_id in self._user_cache:\n            data, cached_time = self._user_cache[server_id]\n            if time.time() - cached_time &lt; self.cache_ttl:\n                return data\n\n        # Cache miss - fetch fresh data\n        data = await self._fetch_user_data(server_id)\n        self._user_cache[server_id] = (data, time.time())\n        return data\n\n    async def get_server_data(self) -&gt; Dict[str, Any]:\n        \"\"\"Get server data with caching.\"\"\"\n        data, cached_time = self._server_cache\n\n        if time.time() - cached_time &lt; self.cache_ttl:\n            return data\n\n        # Cache miss\n        data = await self._fetch_server_data()\n        self._server_cache = (data, time.time())\n        return data\n\n    async def _fetch_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Actual data fetching logic.\"\"\"\n        # Implement Discord API call\n        pass\n\n    async def _fetch_server_data(self) -&gt; Dict[str, Any]:\n        \"\"\"Actual server fetching logic.\"\"\"\n        # Implement Discord API call\n        pass\n\n    def invalidate_cache(self, server_id: Optional[str] = None):\n        \"\"\"Manually invalidate cache.\"\"\"\n        if server_id:\n            self._user_cache.pop(server_id, None)\n        else:\n            self._user_cache.clear()\n            self._server_cache = ({}, 0)\n</code></pre>"},{"location":"user-guide/custom-data-providers/#connection-pooling","title":"Connection Pooling","text":"<pre><code>import aiohttp\n\nclass PooledProvider:\n    \"\"\"Provider with connection pooling.\"\"\"\n\n    def __init__(self):\n        self.session: Optional[aiohttp.ClientSession] = None\n\n    async def __aenter__(self):\n        \"\"\"Create session on context enter.\"\"\"\n        self.session = aiohttp.ClientSession()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Close session on context exit.\"\"\"\n        if self.session:\n            await self.session.close()\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        \"\"\"Fetch with persistent connection.\"\"\"\n        if not self.session:\n            self.session = aiohttp.ClientSession()\n\n        # Use existing session for requests\n        async with self.session.get(f\"https://api.example.com/users/{server_id}\") as resp:\n            return await resp.json()\n\n# Usage\nasync def main():\n    async with PooledProvider() as provider:\n        server = WebSocketServer()\n        server.on_get_user_data(provider.get_user_data)\n        await server.start()\n</code></pre>"},{"location":"user-guide/custom-data-providers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/custom-data-providers/#common-issues","title":"Common Issues","text":"<p>Data format mismatches: <pre><code># Always validate and transform data\ndef validate_user_data(data: Dict) -&gt; Dict:\n    \"\"\"Ensure user data has required fields.\"\"\"\n    required_fields = [\"uid\", \"username\", \"status\", \"roleColor\"]\n\n    for user_id, user_data in data.items():\n        for field in required_fields:\n            if field not in user_data:\n                # Provide default\n                if field == \"status\":\n                    user_data[field] = \"offline\"\n                elif field == \"roleColor\":\n                    user_data[field] = \"#99AAB5\"\n                elif field == \"uid\":\n                    user_data[field] = user_id\n                elif field == \"username\":\n                    user_data[field] = \"Unknown\"\n\n    return data\n</code></pre></p> <p>Async/await errors: <pre><code># \u274c Wrong: Not using await\ndata = get_user_data(server_id)  # Returns coroutine, not data\n\n# \u2705 Correct: Using await\ndata = await get_user_data(server_id)\n</code></pre></p> <p>Connection timeouts: <pre><code>async def get_user_data_with_timeout(server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Fetch with timeout.\"\"\"\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                f\"https://api.example.com/users/{server_id}\",\n                timeout=aiohttp.ClientTimeout(total=5)\n            ) as resp:\n                return await resp.json()\n    except asyncio.TimeoutError:\n        print(\"Request timed out\")\n        return {}\n</code></pre></p>"},{"location":"user-guide/custom-data-providers/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Enable verbose logging: <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></p> </li> <li> <p>Log all callback invocations: <pre><code>async def logged_callback(server_id: str):\n    print(f\"Callback invoked for server: {server_id}\")\n    data = await fetch_data(server_id)\n    print(f\"Returned {len(data)} users\")\n    return data\n</code></pre></p> </li> <li> <p>Validate data before returning: <pre><code>async def validated_callback(server_id: str):\n    data = await fetch_data(server_id)\n\n    # Log and validate\n    if not isinstance(data, dict):\n        print(f\"ERROR: Expected dict, got {type(data)}\")\n        return {}\n\n    for user_id, user_data in data.items():\n        if not all(k in user_data for k in [\"uid\", \"username\", \"status\", \"roleColor\"]):\n            print(f\"WARNING: User {user_id} missing required fields\")\n\n    return data\n</code></pre></p> </li> </ol>"},{"location":"user-guide/custom-data-providers/#whats-next","title":"What's Next?","text":"<p>You now have the knowledge to implement production-ready custom data providers. Continue learning:</p> <ul> <li>Callbacks &amp; Customization: Deep dive into all callback types</li> <li>API Reference: Complete API documentation</li> <li>Developer Guide: Contributing and architecture</li> </ul>"},{"location":"es/","title":"Documentaci\u00f3n de d-back","text":"<p>Servidor WebSocket para integraci\u00f3n de Discord con simulaci\u00f3n de vida ambiental d-zone</p> <p>Bienvenido a la documentaci\u00f3n oficial de d-back \u2013 el servicio backend inteligente que impulsa la m\u00e1gica simulaci\u00f3n de vida ambiental d-zone. d-back sirve como puente en tiempo real entre servidores de Discord y el hermoso frontend d-zone, creando una experiencia inmersiva donde cada usuario de Discord se convierte en parte de un ecosistema digital vivo y respirable.</p> <p>d-zone es una simulaci\u00f3n de vida ambiental donde la presencia y actividad de los usuarios en un servidor de Discord influyen sutilmente en un entorno digital vivo. \u00a1Piense en ello como un terrario digital que reacciona a la energ\u00eda de su comunidad! d-back proporciona datos de usuario en tiempo real a trav\u00e9s de conexiones WebSocket, haciendo posible esta integraci\u00f3n fluida.</p>"},{"location":"es/#enlaces-rapidos","title":"Enlaces R\u00e1pidos","text":"<ul> <li> <p> Primeros Pasos</p> <p>Instale y ejecute su primer servidor WebSocket en minutos</p> <p> Comenzar</p> </li> <li> <p> Gu\u00eda del Usuario</p> <p>Aprenda c\u00f3mo configurar y personalizar d-back para sus necesidades</p> <p> Gu\u00eda del Usuario</p> </li> <li> <p> Referencia de API</p> <p>Explore la documentaci\u00f3n completa de la API con ejemplos detallados</p> <p> Referencia de API</p> </li> <li> <p> Gu\u00eda del Desarrollador</p> <p>Contribuya al proyecto y extienda su funcionalidad</p> <p> Gu\u00eda del Desarrollador</p> </li> </ul>"},{"location":"es/#caracteristicas-clave","title":"Caracter\u00edsticas Clave","text":"<p>Servidor WebSocket</p> <p>Comunicaci\u00f3n bidireccional en tiempo real con el frontend d-zone, soportando m\u00faltiples conexiones concurrentes y difusi\u00f3n eficiente de mensajes.</p> <p>Simulaci\u00f3n de Actividad de Usuario</p> <p>Datos simulados sofisticados de usuarios de Discord con estados de presencia realistas (en l\u00ednea, inactivo, DND, desconectado) perfectos para desarrollo y pruebas.</p> <p>Soporte Multi-Servidor</p> <p>Maneje m\u00faltiples servidores de Discord simult\u00e1neamente, cada uno con sus propias listas de usuarios y configuraciones.</p> <p>OAuth2 Listo</p> <p>Soporte integrado para autenticaci\u00f3n OAuth2 de Discord, permitiendo validaci\u00f3n segura de usuarios y control de acceso al servidor.</p> <p>Servicio de Archivos Est\u00e1ticos</p> <p>Sirva activos del frontend directamente desde el backend (websockets 10.0+), simplificando el despliegue y el alojamiento.</p>"},{"location":"es/#ejemplo-rapido","title":"Ejemplo R\u00e1pido","text":"<p>Comience con d-back en solo unas pocas l\u00edneas de c\u00f3digo:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Optional: Set up custom callbacks\n    server.on_get_user_data(my_user_data_callback)\n    server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\n# Run the server\nasyncio.run(main())\n</code></pre> <p>O use la interfaz de l\u00ednea de comandos:</p> <pre><code># Start with default settings\npython -m d_back\n\n# Custom configuration\npython -m d_back --port 8080 --host 0.0.0.0 --static-dir ./my-frontend\n</code></pre>"},{"location":"es/#informacion-del-proyecto","title":"Informaci\u00f3n del Proyecto","text":"<p>Repositorio: NNTin/d-back en GitHub Paquete: d-back en PyPI Licencia: Licencia MIT Python: 3.8 o superior</p>"},{"location":"es/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>\u00bfListo para sumergirse? Aqu\u00ed est\u00e1 lo que debe explorar a continuaci\u00f3n:</p> <ol> <li>Primeros Pasos - Instale d-back y ejecute su primer servidor</li> <li>Capacidades de Datos Simulados - Aprenda sobre el sistema integral de datos simulados para pruebas sin acceso a la API de Discord</li> <li>Frontend d-zone - Explore el hermoso frontend que da vida a su comunidad de Discord</li> <li>Documentaci\u00f3n de API - Descubra todos los ganchos de callback y opciones de personalizaci\u00f3n</li> </ol> <p>Listo para Desarrollo</p> <p>d-back viene con servidores de Discord simulados preconfigurados y datos de usuario realistas, haci\u00e9ndolo perfecto para desarrollo, pruebas y prop\u00f3sitos de demostraci\u00f3n. \u00a1No se requieren claves de API de Discord para comenzar!</p> <p> Construido con \u2764\ufe0f para el ecosistema d-world </p>"},{"location":"es/api-reference/","title":"Referencia de API","text":"<p>Esta p\u00e1gina proporciona documentaci\u00f3n completa de la API para d-back, generada autom\u00e1ticamente a partir de los docstrings del c\u00f3digo fuente. Todas las clases y m\u00e9todos incluyen descripciones detalladas, par\u00e1metros, valores de retorno y ejemplos.</p>"},{"location":"es/api-reference/#introduccion","title":"Introducci\u00f3n","text":"<p>La API de d-back est\u00e1 organizada en dos componentes principales:</p> <ul> <li>WebSocketServer: La clase principal del servidor para manejar conexiones WebSocket, solicitudes HTTP y difusi\u00f3n de mensajes</li> <li>MockDataProvider: Proporciona datos simulados y tareas peri\u00f3dicas en segundo plano para desarrollo y pruebas</li> </ul> <p>Toda la documentaci\u00f3n de la API sigue docstrings de estilo Google con ejemplos completos. Para patrones de uso y gu\u00edas de integraci\u00f3n, consulte la Gu\u00eda del Usuario.</p>"},{"location":"es/api-reference/#websocketserver","title":"WebSocketServer","text":"<p>La clase principal del servidor para manejar conexiones WebSocket, solicitudes HTTP y difusi\u00f3n de mensajes. Esta es su interfaz principal para la funcionalidad de d-back.</p>"},{"location":"es/api-reference/#mockdataprovider","title":"MockDataProvider","text":"<p>Proporciona datos simulados y tareas peri\u00f3dicas en segundo plano para desarrollo y pruebas. Esta clase se usa autom\u00e1ticamente cuando no se registran callbacks personalizados.</p>"},{"location":"es/api-reference/#funciones-de-utilidad","title":"Funciones de Utilidad","text":"<p>Funciones auxiliares para interfaz de l\u00ednea de comandos y gesti\u00f3n de versiones.</p>"},{"location":"es/api-reference/#ejemplos-de-uso","title":"Ejemplos de Uso","text":"<p>Para ejemplos pr\u00e1cticos de uso de estas APIs, consulte:</p> <ul> <li>Primeros Pasos: Uso b\u00e1sico y primera conexi\u00f3n</li> <li>Configuraci\u00f3n: Configuraci\u00f3n y ajuste del servidor</li> <li>Callbacks y Personalizaci\u00f3n: Ejemplos de uso de callbacks</li> <li>Proveedores de Datos Personalizados: Patrones de implementaci\u00f3n de proveedores de datos</li> </ul>"},{"location":"es/api-reference/#sugerencias-de-tipos","title":"Sugerencias de Tipos","text":"<p>Todos los m\u00e9todos incluyen sugerencias de tipos completas para par\u00e1metros y valores de retorno. Al trabajar con callbacks, importe los tipos necesarios:</p> <pre><code>from typing import Dict, Any, Optional, Tuple, Callable, Awaitable\n</code></pre> <p>Para m\u00e1s informaci\u00f3n sobre sugerencias de tipos de Python, consulte la documentaci\u00f3n oficial de typing.</p>"},{"location":"es/developer-guide/","title":"Gu\u00eda del Desarrollador","text":"<p>\u00a1Bienvenido a la gu\u00eda del desarrollador de d-back! Esta gu\u00eda proporciona toda la informaci\u00f3n que necesita para contribuir al proyecto, comprender su arquitectura y seguir las mejores pr\u00e1cticas de desarrollo.</p>"},{"location":"es/developer-guide/#introduccion","title":"Introducci\u00f3n","text":"<p>d-back es un servidor WebSocket de c\u00f3digo abierto para integraci\u00f3n de Discord con simulaci\u00f3n de vida ambiental d-zone. Agradecemos contribuciones de la comunidad y esta gu\u00eda le ayudar\u00e1 a comenzar.</p>"},{"location":"es/developer-guide/#primeros-pasos-con-el-desarrollo","title":"Primeros Pasos con el Desarrollo","text":""},{"location":"es/developer-guide/#configuracion-del-entorno-de-desarrollo","title":"Configuraci\u00f3n del Entorno de Desarrollo","text":"<ol> <li> <p>Fork y clone el repositorio:    <pre><code>git clone https://github.com/YOUR_USERNAME/d-back.git\ncd d-back\n</code></pre></p> </li> <li> <p>Crear un entorno virtual:    <pre><code>python -m venv .venv\nsource .venv/bin/activate  # En Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Instalar dependencias de desarrollo:    <pre><code>pip install -e .[docs]\npip install pytest pytest-asyncio websockets\n</code></pre></p> </li> <li> <p>Verificar instalaci\u00f3n:    <pre><code>python -m d_back --version\n</code></pre></p> </li> </ol>"},{"location":"es/developer-guide/#arquitectura-del-proyecto","title":"Arquitectura del Proyecto","text":""},{"location":"es/developer-guide/#estructura-de-directorios","title":"Estructura de Directorios","text":"<pre><code>d-back/\n\u251c\u2500\u2500 d_back/               # C\u00f3digo fuente principal\n\u2502   \u251c\u2500\u2500 __init__.py       # Metadatos del paquete\n\u2502   \u251c\u2500\u2500 __main__.py       # Punto de entrada CLI\n\u2502   \u251c\u2500\u2500 server.py         # Clase WebSocketServer principal\n\u2502   \u2514\u2500\u2500 mock/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 data.py       # MockDataProvider\n\u251c\u2500\u2500 docs/                 # Documentaci\u00f3n MkDocs\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 getting-started.md\n\u2502   \u251c\u2500\u2500 user-guide/\n\u2502   \u2514\u2500\u2500 api-reference.md\n\u251c\u2500\u2500 tests/                # Pruebas pytest\n\u2502   \u251c\u2500\u2500 test_dis_connect.py\n\u2502   \u2514\u2500\u2500 helpers/\n\u2502       \u2514\u2500\u2500 mock_websocket_client.py\n\u251c\u2500\u2500 pyproject.toml        # Metadatos del proyecto\n\u251c\u2500\u2500 setup.cfg             # Configuraci\u00f3n de setuptools\n\u251c\u2500\u2500 mkdocs.yml            # Configuraci\u00f3n de MkDocs\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"es/developer-guide/#componentes-principales","title":"Componentes Principales","text":"<p>WebSocketServer (<code>d_back/server.py</code>): - Maneja conexiones WebSocket y solicitudes HTTP - Gestiona callbacks personalizables para recuperaci\u00f3n de datos - Proporciona m\u00e9todos de difusi\u00f3n para actualizaciones en tiempo real - Soporta servicio de archivos est\u00e1ticos</p> <p>MockDataProvider (<code>d_back/mock/data.py</code>): - Genera datos de usuario y servidor simulados realistas - Ejecuta tareas peri\u00f3dicas en segundo plano (cambios de presencia, mensajes) - Proporciona 4 servidores preconfigurados con datos variados - Usado autom\u00e1ticamente cuando no se registran callbacks personalizados</p> <p>M\u00f3dulo CLI (<code>d_back/__main__.py</code>): - Parsing de argumentos de l\u00ednea de comandos - Punto de entrada para ejecutar el servidor - Manejo de se\u00f1ales de apagado gracioso</p>"},{"location":"es/developer-guide/#pruebas","title":"Pruebas","text":""},{"location":"es/developer-guide/#estructura-de-pruebas","title":"Estructura de Pruebas","text":"<p>Las pruebas est\u00e1n organizadas en el directorio <code>tests/</code>:</p> <ul> <li><code>test_dis_connect.py</code>: Pruebas de conectividad WebSocket y flujo de mensajes</li> <li><code>helpers/mock_websocket_client.py</code>: Cliente WebSocket simulado para pruebas</li> </ul>"},{"location":"es/developer-guide/#ejecutar-pruebas","title":"Ejecutar Pruebas","text":"<p>Ejecutar todas las pruebas: <pre><code>pytest\n</code></pre></p> <p>Ejecutar pruebas espec\u00edficas: <pre><code>pytest tests/test_dis_connect.py\n</code></pre></p> <p>Con salida detallada: <pre><code>pytest -v\n</code></pre></p> <p>Con cobertura: <pre><code>pytest --cov=d_back\n</code></pre></p>"},{"location":"es/developer-guide/#escribir-pruebas","title":"Escribir Pruebas","text":"<p>Las pruebas usan <code>pytest</code> y <code>pytest-asyncio</code> para funcionalidad as\u00edncrona:</p> <pre><code>import pytest\nfrom d_back.server import WebSocketServer\n\n@pytest.mark.asyncio\nasync def test_server_startup():\n    \"\"\"Test server starts and stops correctly.\"\"\"\n    server = WebSocketServer(port=3001, host=\"localhost\")\n    await server.start()\n\n    # Test server is running\n    assert server.websocket is not None\n\n    # Clean shutdown\n    await server.stop()\n</code></pre>"},{"location":"es/developer-guide/#directrices-de-contribucion","title":"Directrices de Contribuci\u00f3n","text":""},{"location":"es/developer-guide/#flujo-de-trabajo-de-git","title":"Flujo de Trabajo de Git","text":"<ol> <li> <p>Crear una rama de caracter\u00edstica:    <pre><code>git checkout -b feature/mi-nueva-caracteristica\n</code></pre></p> </li> <li> <p>Hacer cambios y commit:    <pre><code>git add .\ngit commit -m \"Add: Mi nueva caracter\u00edstica\"\n</code></pre></p> </li> <li> <p>Push a tu fork:    <pre><code>git push origin feature/mi-nueva-caracteristica\n</code></pre></p> </li> <li> <p>Crear Pull Request en GitHub</p> </li> </ol>"},{"location":"es/developer-guide/#formato-de-mensaje-de-commit","title":"Formato de Mensaje de Commit","text":"<p>Use mensajes de commit claros y descriptivos:</p> <ul> <li><code>Add: Nueva caracter\u00edstica o funcionalidad</code></li> <li><code>Fix: Correcci\u00f3n de bug</code></li> <li><code>Update: Actualizaci\u00f3n de funcionalidad existente</code></li> <li><code>Docs: Cambios de documentaci\u00f3n</code></li> <li><code>Test: Agregar o actualizar pruebas</code></li> <li><code>Refactor: Refactorizaci\u00f3n de c\u00f3digo</code></li> </ul> <p>Ejemplos: <pre><code>Add: OAuth2 validation callback support\nFix: WebSocket connection timeout issue\nUpdate: Improve mock data generator performance\nDocs: Add custom data providers guide\n</code></pre></p>"},{"location":"es/developer-guide/#estilo-de-codigo","title":"Estilo de C\u00f3digo","text":"<ul> <li>Seguir PEP 8 para estilo de c\u00f3digo Python</li> <li>Usar type hints para par\u00e1metros de funci\u00f3n y valores de retorno</li> <li>Escribir docstrings estilo Google para todas las funciones p\u00fablicas</li> <li>Mantener l\u00edneas bajo 100 caracteres cuando sea posible</li> </ul> <p>Ejemplo de docstring: <pre><code>async def on_get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Retrieve user data for a Discord server.\n\n    Args:\n        server_id: Discord server ID (snowflake format)\n\n    Returns:\n        Dictionary mapping user IDs to user data objects\n\n    Example:\n        ```python\n        users = await server.on_get_user_data(\"232769614004748288\")\n        ```\n    \"\"\"\n    pass\n</code></pre></p>"},{"location":"es/developer-guide/#flujo-de-trabajo-de-desarrollo","title":"Flujo de Trabajo de Desarrollo","text":""},{"location":"es/developer-guide/#ciclo-de-desarrollo-local","title":"Ciclo de Desarrollo Local","text":"<ol> <li>Hacer cambios de c\u00f3digo</li> <li>Ejecutar pruebas: <code>pytest</code></li> <li>Actualizar documentaci\u00f3n si es necesario</li> <li>Probar localmente: <code>python -m d_back</code></li> <li>Commit y push cambios</li> </ol>"},{"location":"es/developer-guide/#construir-documentacion-localmente","title":"Construir Documentaci\u00f3n Localmente","text":"<pre><code># Install docs dependencies\npip install -e .[docs]\n\n# Serve docs with live reload\nmkdocs serve\n\n# Build docs\nmkdocs build\n</code></pre> <p>Acceder a docs en <code>http://127.0.0.1:8000/</code></p>"},{"location":"es/developer-guide/#traduccion-de-documentacion","title":"Traducci\u00f3n de Documentaci\u00f3n","text":""},{"location":"es/developer-guide/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>La documentaci\u00f3n de d-back est\u00e1 disponible en varios idiomas (English, Spanish, German). Usamos Crowdin para gestionar traducciones de forma colaborativa. El ingl\u00e9s es el idioma fuente: realice los cambios en los archivos en ingl\u00e9s primero. Las traducciones se sincronizan mediante Crowdin y GitHub Actions. El proyecto usa <code>mkdocs-static-i18n</code> con la estructura de sufijos (por ejemplo, <code>index.es.md</code>, <code>index.de.md</code>).</p>"},{"location":"es/developer-guide/#configuracion-del-proyecto-crowdin","title":"Configuraci\u00f3n del Proyecto Crowdin","text":"<ol> <li>Crear un proyecto en Crowdin: https://crowdin.com y seleccionar Markdown como tipo de archivo.</li> <li>Establecer English como idioma fuente y a\u00f1adir Spanish (<code>es</code>) y German (<code>de</code>) como idiomas objetivo.</li> <li>Instalar la aplicaci\u00f3n Crowdin GitHub en el repositorio o configurar Crowdin CLI con GitHub Actions. El archivo <code>crowdin.yml</code> en la ra\u00edz del repositorio define los patrones de archivos y opciones del parser.</li> </ol> <p>Secrets de GitHub necesarios (Repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions):</p> <ul> <li><code>CROWDIN_PROJECT_ID</code> \u2014 ID del proyecto Crowdin</li> <li><code>CROWDIN_PERSONAL_TOKEN</code> \u2014 Token de acceso personal de Crowdin</li> </ul>"},{"location":"es/developer-guide/#configuracion-de-secretos-de-github","title":"Configuraci\u00f3n de Secretos de GitHub","text":"<p>Cree los secretos necesarios para la integraci\u00f3n de Crowdin:</p> <ol> <li>Obtener Credenciales de Crowdin:</li> <li>Project ID: <ul> <li>Inicie sesi\u00f3n en Crowdin</li> <li>Navegue a su proyecto</li> <li>Vaya a Settings \u2192 API</li> <li>Copie el Project ID (valor num\u00e9rico)</li> </ul> </li> <li> <p>Personal Access Token:</p> <ul> <li>Vaya a Account Settings \u2192 API</li> <li>Haga clic en \"New Token\"</li> <li>Nombre: \"d-back GitHub Actions\"</li> <li>Scopes: Seleccione \"Projects\" (read/write)</li> <li>Haga clic en \"Create\"</li> <li>Copie el token inmediatamente (no se mostrar\u00e1 nuevamente)</li> </ul> </li> <li> <p>A\u00f1adir Secretos al Repositorio de GitHub:</p> </li> <li>Navegue a: Repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Haga clic en \"New repository secret\"</li> <li>A\u00f1ada <code>CROWDIN_PROJECT_ID</code>:<ul> <li>Name: <code>CROWDIN_PROJECT_ID</code></li> <li>Value: Su ID de proyecto de Crowdin (num\u00e9rico)</li> <li>Haga clic en \"Add secret\"</li> </ul> </li> <li> <p>A\u00f1ada <code>CROWDIN_PERSONAL_TOKEN</code>:</p> <ul> <li>Name: <code>CROWDIN_PERSONAL_TOKEN</code></li> <li>Value: Su token de acceso personal de Crowdin</li> <li>Haga clic en \"Add secret\"</li> </ul> </li> <li> <p>Verificar Secretos:</p> </li> <li>Los secretos deben aparecer en la lista de secretos del repositorio</li> <li>Los valores de los secretos est\u00e1n ocultos y no se pueden ver despu\u00e9s de la creaci\u00f3n</li> <li>Solo los administradores del repositorio pueden gestionar secretos</li> </ol> <p>Notas de Seguridad Importantes: - Nunca haga commit de tokens o IDs de proyecto al repositorio - Los tokens tienen acceso completo a su proyecto de Crowdin - mant\u00e9ngalos seguros - Rote los tokens peri\u00f3dicamente por seguridad - Use secretos de repositorio, no secretos de entorno (para acceso espec\u00edfico del repositorio)</p>"},{"location":"es/developer-guide/#flujo-de-trabajo-de-github-actions","title":"Flujo de Trabajo de GitHub Actions","text":"<p>Descripci\u00f3n General:</p> <p>La sincronizaci\u00f3n con Crowdin est\u00e1 automatizada mediante GitHub Actions. El workflow est\u00e1 definido en <code>.github/workflows/crowdin.yml</code> y maneja: - Subida de archivos fuente en ingl\u00e9s a Crowdin cuando se actualiza la documentaci\u00f3n - Descarga de traducciones y creaci\u00f3n de pull requests para revisi\u00f3n</p> <p>Activadores del Workflow:</p> <ol> <li>Subida Autom\u00e1tica (Push a main):</li> <li>Se activa cuando se hacen push de archivos de documentaci\u00f3n a la rama main</li> <li>Sube archivos fuente en ingl\u00e9s nuevos/modificados a Crowdin</li> <li>Los traductores son notificados del nuevo contenido a traducir</li> <li> <p>Se ejecuta autom\u00e1ticamente - no se necesita intervenci\u00f3n manual</p> </li> <li> <p>Descarga Manual (workflow_dispatch):</p> </li> <li>Se activa manualmente desde la interfaz de GitHub Actions</li> <li>Descarga traducciones completadas de Crowdin</li> <li>Crea un pull request con actualizaciones de traducci\u00f3n</li> <li>Permite revisi\u00f3n antes de fusionar las traducciones</li> </ol> <p>C\u00f3mo Funciona:</p> <ol> <li>Proceso de Subida de Fuentes:</li> <li>El desarrollador fusiona cambios de documentaci\u00f3n a la rama main</li> <li>GitHub Actions detecta cambios en archivos <code>docs/**/*.md</code></li> <li>El workflow sube archivos en ingl\u00e9s modificados a Crowdin</li> <li>Crowdin analiza los cambios y notifica a los traductores</li> <li> <p>Los traductores ven cadenas nuevas/modificadas en el editor de Crowdin</p> </li> <li> <p>Proceso de Descarga de Traducciones:</p> </li> <li>El mantenedor activa manualmente el workflow desde la interfaz de GitHub Actions</li> <li>El workflow descarga traducciones completadas de Crowdin</li> <li>Crea una nueva rama: <code>crowdin-translations</code></li> <li>Crea un pull request con t\u00edtulo: \"docs: update translations from Crowdin\"</li> <li>El PR incluye etiquetas: documentation, translations, crowdin</li> <li>El mantenedor revisa y fusiona el PR</li> </ol> <p>Probar el Workflow:</p> <ol> <li>Probar Subida de Fuentes:</li> <li>Haga un peque\u00f1o cambio a un archivo de documentaci\u00f3n en ingl\u00e9s (ej: a\u00f1ada una oraci\u00f3n a <code>docs/index.md</code>)</li> <li>Haga commit y push a la rama main</li> <li>Navegue a: Repository \u2192 Actions \u2192 Crowdin Sync workflow</li> <li>Verifique que el workflow se ejecute exitosamente</li> <li> <p>Revise el proyecto de Crowdin para confirmar que aparece el nuevo contenido</p> </li> <li> <p>Probar Descarga de Traducciones:</p> </li> <li>Aseg\u00farese de que algunas traducciones est\u00e9n completadas en Crowdin</li> <li>Navegue a: Repository \u2192 Actions \u2192 Crowdin Sync workflow</li> <li>Haga clic en el bot\u00f3n \"Run workflow\"</li> <li>Seleccione la rama \"main\"</li> <li>Haga clic en \"Run workflow\"</li> <li>Espere a que el workflow se complete</li> <li>Revise la pesta\u00f1a Pull Requests para un nuevo PR de Crowdin</li> <li>Revise el PR y fusi\u00f3nelo si las traducciones se ven correctas</li> </ol> <p>Monitorear el Workflow:</p> <ul> <li>Ver ejecuciones de workflow: Repository \u2192 Actions \u2192 Crowdin Sync</li> <li>Verificar estado de workflow: Ver el badge de estado (se puede a\u00f1adir al README)</li> <li>Logs de workflow: Haga clic en cualquier ejecuci\u00f3n de workflow para ver logs detallados</li> <li>Workflows fallidos: Los mensajes de error aparecen en los logs con informaci\u00f3n de troubleshooting</li> </ul> <p>Soluci\u00f3n de Problemas del Workflow:</p> <p>Problema: El workflow falla con \"Authentication failed\" - Soluci\u00f3n: Verifique que los secretos <code>CROWDIN_PROJECT_ID</code> y <code>CROWDIN_PERSONAL_TOKEN</code> est\u00e9n configurados correctamente - Soluci\u00f3n: Verifique que el token de acceso personal tenga el scope \"Projects\" habilitado - Soluci\u00f3n: Aseg\u00farese de que el token no haya expirado (los tokens no expiran por defecto, pero pueden ser revocados)</p> <p>Problema: El workflow se ejecuta pero no se suben archivos a Crowdin - Soluci\u00f3n: Verifique que los archivos modificados coincidan con los patrones en <code>crowdin.yml</code> (<code>/docs/**/*.md</code>) - Soluci\u00f3n: Verifique que los archivos no est\u00e9n en la lista de ignorados en <code>crowdin.yml</code> - Soluci\u00f3n: Revise los logs del workflow para mensajes de detecci\u00f3n de archivos</p> <p>Problema: No se crea el PR de traducci\u00f3n - Soluci\u00f3n: Aseg\u00farese de que el workflow fue activado mediante workflow_dispatch (activaci\u00f3n manual) - Soluci\u00f3n: Verifique que hay traducciones completadas en Crowdin para descargar - Soluci\u00f3n: Verifique que GitHub Actions tiene permisos de escritura para pull requests - Soluci\u00f3n: Revise los logs del workflow para errores de creaci\u00f3n de PR</p> <p>Problema: Se crea el PR pero faltan traducciones - Soluci\u00f3n: Verifique que las traducciones est\u00e9n marcadas como \"approved\" en Crowdin (si el workflow de aprobaci\u00f3n est\u00e1 habilitado) - Soluci\u00f3n: Verifique que los archivos de traducci\u00f3n coincidan con el patr\u00f3n en <code>crowdin.yml</code> - Soluci\u00f3n: Aseg\u00farese de que los traductores completaron traducciones para todos los idiomas (espa\u00f1ol y alem\u00e1n)</p> <p>Rama de Localizaci\u00f3n:</p> <p>El workflow crea una rama llamada <code>crowdin-translations</code> para actualizaciones de traducci\u00f3n: - Esta rama es creada/actualizada autom\u00e1ticamente por el workflow - Cada descarga de traducci\u00f3n sobrescribe esta rama con las \u00faltimas traducciones - La rama se usa como fuente para el pull request - Despu\u00e9s de fusionar el PR, la rama puede ser eliminada (GitHub ofrece esta opci\u00f3n) - El workflow recrear\u00e1 la rama en la pr\u00f3xima descarga de traducci\u00f3n</p> <p>Mejores Pr\u00e1cticas: - Ejecute descargas de traducci\u00f3n peri\u00f3dicamente (ej: semanalmente) para mantener las traducciones actualizadas - Revise los PRs de traducci\u00f3n cuidadosamente antes de fusionar - Pruebe la construcci\u00f3n de la documentaci\u00f3n localmente despu\u00e9s de fusionar traducciones - Coordine con los traductores sobre fechas l\u00edmite de traducci\u00f3n - Use el workflow de aprobaci\u00f3n de Crowdin para control de calidad (opcional)</p>"},{"location":"es/developer-guide/#flujo-de-trabajo-de-traduccion","title":"Flujo de Trabajo de Traducci\u00f3n","text":"<ol> <li>Edite los archivos fuente en ingl\u00e9s (por ejemplo: <code>docs/index.md</code>, <code>docs/getting-started.md</code>) y env\u00ede un pull request.</li> <li>Tras la fusi\u00f3n en <code>main</code>, Crowdin detectar\u00e1 cadenas nuevas o cambiadas y notificar\u00e1 a los traductores.</li> <li>Los traductores traducen el contenido en el editor de Crowdin. Crowdin preserva bloques de c\u00f3digo, c\u00f3digo en l\u00ednea y el formato Markdown.</li> <li>Las traducciones se sincronizan de nuevo al repositorio mediante la integraci\u00f3n Crowdin \u2194 GitHub o GitHub Actions. Crowdin abrir\u00e1 PRs con las actualizaciones de traducci\u00f3n para que los mantenedores las revisen y fusionen.</li> </ol>"},{"location":"es/developer-guide/#estructura-de-archivos","title":"Estructura de Archivos","text":"<ul> <li>Ingl\u00e9s (fuente): <code>docs/index.md</code>, <code>docs/getting-started.md</code>, <code>docs/user-guide/configuration.md</code></li> <li>Spanish: <code>docs/index.es.md</code>, <code>docs/getting-started.es.md</code>, <code>docs/user-guide/configuration.es.md</code></li> <li>German: <code>docs/index.de.md</code>, <code>docs/getting-started.de.md</code>, <code>docs/user-guide/configuration.de.md</code></li> </ul>"},{"location":"es/developer-guide/#que-se-traduce","title":"Qu\u00e9 se Traduce","text":"<p>Se debe traducir:</p> <ul> <li>Texto explicativo, t\u00edtulos y encabezados</li> <li>Mensajes y gu\u00edas dirigidas al usuario</li> <li>Descripciones relacionadas con ejemplos (no los bloques de c\u00f3digo)</li> </ul> <p>No se debe traducir:</p> <ul> <li>Bloques de c\u00f3digo e inline code</li> <li>Nombres de funciones y clases</li> <li>Rutas de archivo y URLs</li> <li>Claves y valores de configuraci\u00f3n</li> <li>Nombres de proyecto y t\u00e9rminos t\u00e9cnicos (por ejemplo: d-back, d-zone, WebSocket, OAuth2)</li> </ul>"},{"location":"es/developer-guide/#archivos-excluidos","title":"Archivos Excluidos","text":"<p>Los siguientes archivos est\u00e1n excluidos de la traducci\u00f3n en Crowdin:</p> <ul> <li><code>docs/VERCEL_SETUP.md</code></li> <li><code>docs/TESTING_I18N.md</code></li> <li><code>docs/.pages</code></li> <li>Archivos de la referencia de la API (generados por mkdocstrings)</li> </ul>"},{"location":"es/developer-guide/#probar-traducciones-localmente","title":"Probar Traducciones Localmente","text":"<pre><code># Install documentation dependencies\npip install -e .[docs]\n\n# Serve documentation locally with all languages\nmkdocs serve\n\n# Build documentation (generates site/ directory with all languages)\nmkdocs build\n</code></pre> <p>Ver vistas por idioma:</p> <ul> <li>English: <code>http://127.0.0.1:8000/</code></li> <li>Spanish: <code>http://127.0.0.1:8000/es/</code></li> <li>German: <code>http://127.0.0.1:8000/de/</code></li> </ul>"},{"location":"es/developer-guide/#mejores-practicas-de-traduccion","title":"Mejores Pr\u00e1cticas de Traducci\u00f3n","text":"<ul> <li>Use un tono formal (usted) en el contenido dirigido a usuarios.</li> <li>Mantenga t\u00e9rminos t\u00e9cnicos y nombres de proyecto en ingl\u00e9s.</li> <li>Preservar el formato Markdown, bloques de c\u00f3digo y c\u00f3digo en l\u00ednea.</li> <li>Probar localmente las traducciones antes de enviarlas.</li> </ul>"},{"location":"es/developer-guide/#agregar-nuevos-idiomas","title":"Agregar Nuevos Idiomas","text":"<p>Para a\u00f1adir un nuevo idioma:</p> <ol> <li>Actualice <code>mkdocs.yml</code> para incluir el nuevo idioma en la configuraci\u00f3n i18n.</li> <li>Actualice <code>crowdin.yml</code> con el nuevo <code>two_letters_code</code>.</li> <li>A\u00f1ada el idioma en la configuraci\u00f3n del proyecto Crowdin.</li> <li>Cree archivos de traducci\u00f3n iniciales siguiendo el patr\u00f3n de sufijos.</li> <li>Actualice esta secci\u00f3n con los detalles del nuevo idioma.</li> </ol>"},{"location":"es/developer-guide/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":"<p>Problemas comunes:</p> <ul> <li>Traducciones no aparecen en Crowdin: verifique que los patrones en <code>crowdin.yml</code> coincidan con los archivos comprometidos y que no est\u00e9n en <code>ignore</code>.</li> <li>Traducciones no sincronizan a GitHub: revise los logs de Actions y verifique los secrets <code>CROWDIN_PROJECT_ID</code> y <code>CROWDIN_PERSONAL_TOKEN</code>.</li> <li>Formato roto: revise las traducciones en el editor de Crowdin y compruebe que los bloques de c\u00f3digo est\u00e9n preservados.</li> </ul>"},{"location":"es/developer-guide/#recursos","title":"Recursos","text":"<ul> <li>Crowdin documentation: https://support.crowdin.com/</li> <li>mkdocs-static-i18n: https://github.com/ultrabug/mkdocs-static-i18n</li> <li>Material for MkDocs i18n: https://squidfunk.github.io/mkdocs-material/setup/changing-the-language/</li> </ul>"},{"location":"es/developer-guide/#depuracion","title":"Depuraci\u00f3n","text":""},{"location":"es/developer-guide/#registro-de-depuracion","title":"Registro de Depuraci\u00f3n","text":"<p>Agregar declaraciones de impresi\u00f3n o usar logging:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nlogger.debug(\"Starting WebSocket server...\")\n</code></pre>"},{"location":"es/developer-guide/#depurar-conexiones-websocket","title":"Depurar Conexiones WebSocket","text":"<p>Use la consola del navegador o herramientas WebSocket:</p> <pre><code>const ws = new WebSocket('ws://localhost:3000');\nws.onopen = () =&gt; console.log('Connected');\nws.onmessage = (event) =&gt; console.log('Received:', event.data);\nws.onerror = (error) =&gt; console.error('Error:', error);\n</code></pre>"},{"location":"es/developer-guide/#proceso-de-lanzamiento","title":"Proceso de Lanzamiento","text":"<p>Los lanzamientos son manejados por los mantenedores del proyecto:</p> <ol> <li>Actualizar n\u00famero de versi\u00f3n en <code>setup.cfg</code></li> <li>Actualizar CHANGELOG (si existe)</li> <li>Crear tag de git: <code>git tag v0.0.X</code></li> <li>Push tag: <code>git push origin v0.0.X</code></li> <li>GitHub Actions construye y publica autom\u00e1ticamente a PyPI</li> </ol>"},{"location":"es/developer-guide/#versionado-de-documentacion","title":"Versionado de Documentaci\u00f3n","text":"<p>d-back usa mike para el versionado de documentaci\u00f3n, que se integra perfectamente con Material for MkDocs para proporcionar un selector de versiones en la documentaci\u00f3n. La estrategia de versionado utiliza tres tipos de versiones:</p> <ul> <li>Versiones estables: Creadas desde tags de git (por ejemplo, 0.0.14, 0.1.0, 1.0.0)</li> <li>Prerelease 'latest': Rastrea la rama main (listo para producci\u00f3n pero a\u00fan sin etiquetar)</li> <li>Prerelease 'dev': Rastrea la rama develop (desarrollo/pruebas)</li> </ul> <p>El selector de versiones aparece en la barra de navegaci\u00f3n superior, permitiendo a los usuarios cambiar entre diferentes versiones de la documentaci\u00f3n.</p>"},{"location":"es/developer-guide/#estrategia-de-versionado","title":"Estrategia de Versionado","text":"<p>1. Versiones Estables (desde tags)</p> <p>Creadas cuando se etiqueta una nueva versi\u00f3n:</p> <ul> <li>El n\u00famero de versi\u00f3n coincide con el tag de git sin el prefijo 'v'</li> <li>Estas versiones son permanentes e inmutables</li> <li>Ejemplo: El tag v0.0.15 crea la versi\u00f3n de documentaci\u00f3n 0.0.15</li> <li>Comando: <code>mike deploy 0.0.15 --push</code></li> </ul> <p>2. Prerelease Latest (rama main)</p> <p>Representa el estado actual de la rama main:</p> <ul> <li>Alias: 'latest'</li> <li>Actualizado en cada push a main</li> <li>Esta es la versi\u00f3n predeterminada que ven los usuarios</li> <li>Comando: <code>mike deploy &lt;commit-sha&gt; latest --push --update-aliases</code></li> </ul> <p>3. Prerelease Dev (rama develop)</p> <p>Representa el estado actual de la rama develop:</p> <ul> <li>Alias: 'dev'</li> <li>Actualizado en cada push a develop</li> <li>Usado para probar cambios de documentaci\u00f3n antes del lanzamiento</li> <li>Comando: <code>mike deploy &lt;commit-sha&gt; dev --push --update-aliases</code></li> </ul>"},{"location":"es/developer-guide/#pruebas-locales","title":"Pruebas Locales","text":"<p>Pruebe mike localmente antes de desplegar:</p> <pre><code># Instalar dependencias de documentaci\u00f3n (incluye mike)\npip install -e .[docs]\n\n# Desplegar una versi\u00f3n de prueba localmente (no hace push al remoto)\nmike deploy 0.0.14-test\n\n# Desplegar con un alias\nmike deploy 0.0.15-test latest --update-aliases\n\n# Establecer la versi\u00f3n predeterminada (lo que los usuarios ven al visitar los docs)\nmike set-default latest\n\n# Listar todas las versiones desplegadas\nmike list\n\n# Servir la documentaci\u00f3n versionada localmente\nmike serve\n# Visite http://localhost:8000 para probar\n# Use el selector de versiones en la navegaci\u00f3n superior para cambiar entre versiones\n\n# Eliminar una versi\u00f3n de prueba\nmike delete 0.0.14-test\n</code></pre> <p>Notas importantes para pruebas locales:</p> <ul> <li>Mike crea una rama <code>gh-pages</code> localmente para almacenar la documentaci\u00f3n versionada</li> <li>Use nombres de versi\u00f3n de prueba (por ejemplo, 0.0.14-test) para evitar conflictos con versiones de producci\u00f3n</li> <li>La bandera <code>--push</code> se omite durante las pruebas locales para prevenir despliegues accidentales</li> <li>Siempre pruebe la funcionalidad del selector de versiones antes de desplegar</li> <li>Verifique que los tres idiomas (English, Spanish, German) funcionen correctamente en cada versi\u00f3n</li> </ul>"},{"location":"es/developer-guide/#alias-de-versiones","title":"Alias de Versiones","text":"<p>Los alias son nombres simb\u00f3licos que apuntan a versiones espec\u00edficas:</p> <ul> <li>Alias comunes: 'latest' (rama main), 'dev' (rama develop), 'stable' (\u00faltima versi\u00f3n estable)</li> <li>Los alias pueden actualizarse para apuntar a diferentes versiones</li> <li>Ejemplo: Despu\u00e9s de lanzar 0.1.0, actualice el alias 'stable': <code>mike deploy 0.1.0 stable --update-aliases</code></li> <li>La bandera <code>--update-aliases</code> actualiza alias existentes en lugar de crear duplicados</li> </ul>"},{"location":"es/developer-guide/#flujo-de-trabajo-de-despliegue","title":"Flujo de Trabajo de Despliegue","text":"<p>Proceso de despliegue manual (para pruebas locales o cuando sea necesario):</p> <p>Para lanzamientos estables: <pre><code># Despu\u00e9s de crear un tag de git (por ejemplo, v0.0.15)\nmike deploy 0.0.15 stable --push --update-aliases\nmike set-default stable --push\n</code></pre></p> <p>Para actualizaciones de la rama main: <pre><code># Despu\u00e9s de fusionar a main\nmike deploy &lt;commit-sha&gt; latest --push --update-aliases\n</code></pre></p> <p>Para actualizaciones de la rama develop: <pre><code># Despu\u00e9s de fusionar a develop\nmike deploy &lt;commit-sha&gt; dev --push --update-aliases\n</code></pre></p> <p>Nota: Estos comandos son para despliegue manual. El despliegue automatizado mediante GitHub Actions es el enfoque recomendado para producci\u00f3n (vea \"Despliegue Automatizado con GitHub Actions\" m\u00e1s abajo).</p>"},{"location":"es/developer-guide/#despliegue-automatizado-con-github-actions","title":"Despliegue Automatizado con GitHub Actions","text":"<p>El despliegue de la documentaci\u00f3n est\u00e1 automatizado mediante GitHub Actions. El workflow est\u00e1 definido en <code>.github/workflows/docs.yml</code> y maneja todos los despliegues de producci\u00f3n.</p> <p>Descripci\u00f3n General:</p> <ul> <li>La documentaci\u00f3n se despliega autom\u00e1ticamente en pushes a main, develop y creaci\u00f3n de tags</li> <li>El workflow gestiona el versionado con mike y despliega a GitHub Pages</li> <li>El despliegue manual usando mike localmente sigue disponible para pruebas</li> <li>Los tres idiomas (ingl\u00e9s, espa\u00f1ol, alem\u00e1n) se construyen y despliegan juntos</li> </ul> <p>Activadores Autom\u00e1ticos:</p> <ol> <li>Creaci\u00f3n de tag (v*): Crea una versi\u00f3n estable</li> <li>Ejemplo: Tag <code>v0.0.15</code> despliega versi\u00f3n <code>0.0.15</code> con alias <code>stable</code></li> <li>Las versiones estables son permanentes e inmutables</li> <li>Se establece como la versi\u00f3n predeterminada que ven los usuarios</li> <li>Comando ejecutado: <code>mike deploy 0.0.15 stable --push --update-aliases</code></li> <li> <p>Comando ejecutado: <code>mike set-default stable --push</code></p> </li> <li> <p>Push a main: Despliega prerelease 'latest'</p> </li> <li>Representa el estado actual listo para producci\u00f3n</li> <li>No se establece como predeterminado (los lanzamientos estables permanecen como predeterminados)</li> <li>Usa el identificador de versi\u00f3n estable 'edge'</li> <li> <p>Comando ejecutado: <code>mike deploy edge latest --push --update-aliases</code></p> </li> <li> <p>Push a develop: Despliega prerelease 'dev'</p> </li> <li>Representa el estado actual de desarrollo</li> <li>Se usa para probar cambios de documentaci\u00f3n antes del lanzamiento</li> <li>No se establece como predeterminado (dev es solo para pruebas)</li> <li>Usa el identificador de versi\u00f3n estable 'development'</li> <li> <p>Comando ejecutado: <code>mike deploy development dev --push --update-aliases</code></p> </li> <li> <p>Activaci\u00f3n manual: Disponible mediante <code>workflow_dispatch</code> en la interfaz de GitHub Actions</p> </li> <li>\u00datil para pruebas o re-despliegue de documentaci\u00f3n</li> <li>Acceso mediante: Repositorio \u2192 pesta\u00f1a Actions \u2192 workflow Documentation \u2192 Run workflow</li> </ol> <p>Proceso del Workflow:</p> <ol> <li>Checkout repository: Obtiene el historial completo de git (requerido para que mike acceda a la rama gh-pages)</li> <li>Set up Python 3.11: Instala Python con cach\u00e9 de pip para construcciones m\u00e1s r\u00e1pidas</li> <li>Install dependencies: Ejecuta <code>pip install -e .[docs]</code> para instalar mkdocs-material, mkdocs-static-i18n, mkdocstrings y mike desde setup.cfg</li> <li>Configure git: Configura el usuario de git para commits automatizados a la rama gh-pages</li> <li>Determine version: Analiza el tipo de activador (tag, main o develop) para decidir la estrategia de despliegue</li> <li>Deploy with mike: Ejecuta el comando mike apropiado para desplegar documentaci\u00f3n versionada a la rama gh-pages</li> <li>GitHub Pages sirve documentaci\u00f3n actualizada: Los cambios aparecen en 1-2 minutos en https://nntin.github.io/d-back/</li> </ol> <p>Estrategia de Versiones:</p> <ul> <li>Versiones estables (desde tags): Permanentes, inmutables, representan lanzamientos oficiales; siempre se establecen como predeterminadas</li> <li>Alias 'latest': Actualizado en cada push a la rama main; disponible en el selector de versi\u00f3n pero no se establece como predeterminado</li> <li>Alias 'dev': Actualizado en cada push a la rama develop, solo para pruebas (nunca se establece como predeterminado)</li> <li>El selector de versi\u00f3n en la navegaci\u00f3n de la documentaci\u00f3n muestra todas las versiones disponibles</li> </ul> <p>Monitoreo de Despliegues:</p> <ul> <li>Ver ejecuciones de workflow: Repositorio \u2192 pesta\u00f1a Actions \u2192 workflow Documentation</li> <li>Verificar estado de despliegue: Ver el badge Documentation Status en README.md</li> <li>Logs de workflow: Informaci\u00f3n detallada de despliegue disponible en cada ejecuci\u00f3n de workflow</li> <li>Despliegues fallidos: Los mensajes de error aparecen en los logs de workflow con informaci\u00f3n para soluci\u00f3n de problemas</li> </ul> <p>Configuraci\u00f3n de GitHub Pages:</p> <p>Configuraci\u00f3n inicial (solo se necesita una vez):</p> <ol> <li>Ir a: Repository Settings \u2192 Pages</li> <li>Establecer Source: Deploy from a branch</li> <li>Establecer Branch: <code>gh-pages</code> (creado autom\u00e1ticamente por la primera ejecuci\u00f3n del workflow)</li> <li>Hacer clic en Save</li> <li>La documentaci\u00f3n estar\u00e1 disponible en: https://nntin.github.io/d-back/</li> <li>Los cambios aparecen en 1-2 minutos despu\u00e9s de completarse el workflow</li> </ol> <p>Despliegue Manual (si es necesario):</p> <p>El workflow automatizado maneja la mayor\u00eda de escenarios de despliegue. El despliegue manual puede ser necesario para:</p> <ul> <li>Probar cambios de documentaci\u00f3n localmente antes de hacer push</li> <li>Solucionar problemas de despliegue que requieran troubleshooting local</li> <li>Desplegar desde una rama local para prop\u00f3sitos de prueba</li> </ul> <p>Use los comandos mike documentados en la subsecci\u00f3n \"Flujo de Trabajo de Despliegue\" arriba para despliegue manual.</p> <p>Soluci\u00f3n de Problemas del Workflow:</p> <p>Problema: El workflow falla en git push a gh-pages - Soluci\u00f3n: Verifique que Actions tenga permisos de escritura   - Ir a: Settings \u2192 Actions \u2192 General \u2192 Workflow permissions   - Seleccionar: \"Read and write permissions\"   - Hacer clic en Save</p> <p>Problema: La versi\u00f3n desplegada no aparece en el selector de versi\u00f3n - Soluci\u00f3n: Verifique que la condici\u00f3n del activador coincidi\u00f3 con la rama o tag esperado - Soluci\u00f3n: Revise los logs de workflow para confirmar que el despliegue se complet\u00f3 exitosamente - Soluci\u00f3n: Aseg\u00farese de que al menos dos versiones est\u00e9n desplegadas para que aparezca el selector</p> <p>Problema: Contenido antiguo aparece en versi\u00f3n reci\u00e9n desplegada - Soluci\u00f3n: Limpie la cach\u00e9 del navegador y recargue - Soluci\u00f3n: Verifique que el workflow se complet\u00f3 exitosamente en la pesta\u00f1a Actions - Soluci\u00f3n: Verifique que se despleg\u00f3 la versi\u00f3n correcta revisando los logs de workflow</p> <p>Problema: La rama gh-pages no se cre\u00f3 - Soluci\u00f3n: Revise los logs de workflow para errores durante el primer despliegue - Soluci\u00f3n: Verifique que Actions tenga permisos de escritura (vea el primer problema arriba) - Soluci\u00f3n: Active manualmente el workflow mediante workflow_dispatch para reintentar</p>"},{"location":"es/developer-guide/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ul> <li>Siempre pruebe localmente con <code>mike serve</code> antes de desplegar</li> <li>Use versionado sem\u00e1ntico para lanzamientos estables (MAJOR.MINOR.PATCH)</li> <li>Mantenga 'latest' como la versi\u00f3n predeterminada para los usuarios</li> <li>Documente cambios importantes en notas de lanzamiento espec\u00edficas de versi\u00f3n</li> <li>Mantenga al menos las \u00faltimas 3 versiones estables como referencia</li> <li>Elimine versiones muy antiguas para mantener la lista de versiones manejable: <code>mike delete 0.0.1 --push</code></li> <li>Verifique que el soporte multiling\u00fce funcione en todas las versiones desplegadas</li> </ul>"},{"location":"es/developer-guide/#solucion-de-problemas_1","title":"Soluci\u00f3n de Problemas","text":"<p>Problema: El selector de versiones no aparece - Soluci\u00f3n: Verifique que <code>extra.version.provider: mike</code> est\u00e9 configurado en mkdocs.yml (ya configurado en l\u00ednea 137) - Soluci\u00f3n: Aseg\u00farese de que al menos dos versiones est\u00e9n desplegadas - Soluci\u00f3n: Verifique que el tema Material est\u00e9 configurado correctamente</p> <p>Problema: Las versiones no se despliegan - Soluci\u00f3n: Aseg\u00farese de que mike est\u00e9 instalado: <code>pip install -e .[docs]</code> - Soluci\u00f3n: Verifique que la rama gh-pages exista - Soluci\u00f3n: Verifique que el remoto de git est\u00e9 configurado correctamente</p> <p>Problema: Conflictos entre selector de idioma y selector de versi\u00f3n - Soluci\u00f3n: Ambos selectores deber\u00edan funcionar juntos; verifique la configuraci\u00f3n de mkdocs-static-i18n - Soluci\u00f3n: Pruebe con <code>mike serve</code> para asegurar que ambos selectores aparezcan</p> <p>Problema: Contenido antiguo aparece en nueva versi\u00f3n - Soluci\u00f3n: Use <code>mike deploy --update-aliases</code> para actualizar alias - Soluci\u00f3n: Limpie la cach\u00e9 del navegador - Soluci\u00f3n: Reconstruya con <code>mkdocs build --clean</code> antes de desplegar</p>"},{"location":"es/developer-guide/#recursos_1","title":"Recursos","text":"<ul> <li>Mike documentation: https://github.com/jimporter/mike</li> <li>Material for MkDocs versioning: https://squidfunk.github.io/mkdocs-material/setup/setting-up-versioning/</li> <li>Semantic Versioning: https://semver.org/</li> </ul> <p>Nota: El despliegue de la documentaci\u00f3n est\u00e1 completamente automatizado mediante GitHub Actions. Vea la secci\u00f3n \"Despliegue Automatizado con GitHub Actions\" arriba para detalles sobre c\u00f3mo el workflow despliega la documentaci\u00f3n en pushes a ramas y creaci\u00f3n de tags.</p>"},{"location":"es/developer-guide/#mejoras-futuras","title":"Mejoras Futuras","text":"<p>\u00c1reas donde agradecemos contribuciones:</p> <ul> <li>Soporte Redis: Cacheo y pub/sub distribuido</li> <li>M\u00e9tricas y Monitoreo: Prometheus/Grafana integration</li> <li>Autenticaci\u00f3n mejorada: M\u00e1s proveedores OAuth2</li> <li>Gesti\u00f3n de sesiones: Persistencia y renovaci\u00f3n de sesiones</li> <li>Pruebas de carga: Pruebas de rendimiento y benchmark</li> <li>Internacionalizaci\u00f3n: Mensajes de error multilenguaje</li> </ul>"},{"location":"es/developer-guide/#obtener-ayuda","title":"Obtener Ayuda","text":"<p>\u00bfNecesita ayuda con desarrollo?</p> <ul> <li>GitHub Issues: Reportar bugs o solicitar caracter\u00edsticas</li> <li>GitHub Discussions: Hacer preguntas o discutir ideas</li> <li>Documentaci\u00f3n: Revisar User Guide y API Reference</li> <li>C\u00f3digo fuente: Leer el c\u00f3digo en GitHub</li> </ul>"},{"location":"es/developer-guide/#licencia","title":"Licencia","text":"<p>d-back est\u00e1 licenciado bajo la Licencia MIT. Consulte el archivo LICENSE para detalles.</p>"},{"location":"es/developer-guide/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<ul> <li>Gu\u00eda del Usuario: Aprender c\u00f3mo usar d-back</li> <li>Referencia de API: Documentaci\u00f3n detallada de la API</li> <li>Primeros Pasos: Instalar y ejecutar d-back</li> </ul>"},{"location":"es/getting-started/","title":"Primeros Pasos","text":"<p>\u00a1Bienvenido a d-back! Esta gu\u00eda le ayudar\u00e1 a ponerse en marcha con el servidor WebSocket que impulsa la simulaci\u00f3n de vida ambiental d-zone. Al final de esta gu\u00eda, tendr\u00e1 d-back instalado y sirviendo datos simulados de Discord a trav\u00e9s de conexiones WebSocket.</p>"},{"location":"es/getting-started/#requisitos-previos","title":"Requisitos Previos","text":"<p>Antes de comenzar, aseg\u00farese de tener lo siguiente:</p> <ul> <li>Python 3.8 o superior instalado en su sistema</li> <li>Gestor de paquetes pip (generalmente viene con Python)</li> <li>Comprensi\u00f3n b\u00e1sica de async/await en Python (\u00fatil pero no requerido)</li> <li>Git (opcional, solo necesario si instala desde el c\u00f3digo fuente)</li> </ul>"},{"location":"es/getting-started/#instalacion","title":"Instalaci\u00f3n","text":"<p>d-back puede instalarse de varias maneras. Elija el m\u00e9todo que mejor se ajuste a sus necesidades:</p>"},{"location":"es/getting-started/#desde-pypi-recomendado","title":"Desde PyPI (Recomendado)","text":"<p>La forma m\u00e1s f\u00e1cil de instalar d-back es desde el \u00cdndice de Paquetes de Python:</p> <pre><code>pip install d-back\n</code></pre>"},{"location":"es/getting-started/#desde-el-codigo-fuente","title":"Desde el C\u00f3digo Fuente","text":"<p>Para la versi\u00f3n de desarrollo m\u00e1s reciente o si desea contribuir:</p> <ol> <li> <p>Clone el repositorio:    <pre><code>git clone https://github.com/NNTin/d-back.git\ncd d-back\n</code></pre></p> </li> <li> <p>Cree un entorno virtual (recomendado):</p> </li> </ol> <p>=== \"Windows\"        <pre><code>python -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> <p>=== \"macOS/Linux\"        <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre></p> <ol> <li>Instale en modo desarrollo:    <pre><code>pip install -e .\n</code></pre></li> </ol>"},{"location":"es/getting-started/#con-dependencias-de-documentacion","title":"Con Dependencias de Documentaci\u00f3n","text":"<p>Si planea construir la documentaci\u00f3n localmente:</p> <pre><code>pip install d-back[docs]\n</code></pre> <p>O desde el c\u00f3digo fuente:</p> <pre><code>pip install -e .[docs]\n</code></pre>"},{"location":"es/getting-started/#verificar-instalacion","title":"Verificar Instalaci\u00f3n","text":"<p>Despu\u00e9s de la instalaci\u00f3n, verifique que d-back est\u00e9 correctamente instalado:</p> <pre><code>d_back --version\n</code></pre> <p>Deber\u00eda ver una salida similar a:</p> <pre><code>d-back version 0.0.14\n</code></pre> <p>Soluci\u00f3n de Problemas</p> <p>Si el comando <code>d_back</code> no se encuentra, aseg\u00farese de que su directorio de scripts de Python est\u00e9 en su PATH. Alternativamente, puede ejecutar d-back como un m\u00f3dulo de Python: <code>python -m d_back --version</code></p>"},{"location":"es/getting-started/#inicio-rapido","title":"Inicio R\u00e1pido","text":"<p>\u00a1Ahora que d-back est\u00e1 instalado, pong\u00e1moslo en marcha!</p>"},{"location":"es/getting-started/#enfoque-de-linea-de-comandos","title":"Enfoque de L\u00ednea de Comandos","text":"<p>La forma m\u00e1s simple de iniciar el servidor es con la configuraci\u00f3n predeterminada:</p> <pre><code># Start with defaults (localhost:3000)\nd_back\n</code></pre> <p>O ejec\u00fatelo como un m\u00f3dulo de Python:</p> <pre><code>python -m d_back\n</code></pre> <p>Deber\u00eda ver una salida de consola similar a:</p> <pre><code>WebSocket server started on ws://localhost:3000\nServing static files from: /path/to/d_back/dist\nPress Ctrl+C to stop the server\n</code></pre> <p>Configuraci\u00f3n Predeterminada</p> <p>Por defecto, d-back se ejecuta en <code>localhost:3000</code> y sirve el frontend d-zone integrado desde archivos est\u00e1ticos.</p>"},{"location":"es/getting-started/#enfoque-programatico","title":"Enfoque Program\u00e1tico","text":"<p>Para m\u00e1s control, puede usar d-back en su c\u00f3digo Python:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Optional: Set up custom callbacks\n    # server.on_get_user_data(my_user_data_callback)\n    # server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\n# Run the server\nasyncio.run(main())\n</code></pre> <p>Cada paso explicado: 1. Importar m\u00f3dulos: Importe asyncio para ejecuci\u00f3n as\u00edncrona y la clase WebSocketServer 2. Crear servidor: Instancie WebSocketServer con el puerto y host deseados 3. Configurar callbacks (opcional): Personalice fuentes de datos con funciones callback 4. Iniciar servidor: Llame <code>await server.start()</code> para comenzar a aceptar conexiones</p>"},{"location":"es/getting-started/#su-primera-conexion-websocket","title":"Su Primera Conexi\u00f3n WebSocket","text":"<p>Una vez que el servidor est\u00e9 ejecut\u00e1ndose, puede probar la conexi\u00f3n WebSocket desde un cliente.</p>"},{"location":"es/getting-started/#usando-javascriptnavegador","title":"Usando JavaScript/Navegador","text":"<p>Abra la consola de su navegador y ejecute:</p> <pre><code>// Connect to d-back\nconst socket = new WebSocket('ws://localhost:3000');\n\nsocket.onopen = () =&gt; {\n    console.log('Connected to d-back!');\n    // Request user data for a mock server\n    socket.send(JSON.stringify({\n        type: 'get_user_data',\n        serverId: '232769614004748288'\n    }));\n};\n\nsocket.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Received:', data);\n};\n</code></pre> <p>Formato del Mensaje: La solicitud <code>get_user_data</code> incluye: - <code>type</code>: Tipo de mensaje (<code>\"get_user_data\"</code>) - <code>serverId</code>: ID del servidor de Discord (formato snowflake)</p> <p>Respuesta Esperada: Recibir\u00e1 un objeto JSON que contiene datos de usuario: <pre><code>{\n  \"type\": \"user_data\",\n  \"serverId\": \"232769614004748288\",\n  \"users\": {\n    \"user123\": {\n      \"uid\": \"user123\",\n      \"username\": \"ExampleUser\",\n      \"status\": \"online\",\n      \"roleColor\": \"#ff6b6b\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"es/getting-started/#usando-la-biblioteca-websockets-de-python","title":"Usando la Biblioteca websockets de Python","text":"<p>Tambi\u00e9n puede conectarse usando la biblioteca <code>websockets</code> de Python:</p> <pre><code>import asyncio\nimport json\nimport websockets\n\nasync def test_connection():\n    uri = \"ws://localhost:3000\"\n    async with websockets.connect(uri) as websocket:\n        print(\"Connected to d-back!\")\n\n        # Request user data\n        request = {\n            \"type\": \"get_user_data\",\n            \"serverId\": \"232769614004748288\"\n        }\n        await websocket.send(json.dumps(request))\n\n        # Receive response\n        response = await websocket.recv()\n        data = json.loads(response)\n        print(\"Received:\", data)\n\nasyncio.run(test_connection())\n</code></pre>"},{"location":"es/getting-started/#comportamiento-esperado","title":"Comportamiento Esperado","text":"<p>Cuando se conecte exitosamente, deber\u00eda ver: 1. Conexi\u00f3n establecida: WebSocket se abre exitosamente 2. Lista de servidores recibida: Mensaje inicial con servidores de Discord disponibles 3. Datos de usuario devueltos: Respuesta con presencia de usuario simulada e informaci\u00f3n de roles</p>"},{"location":"es/getting-started/#comprender-los-datos-simulados","title":"Comprender los Datos Simulados","text":"<p>d-back viene con servidores de Discord simulados preconfigurados para desarrollo y pruebas. \u00a1Esto significa que puede comenzar a construir y probar inmediatamente sin configurar credenciales de la API de Discord!</p> <p>Los servidores simulados disponibles son:</p> <ul> <li>servidor d-world (<code>232769614004748288</code>): Servidor de desarrollo principal con 4 usuarios activos en diferentes estados</li> <li>servidor docs (<code>482241773318701056</code>): Servidor de documentaci\u00f3n con 1 usuario</li> <li>servidor oauth2 (<code>123456789012345678</code>): Servidor protegido para probar flujos de autenticaci\u00f3n OAuth2 con 1 usuario</li> <li>servidor my repos (<code>987654321098765432</code>): Servidor de exhibici\u00f3n de repositorios con 21 usuarios</li> </ul> <p>Perfecto para Desarrollo</p> <p>Los datos simulados son ideales para:</p> <ul> <li>Desarrollo de frontend sin dependencias de backend</li> <li>Probar visualizaci\u00f3n d-zone con datos realistas</li> <li>Demostrar el sistema sin claves de API de Discord</li> <li>Pipelines CI/CD y pruebas automatizadas</li> </ul> <p>Para usar datos reales de Discord en producci\u00f3n, necesitar\u00e1 implementar proveedores de datos personalizados. Consulte la gu\u00eda Proveedores de Datos Personalizados para obtener detalles.</p>"},{"location":"es/getting-started/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>\u00a1Felicitaciones! Ahora tiene d-back en funcionamiento. Aqu\u00ed est\u00e1 lo que debe explorar a continuaci\u00f3n:</p> <ul> <li>Gu\u00eda del Usuario: Aprenda sobre opciones de configuraci\u00f3n, callbacks y personalizaci\u00f3n</li> <li>Configuraci\u00f3n: Personalice configuraciones del servidor, puertos y servicio de archivos est\u00e1ticos</li> <li>Callbacks y Personalizaci\u00f3n: Reemplace datos simulados con sus propias fuentes de datos</li> <li>Proveedores de Datos Personalizados: Integre con la API de Discord o bases de datos</li> <li>Referencia de API: Documentaci\u00f3n detallada de todas las clases y m\u00e9todos</li> <li>Gu\u00eda del Desarrollador: Directrices de contribuci\u00f3n y descripci\u00f3n general de la arquitectura</li> </ul> <p>\u00bfNecesita Ayuda?</p> <p>Si encuentra problemas, consulte los GitHub Issues o inicie una Discusi\u00f3n.</p>"},{"location":"es/user-guide/","title":"Gu\u00eda del Usuario","text":"<p>\u00a1Bienvenido a la gu\u00eda del usuario de d-back! Esta gu\u00eda integral cubre todo lo que necesita para usar efectivamente d-back como servidor WebSocket para su simulaci\u00f3n de vida ambiental d-zone u otras aplicaciones en tiempo real.</p>"},{"location":"es/user-guide/#introduccion","title":"Introducci\u00f3n","text":"<p>Esta gu\u00eda est\u00e1 dise\u00f1ada para usuarios que ya han completado el tutorial de Primeros Pasos y desean profundizar en las caracter\u00edsticas y capacidades de d-back. Ya sea que est\u00e9 buscando personalizar el comportamiento del servidor, integrar con datos reales de Discord u optimizar su configuraci\u00f3n, encontrar\u00e1 la informaci\u00f3n que necesita aqu\u00ed.</p> <p>La gu\u00eda del usuario est\u00e1 organizada en tres \u00e1reas principales:</p> <ul> <li>Configuraci\u00f3n: Aprenda c\u00f3mo configurar d-back a trav\u00e9s de opciones de l\u00ednea de comandos, variables de entorno y configuraciones program\u00e1ticas</li> <li>Callbacks y Personalizaci\u00f3n: Descubra c\u00f3mo personalizar el comportamiento del servidor usando funciones callback para recuperaci\u00f3n de datos, autenticaci\u00f3n y m\u00e1s</li> <li>Proveedores de Datos Personalizados: Reemplace datos simulados con integraci\u00f3n real de la API de Discord o sus propias fuentes de datos personalizadas</li> </ul>"},{"location":"es/user-guide/#estructura-de-la-guia","title":"Estructura de la Gu\u00eda","text":"<ul> <li> <p> Configuraci\u00f3n</p> <p>Aprenda sobre opciones de l\u00ednea de comandos, variables de entorno y configuraciones del servidor</p> <p> Gu\u00eda de Configuraci\u00f3n</p> </li> <li> <p> Callbacks y Personalizaci\u00f3n</p> <p>Personalice el comportamiento del servidor con funciones callback para recuperaci\u00f3n de datos y autenticaci\u00f3n</p> <p> Gu\u00eda de Callbacks</p> </li> <li> <p> Proveedores de Datos Personalizados</p> <p>Reemplace datos simulados con integraci\u00f3n real de la API de Discord o fuentes de datos personalizadas</p> <p> Gu\u00eda de Proveedores de Datos</p> </li> </ul>"},{"location":"es/user-guide/#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":"<p>\u00bfNecesita lograr una tarea espec\u00edfica? Aqu\u00ed hay enlaces r\u00e1pidos a escenarios comunes:</p> Escenario D\u00f3nde Buscar Quiero cambiar el puerto del servidor Configuraci\u00f3n \u2192 Opciones de L\u00ednea de Comandos Quiero servir mis propios archivos est\u00e1ticos Configuraci\u00f3n \u2192 Servicio de Archivos Est\u00e1ticos Quiero usar datos reales de Discord Proveedores de Datos Personalizados Quiero agregar autenticaci\u00f3n OAuth2 Callbacks \u2192 Validaci\u00f3n OAuth2 Quiero transmitir mensajes personalizados Callbacks \u2192 M\u00e9todos de Difusi\u00f3n Quiero personalizar el formato de datos de usuario Callbacks \u2192 Callback de Datos de Usuario"},{"location":"es/user-guide/#referencia-rapida","title":"Referencia R\u00e1pida","text":"<p>Aqu\u00ed hay un resumen de conceptos clave que encontrar\u00e1 en esta gu\u00eda:</p> Concepto Descripci\u00f3n WebSocketServer Clase principal del servidor que maneja conexiones WebSocket, solicitudes HTTP y difusi\u00f3n de mensajes MockDataProvider Generador de datos de prueba integrado que simula actividad de usuario de Discord Callbacks Ganchos de personalizaci\u00f3n que permiten anular el comportamiento predeterminado (p. ej., <code>on_get_user_data</code>, <code>on_get_server_data</code>) Servicio de Archivos Est\u00e1ticos Servidor HTTP integrado para entregar activos de frontend como HTML, CSS y JavaScript Difusi\u00f3n M\u00e9todos para enviar actualizaciones en tiempo real a clientes conectados (presencia, mensajes, etc.) Integraci\u00f3n OAuth2 Soporte para autenticaci\u00f3n OAuth2 de Discord y validaci\u00f3n de tokens <p>\u00bfNecesita Detalles de la API?</p> <p>Para documentaci\u00f3n detallada de la API incluyendo firmas de m\u00e9todos, par\u00e1metros y tipos de retorno, consulte la Referencia de API.</p>"},{"location":"es/user-guide/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<p>\u00bfListo para personalizar su configuraci\u00f3n de d-back? Comience con:</p> <ol> <li>Configuraci\u00f3n - Configure su servidor con las configuraciones correctas</li> <li>Callbacks y Personalizaci\u00f3n - Aprenda c\u00f3mo personalizar el comportamiento</li> <li>Proveedores de Datos Personalizados - Integre fuentes de datos reales</li> </ol> <p>\u00bfPreguntas?</p> <p>Si no puede encontrar lo que est\u00e1 buscando, consulte la Referencia de API o visite nuestras GitHub Discussions.</p>"},{"location":"es/user-guide/callbacks/","title":"Callbacks y Personalizaci\u00f3n","text":"<p>Esta gu\u00eda explica c\u00f3mo personalizar el comportamiento de d-back usando funciones callback para recuperaci\u00f3n de datos, autenticaci\u00f3n y difusi\u00f3n de mensajes.</p>"},{"location":"es/user-guide/callbacks/#introduccion","title":"Introducci\u00f3n","text":"<p>d-back proporciona un sistema de callback flexible que le permite anular el comportamiento predeterminado del servidor. Los callbacks son funciones as\u00edncronas que se invocan en puntos espec\u00edficos del ciclo de vida del servidor, permiti\u00e9ndole:</p> <ul> <li>Proporcionar datos de usuario y servidor personalizados</li> <li>Implementar autenticaci\u00f3n personalizada</li> <li>Manejar solicitudes de archivos est\u00e1ticos</li> <li>Validar usuarios y tokens de Discord OAuth2</li> </ul> <p>Todos los callbacks son opcionales. Si no se proporciona un callback, d-back usa su comportamiento predeterminado (generalmente usando MockDataProvider).</p>"},{"location":"es/user-guide/callbacks/#callbacks-disponibles","title":"Callbacks Disponibles","text":""},{"location":"es/user-guide/callbacks/#callback-on_get_server_data","title":"Callback on_get_server_data","text":"<p>Prop\u00f3sito: Proporcionar la lista de servidores de Discord disponibles.</p> <p>Signatura: <pre><code>async def on_get_server_data(server_id: Optional[str] = None) -&gt; Dict[str, Any]\n</code></pre></p> <p>Par\u00e1metros: - <code>server_id</code> (str, opcional): ID de servidor espec\u00edfico a recuperar, o None para todos los servidores</p> <p>Retorna: Diccionario mapeando IDs de servidor a datos de servidor</p> <p>Ejemplo: <pre><code>async def get_my_servers(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {\n        \"232769614004748288\": {\n            \"id\": \"232769614004748288\",\n            \"name\": \"d-world\",\n            \"passworded\": False,\n            \"is_default\": True,\n            \"enabled\": True\n        }\n    }\n\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\nserver.on_get_server_data(get_my_servers)\n</code></pre></p>"},{"location":"es/user-guide/callbacks/#on_get_user_data-callback","title":"Callback on_get_user_data","text":"<p>Prop\u00f3sito: Proporcionar datos de usuario para un servidor de Discord espec\u00edfico.</p> <p>Signatura: <pre><code>async def on_get_user_data(server_id: str) -&gt; Dict[str, Any]\n</code></pre></p> <p>Par\u00e1metros: - <code>server_id</code> (str): ID del servidor de Discord para el cual recuperar datos de usuario</p> <p>Retorna: Diccionario mapeando IDs de usuario a datos de usuario</p> <p>Caso de Uso: Reemplazar datos simulados con usuarios reales de Discord, datos de base de datos o fuentes personalizadas.</p> <p>Ejemplo: <pre><code>async def my_user_data_provider(server_id: str) -&gt; Dict[str, Any]:\n    return {\n        \"user123\": {\n            \"uid\": \"user123\",\n            \"username\": \"Juan\",\n            \"status\": \"online\",\n            \"roleColor\": \"#3498db\"\n        }\n    }\n\nserver.on_get_user_data(my_user_data_provider)\n</code></pre></p>"},{"location":"es/user-guide/callbacks/#callback-on_static_request","title":"Callback on_static_request","text":"<p>Prop\u00f3sito: Manejar solicitudes de archivos est\u00e1ticos personalizados.</p> <p>Signatura: <pre><code>async def on_static_request(path: str) -&gt; Optional[Tuple[str, str]]\n</code></pre></p> <p>Par\u00e1metros: - <code>path</code> (str): Ruta del archivo solicitado (e.g., <code>/index.html</code>)</p> <p>Retorna: Tupla de <code>(content_type, content)</code> ambos strings, o None para usar manejo predeterminado</p> <p>Caso de Uso: Generar contenido din\u00e1micamente, servir desde ubicaciones personalizadas o implementar l\u00f3gica de enrutamiento personalizada.</p> <p>Ejemplo: <pre><code>async def custom_static_handler(path: str) -&gt; Optional[Tuple[str, str]]:\n    if path == \"/api/status\":\n        return (\"application/json\", '{\"status\": \"ok\"}')\n    return None  # Use default handler\n\nserver.on_static_request(custom_static_handler)\n</code></pre></p>"},{"location":"es/user-guide/callbacks/#on_validate_discord_user-callback","title":"Callback on_validate_discord_user","text":"<p>Prop\u00f3sito: Validar usuarios de Discord durante flujos de autenticaci\u00f3n OAuth2.</p> <p>Signatura: <pre><code>async def on_validate_discord_user(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool\n</code></pre></p> <p>Par\u00e1metros: - <code>token</code> (str): Token de acceso de Discord OAuth2 - <code>user_info</code> (Dict): Informaci\u00f3n de usuario de Discord de la API - <code>server_id</code> (str): ID del servidor de Discord que se est\u00e1 accediendo</p> <p>Retorna: True si el usuario debe tener acceso, False de lo contrario</p> <p>Caso de Uso: Implementar control de acceso basado en roles, validaci\u00f3n de membres\u00eda de servidor o l\u00f3gica de autorizaci\u00f3n personalizada.</p> <p>Ejemplo: <pre><code>async def validate_user(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool:\n    # Check if user is member of the server\n    user_id = user_info.get(\"id\")\n    # Your validation logic here\n    return True  # or False\n\nserver.on_validate_discord_user(validate_user)\n</code></pre></p>"},{"location":"es/user-guide/callbacks/#callback-on_get_client_id","title":"Callback on_get_client_id","text":"<p>Prop\u00f3sito: Proporcionar el ID de cliente de Discord OAuth2.</p> <p>Signatura: <pre><code>async def on_get_client_id(server_id: str) -&gt; str\n</code></pre></p> <p>Par\u00e1metros: - <code>server_id</code> (str): ID del servidor de Discord</p> <p>Retorna: ID de cliente de Discord OAuth2 como string</p> <p>Caso de Uso: Habilitar autenticaci\u00f3n OAuth2 para acceso protegido al servidor.</p> <p>Ejemplo: <pre><code>async def get_client_id(server_id: str) -&gt; str:\n    return \"YOUR_DISCORD_CLIENT_ID\"\n\nserver.on_get_client_id(get_client_id)\n</code></pre></p>"},{"location":"es/user-guide/callbacks/#registrar-callbacks","title":"Registrar Callbacks","text":"<p>Los callbacks se registran llamando al m\u00e9todo correspondiente en la instancia del servidor:</p> <pre><code>from d_back.server import WebSocketServer\n\nserver = WebSocketServer(port=3000, host=\"localhost\")\n\n# Register callbacks\nserver.on_get_user_data(my_user_data_callback)\nserver.on_get_server_data(my_server_data_callback)\nserver.on_validate_discord_user(my_validation_callback)\n</code></pre>"},{"location":"es/user-guide/callbacks/#ejemplo-completo","title":"Ejemplo Completo","text":"<pre><code>import asyncio\nfrom typing import Dict, Any, Optional, Tuple\nfrom d_back.server import WebSocketServer\n\nasync def get_servers(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {\n        \"232769614004748288\": {\n            \"id\": \"232769614004748288\",\n            \"name\": \"Mi Servidor\",\n            \"passworded\": False,\n            \"is_default\": True,\n            \"enabled\": True\n        }\n    }\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\nasync def get_users(server_id: str) -&gt; Dict[str, Any]:\n    return {\n        \"user1\": {\n            \"uid\": \"user1\",\n            \"username\": \"Juan\",\n            \"status\": \"online\",\n            \"roleColor\": \"#3498db\"\n        }\n    }\n\nasync def main():\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Register callbacks\n    server.on_get_server_data(get_servers)\n    server.on_get_user_data(get_users)\n\n    await server.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"es/user-guide/callbacks/#broadcasting-methods","title":"M\u00e9todos de Difusi\u00f3n","text":"<p>d-back proporciona m\u00e9todos para difundir actualizaciones en tiempo real a clientes conectados.</p>"},{"location":"es/user-guide/callbacks/#broadcast_message","title":"broadcast_message","text":"<p>Difundir un mensaje personalizado a todos los clientes conectados.</p> <pre><code>await server.broadcast_message({\n    \"type\": \"custom_event\",\n    \"data\": {\"message\": \"\u00a1Hola, mundo!\"}\n})\n</code></pre>"},{"location":"es/user-guide/callbacks/#broadcast_presence","title":"broadcast_presence","text":"<p>Difundir cambio de estado de presencia de usuario.</p> <pre><code>await server.broadcast_presence(\"232769614004748288\", \"user123\", \"dnd\")\n</code></pre>"},{"location":"es/user-guide/callbacks/#broadcast_client_id_update","title":"broadcast_client_id_update","text":"<p>Difundir actualizaci\u00f3n de ID de cliente OAuth2.</p> <pre><code>await server.broadcast_client_id_update(\"232769614004748288\", \"YOUR_CLIENT_ID\")\n</code></pre>"},{"location":"es/user-guide/callbacks/#integracion-oauth2","title":"Integraci\u00f3n OAuth2","text":"<p>Para habilitar autenticaci\u00f3n OAuth2:</p> <ol> <li>Registre un callback <code>on_get_client_id</code> para proporcionar su ID de cliente de Discord</li> <li>Registre un callback <code>on_validate_discord_user</code> para validar usuarios</li> <li>Configure su aplicaci\u00f3n de Discord con el URI de redirecci\u00f3n apropiado</li> </ol> <p>Flujo OAuth2: 1. Cliente solicita ID de cliente 2. Cliente redirige al usuario a Discord para autenticaci\u00f3n 3. Discord redirige de vuelta con c\u00f3digo de autorizaci\u00f3n 4. Cliente intercambia c\u00f3digo por token de acceso 5. d-back valida token y usuario usando su callback</p>"},{"location":"es/user-guide/callbacks/#manejo-de-errores","title":"Manejo de Errores","text":"<p>Siempre implemente manejo de errores apropiado en sus callbacks:</p> <pre><code>async def safe_user_data_provider(server_id: str) -&gt; Dict[str, Any]:\n    try:\n        # Your data retrieval logic\n        data = await fetch_user_data(server_id)\n        return data\n    except Exception as e:\n        print(f\"Error fetching user data: {e}\")\n        return {}  # Return empty dict on error\n\nserver.on_get_user_data(safe_user_data_provider)\n</code></pre>"},{"location":"es/user-guide/callbacks/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ul> <li>Mantenga callbacks as\u00edncronos: Todos los callbacks deben ser funciones <code>async</code></li> <li>Maneje errores graciosamente: Siempre use try/except</li> <li>Retorne datos correctamente formateados: Siga las estructuras de datos esperadas</li> <li>Documente su comportamiento: Agregue docstrings a funciones callback personalizadas</li> <li>Pruebe completamente: Pruebe callbacks con varios inputs</li> </ul>"},{"location":"es/user-guide/callbacks/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<ul> <li>Proveedores de Datos Personalizados: Aprenda c\u00f3mo integrar API de Discord real o bases de datos</li> <li>Configuraci\u00f3n: Configure opciones de servidor y despliegue</li> <li>Referencia de API: Documentaci\u00f3n detallada de API</li> </ul>"},{"location":"es/user-guide/configuration/","title":"Configuraci\u00f3n","text":"<p>Esta gu\u00eda cubre todas las formas en que puede configurar d-back para adaptarlo a sus necesidades, desde opciones de l\u00ednea de comandos hasta configuraciones program\u00e1ticas y variables de entorno.</p>"},{"location":"es/user-guide/configuration/#introduccion","title":"Introducci\u00f3n","text":"<p>d-back ofrece opciones de configuraci\u00f3n flexibles para adaptarse a diferentes escenarios de despliegue. Ya sea que lo est\u00e9 ejecutando desde la l\u00ednea de comandos durante el desarrollo o integr\u00e1ndolo en una aplicaci\u00f3n Python m\u00e1s grande, tiene control total sobre el comportamiento del servidor, configuraciones de red y servicio de archivos est\u00e1ticos.</p>"},{"location":"es/user-guide/configuration/#command-line-options","title":"Opciones de L\u00ednea de Comandos","text":"<p>Al ejecutar d-back desde la l\u00ednea de comandos, puede personalizar su comportamiento usando varias opciones:</p>"},{"location":"es/user-guide/configuration/#opciones-disponibles","title":"Opciones Disponibles","text":"Opci\u00f3n Predeterminado Descripci\u00f3n Ejemplo <code>--port</code> <code>3000</code> Puerto en el que ejecutar el servidor WebSocket <code>d_back --port 8080</code> <code>--host</code> <code>localhost</code> Host al que vincular el servidor <code>d_back --host 0.0.0.0</code> <code>--static-dir</code> Integrado Directorio desde el cual servir archivos est\u00e1ticos <code>d_back --static-dir ./my-frontend-build</code> <code>--version</code> - Mostrar informaci\u00f3n de versi\u00f3n <code>d_back --version</code>"},{"location":"es/user-guide/configuration/#ejemplos-de-uso","title":"Ejemplos de Uso","text":"<p>Inicio predeterminado (localhost:3000): <pre><code>d_back\n</code></pre></p> <p>Host y puerto personalizados: <pre><code>d_back --host 0.0.0.0 --port 8080\n</code></pre></p> <p>Esto hace que el servidor sea accesible desde otras m\u00e1quinas en su red.</p> <p>Directorio est\u00e1tico personalizado: <pre><code>d_back --static-dir ./my-frontend-build\n</code></pre></p> <p>Sirva sus propios archivos de frontend en lugar de la interfaz d-zone integrada.</p> <p>Obtener ayuda: <pre><code>d_back --help\n</code></pre></p> <p>Mostrar todas las opciones de l\u00ednea de comandos disponibles.</p> <p>Verificar versi\u00f3n: <pre><code>d_back --version\n</code></pre></p> <p>Ejecutar como M\u00f3dulo</p> <p>Tambi\u00e9n puede ejecutar d-back como un m\u00f3dulo de Python con las mismas opciones: <pre><code>python -m d_back --host 0.0.0.0 --port 8080\n</code></pre></p>"},{"location":"es/user-guide/configuration/#configuracion-programatica","title":"Configuraci\u00f3n Program\u00e1tica","text":"<p>Para m\u00e1s control e integraci\u00f3n en sus aplicaciones Python, puede configurar d-back program\u00e1ticamente:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance with custom settings\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Configure callbacks (optional)\n    server.on_get_user_data(my_user_data_callback)\n    server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"es/user-guide/configuration/#parametros-del-constructor","title":"Par\u00e1metros del Constructor","text":"<p>La clase <code>WebSocketServer</code> acepta los siguientes par\u00e1metros:</p> <ul> <li><code>port</code> (int, opcional): El n\u00famero de puerto en el que escuchar. Predeterminado a <code>3000</code>.</li> <li><code>host</code> (str, opcional): El nombre de host o direcci\u00f3n IP a la que vincular. Predeterminado a <code>\"localhost\"</code>.</li> </ul>"},{"location":"es/user-guide/configuration/#cuando-usar-configuracion-programatica","title":"Cu\u00e1ndo Usar Configuraci\u00f3n Program\u00e1tica","text":"<p>Use configuraci\u00f3n program\u00e1tica cuando:</p> <ul> <li>Necesite integrar d-back en una aplicaci\u00f3n Python m\u00e1s grande</li> <li>Quiera configurar din\u00e1micamente ajustes basados en condiciones de tiempo de ejecuci\u00f3n</li> <li>Necesite acceder a m\u00e9todos y atributos de la instancia del servidor</li> <li>Quiera implementar l\u00f3gica personalizada de inicio/apagado</li> </ul>"},{"location":"es/user-guide/configuration/#acceso-a-atributos-del-servidor","title":"Acceso a Atributos del Servidor","text":"<p>Una vez que cree una instancia de <code>WebSocketServer</code>, puede acceder a varios atributos:</p> <pre><code>server = WebSocketServer(port=3000, host=\"localhost\")\n\n# Access configuration\nprint(f\"Server will run on {server.host}:{server.port}\")\n\n# Access connections (set of connected WebSocket clients)\nprint(f\"Active connections: {len(server.connections)}\")\n\n# Access data provider\nprint(f\"Using data provider: {server.data_provider}\")\n</code></pre>"},{"location":"es/user-guide/configuration/#variables-de-entorno","title":"Variables de Entorno","text":"<p>Aunque d-back no usa variables de entorno por defecto, puede extenderlo f\u00e1cilmente para soportar configuraci\u00f3n basada en entorno:</p> <pre><code>import os\nfrom d_back.server import WebSocketServer\n\n# Example: Use environment variables\nport = int(os.getenv('D_BACK_PORT', 3000))\nhost = os.getenv('D_BACK_HOST', 'localhost')\n\nserver = WebSocketServer(port=port, host=host)\n</code></pre>"},{"location":"es/user-guide/configuration/#variables-de-entorno-recomendadas","title":"Variables de Entorno Recomendadas","text":"<p>Aqu\u00ed hay un patr\u00f3n sugerido para nombrar variables de entorno:</p> Variable de Entorno Tipo Predeterminado Descripci\u00f3n <code>D_BACK_PORT</code> int <code>3000</code> Puerto del servidor <code>D_BACK_HOST</code> str <code>localhost</code> Host del servidor <code>D_BACK_STATIC_DIR</code> str Integrado Directorio de archivos est\u00e1ticos"},{"location":"es/user-guide/configuration/#ejemplo-integracion-completa-de-variables-de-entorno","title":"Ejemplo: Integraci\u00f3n Completa de Variables de Entorno","text":"<pre><code>import os\nimport asyncio\nfrom pathlib import Path\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Read configuration from environment\n    port = int(os.getenv('D_BACK_PORT', 3000))\n    host = os.getenv('D_BACK_HOST', 'localhost')\n    static_dir = os.getenv('D_BACK_STATIC_DIR')\n\n    # Create server\n    server = WebSocketServer(port=port, host=host)\n\n    # Configure static directory if provided\n    if static_dir:\n        server.static_dir = Path(static_dir)\n\n    # Start server\n    await server.start()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>Flexibilidad de Despliegue</p> <p>Usar variables de entorno facilita desplegar d-back en diferentes entornos (desarrollo, staging, producci\u00f3n) sin cambios de c\u00f3digo.</p>"},{"location":"es/user-guide/configuration/#static-file-serving","title":"Servicio de Archivos Est\u00e1ticos","text":"<p>d-back incluye un servidor HTTP integrado para servir archivos est\u00e1ticos, facilitando la entrega de su frontend d-zone u otros activos web.</p>"},{"location":"es/user-guide/configuration/#comportamiento-predeterminado","title":"Comportamiento Predeterminado","text":"<p>Por defecto, d-back sirve archivos est\u00e1ticos desde su directorio <code>dist/</code> integrado, que contiene el frontend d-zone.</p>"},{"location":"es/user-guide/configuration/#directorio-estatico-personalizado","title":"Directorio Est\u00e1tico Personalizado","text":"<p>Para servir sus propios archivos est\u00e1ticos:</p> <p>L\u00ednea de comandos: <pre><code>d_back --static-dir ./my-frontend-build\n</code></pre></p> <p>Program\u00e1tico: <pre><code>from pathlib import Path\nserver = WebSocketServer(port=3000, host=\"localhost\")\nserver.static_dir = Path(\"./my-frontend-build\")\n</code></pre></p>"},{"location":"es/user-guide/configuration/#requisitos","title":"Requisitos","text":"<p>El servicio de archivos est\u00e1ticos requiere websockets versi\u00f3n 10.0 o superior para soporte del protocolo HTTP. Esto es manejado autom\u00e1ticamente por las dependencias de d-back.</p>"},{"location":"es/user-guide/configuration/#seguridad","title":"Seguridad","text":"<p>d-back incluye protecci\u00f3n contra path traversal para prevenir acceso a archivos fuera del directorio est\u00e1tico. Solicitudes como <code>/../../../etc/passwd</code> se bloquean autom\u00e1ticamente.</p> <p>Nota de Seguridad</p> <p>Siempre aseg\u00farese de que su directorio est\u00e1tico no contenga archivos sensibles. Solo sirva archivos que est\u00e9n destinados a ser p\u00fablicamente accesibles.</p>"},{"location":"es/user-guide/configuration/#tipos-de-archivo","title":"Tipos de Archivo","text":"<p>El servidor detecta autom\u00e1ticamente tipos de contenido basados en extensiones de archivo:</p> <ul> <li><code>.html</code> \u2192 <code>text/html</code></li> <li><code>.css</code> \u2192 <code>text/css</code></li> <li><code>.js</code> \u2192 <code>application/javascript</code></li> <li><code>.json</code> \u2192 <code>application/json</code></li> <li><code>.png</code>, <code>.jpg</code>, <code>.gif</code> \u2192 Tipos de imagen apropiados</li> <li>Y m\u00e1s...</li> </ul>"},{"location":"es/user-guide/configuration/#configuracion-de-servidor-simulado","title":"Configuraci\u00f3n de Servidor Simulado","text":"<p>d-back viene con servidores de Discord simulados preconfigurados para desarrollo y pruebas. Estos servidores proporcionan datos de usuario realistas sin requerir credenciales de la API de Discord.</p>"},{"location":"es/user-guide/configuration/#servidores-simulados-disponibles","title":"Servidores Simulados Disponibles","text":"Nombre del Servidor ID del Servidor Descripci\u00f3n Cantidad de Usuarios servidor d-world <code>232769614004748288</code> Servidor de desarrollo principal con actividad de usuario diversa 4 usuarios servidor docs <code>482241773318701056</code> Servidor de documentaci\u00f3n con actividad moderada 1 usuario servidor oauth2 <code>123456789012345678</code> Servidor protegido para probar flujos OAuth2 1 usuario servidor my repos <code>987654321098765432</code> Servidor de exhibici\u00f3n de repositorios 21 usuarios"},{"location":"es/user-guide/configuration/#usar-servidores-simulados","title":"Usar Servidores Simulados","text":"<p>Los servidores simulados est\u00e1n disponibles autom\u00e1ticamente cuando inicia d-back. Puede solicitar datos para cualquiera de estos servidores usando su ID de servidor:</p> <pre><code>// JavaScript WebSocket client example\nsocket.send(JSON.stringify({\n    type: 'get_user_data',\n    serverId: '232769614004748288'  // d-world server\n}));\n</code></pre>"},{"location":"es/user-guide/configuration/#caracteristicas-de-datos-simulados","title":"Caracter\u00edsticas de Datos Simulados","text":"<p>Los datos simulados incluyen:</p> <ul> <li>Estados de usuario: online, idle, dnd (do not disturb), offline</li> <li>Colores de roles: C\u00f3digos de color hexadecimales para representaci\u00f3n visual</li> <li>Nombres realistas: Nombres de usuario variados estilo Discord</li> <li>Actualizaciones din\u00e1micas: Cambios de estado y mensajes ocurren peri\u00f3dicamente</li> </ul> <p>Solo Desarrollo</p> <p>Los servidores simulados est\u00e1n dise\u00f1ados para desarrollo y pruebas. Para despliegues de producci\u00f3n, implemente proveedores de datos personalizados para usar datos reales de Discord. Consulte la gu\u00eda Proveedores de Datos Personalizados.</p>"},{"location":"es/user-guide/configuration/#ciclo-de-vida-del-servidor","title":"Ciclo de Vida del Servidor","text":"<p>Comprender el ciclo de vida del servidor le ayuda a gestionar inicio, operaci\u00f3n y apagado efectivamente.</p>"},{"location":"es/user-guide/configuration/#iniciar-el-servidor","title":"Iniciar el Servidor","text":"<p>M\u00e9todo 1: <code>start()</code> <pre><code>await server.start()\n</code></pre> Inicia el servidor WebSocket y el listener HTTP. Este m\u00e9todo retorna inmediatamente despu\u00e9s del inicio, permiti\u00e9ndole realizar operaciones adicionales.</p> <p>M\u00e9todo 2: <code>run_forever()</code> <pre><code>await server.run_forever()\n</code></pre> Inicia el servidor y lo ejecuta indefinidamente hasta ser interrumpido. Esto es \u00fatil para scripts de servidor simples.</p>"},{"location":"es/user-guide/configuration/#detener-el-servidor","title":"Detener el Servidor","text":"<p>Apagado gracioso: <pre><code>await server.stop()\n</code></pre> Cierra todas las conexiones activas y detiene el servidor limpiamente.</p> <p>Manejo de se\u00f1ales: El servidor maneja autom\u00e1ticamente <code>Ctrl+C</code> (SIGINT) para apagado gracioso. Cuando presiona <code>Ctrl+C</code>, el servidor:</p> <ol> <li>Deja de aceptar nuevas conexiones</li> <li>Cierra conexiones existentes graciosamente</li> <li>Limpia recursos</li> <li>Sale</li> </ol>"},{"location":"es/user-guide/configuration/#ejemplo-completo-de-ciclo-de-vida","title":"Ejemplo Completo de Ciclo de Vida","text":"<pre><code>import asyncio\nimport signal\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Setup signal handler for graceful shutdown\n    loop = asyncio.get_event_loop()\n\n    def signal_handler():\n        print(\"\\nReceived shutdown signal...\")\n        asyncio.create_task(server.stop())\n\n    loop.add_signal_handler(signal.SIGINT, signal_handler)\n    loop.add_signal_handler(signal.SIGTERM, signal_handler)\n\n    # Start server\n    print(\"Starting server...\")\n    await server.start()\n\n    # Run forever\n    await server.run_forever()\n\nasyncio.run(main())\n</code></pre>"},{"location":"es/user-guide/configuration/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<p>Siga estas recomendaciones para una configuraci\u00f3n \u00f3ptima de d-back:</p>"},{"location":"es/user-guide/configuration/#configuracion-de-red","title":"Configuraci\u00f3n de Red","text":"<p>Desarrollo vs Producci\u00f3n</p> <ul> <li>Desarrollo: Use <code>localhost</code> para restringir acceso solo a su m\u00e1quina</li> <li>Producci\u00f3n: Use <code>0.0.0.0</code> para aceptar conexiones desde cualquier interfaz de red</li> </ul> <p>Selecci\u00f3n de Puerto</p> <ul> <li>Evite puertos privilegiados (<code>&lt;1024</code>) a menos que ejecute con permisos apropiados</li> <li>Puertos comunes como <code>3000</code>, <code>8080</code> o <code>8000</code> son buenas opciones</li> <li>Verifique que su puerto elegido no est\u00e9 ya en uso</li> </ul>"},{"location":"es/user-guide/configuration/#archivos-estaticos","title":"Archivos Est\u00e1ticos","text":"<ul> <li>Organice: Mantenga archivos est\u00e1ticos en un directorio dedicado</li> <li>Estructura: Use estructura est\u00e1ndar de proyecto web (<code>index.html</code>, <code>css/</code>, <code>js/</code>, etc.)</li> <li>Proceso de build: Si usa un framework de frontend, configure su salida de build al directorio est\u00e1tico</li> </ul>"},{"location":"es/user-guide/configuration/#gestion-de-configuracion","title":"Gesti\u00f3n de Configuraci\u00f3n","text":"<ul> <li>Use variables de entorno para configuraciones espec\u00edficas de despliegue</li> <li>Use configuraci\u00f3n program\u00e1tica para configuraciones complejas o din\u00e1micas</li> <li>Documente su configuraci\u00f3n en README o gu\u00edas de despliegue</li> <li>Mantenga secretos seguros: Nunca codifique en duro claves de API o tokens</li> </ul>"},{"location":"es/user-guide/configuration/#rendimiento","title":"Rendimiento","text":"<ul> <li>L\u00edmites de conexi\u00f3n: Monitoree el n\u00famero de conexiones activas</li> <li>Uso de recursos: Rastree uso de memoria y CPU bajo carga</li> <li>Registro: Implemente registro apropiado para depuraci\u00f3n y monitoreo</li> </ul> <p>Ejemplo de Configuraci\u00f3n de Producci\u00f3n</p> <pre><code>import os\nfrom d_back.server import WebSocketServer\n\n# Production-ready configuration\nserver = WebSocketServer(\n    port=int(os.getenv('PORT', 3000)),\n    host='0.0.0.0'  # Accept external connections\n)\n\n# Configure callbacks for real data\nserver.on_get_user_data(real_discord_data_provider)\nserver.on_validate_discord_user(oauth2_validator)\n\n# Start server\nawait server.start()\n</code></pre>"},{"location":"es/user-guide/configuration/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<p>Ahora que comprende c\u00f3mo configurar d-back, aprenda c\u00f3mo personalizar su comportamiento:</p> <ul> <li>Callbacks y Personalizaci\u00f3n: Anule el comportamiento predeterminado con callbacks personalizados</li> <li>Proveedores de Datos Personalizados: Reemplace datos simulados con fuentes reales</li> <li>Referencia de API: Documentaci\u00f3n detallada de la API</li> </ul>"},{"location":"es/user-guide/custom-data-providers/","title":"Proveedores de Datos Personalizados","text":"<p>Esta gu\u00eda explica c\u00f3mo reemplazar los datos simulados de d-back con fuentes de datos reales como la API de Discord, bases de datos o servicios personalizados.</p>"},{"location":"es/user-guide/custom-data-providers/#introduccion","title":"Introducci\u00f3n","text":"<p>Por defecto, d-back usa <code>MockDataProvider</code> para generar datos de usuario y servidor simulados. Esto es perfecto para desarrollo y pruebas, pero para producci\u00f3n querr\u00e1 usar datos reales. Esta gu\u00eda muestra c\u00f3mo integrar fuentes de datos personalizadas.</p>"},{"location":"es/user-guide/custom-data-providers/#comprender-datos-simulados","title":"Comprender Datos Simulados","text":"<p>El <code>MockDataProvider</code> integrado genera: - 4 servidores de Discord preconfigurados - Usuarios con estados realistas (online, idle, dnd, offline) - Colores de roles y nombres de usuario variados - Cambios peri\u00f3dicos de presencia y mensajes</p> <p>Para ver los datos simulados en acci\u00f3n, inicie d-back y con\u00e9ctese al servidor con su WebSocket.</p>"},{"location":"es/user-guide/custom-data-providers/#crear-un-proveedor-de-datos-de-usuario-personalizado","title":"Crear un Proveedor de Datos de Usuario Personalizado","text":"<p>Reemplace el proveedor de datos de usuario simulados con su propia funci\u00f3n:</p> <pre><code>from typing import Dict, Any\nfrom d_back.server import WebSocketServer\n\nasync def get_user_data(server_id: str) -&gt; Dict[str, Any]:\n    # Your custom logic to fetch user data\n    users = {\n        \"123456789\": {\n            \"uid\": \"123456789\",\n            \"username\": \"Usuario Real\",\n            \"status\": \"online\",\n            \"roleColor\": \"#5865F2\"\n        }\n    }\n    return users\n\nserver = WebSocketServer(port=3000, host=\"localhost\")\nserver.on_get_user_data(get_user_data)\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#crear-un-proveedor-de-datos-de-servidor-personalizado","title":"Crear un Proveedor de Datos de Servidor Personalizado","text":"<p>Similarmente, puede proporcionar su propia lista de servidores:</p> <pre><code>from typing import Dict, Any, Optional\n\nasync def get_server_data(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {\n        \"987654321\": {\n            \"id\": \"987654321\",\n            \"name\": \"Mi Servidor de Discord\",\n            \"passworded\": False,\n            \"is_default\": True,\n            \"enabled\": True\n        }\n    }\n\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\nserver.on_get_server_data(get_server_data)\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#integracion-de-api-de-discord","title":"Integraci\u00f3n de API de Discord","text":"<p>Para usar datos reales de Discord, use la biblioteca <code>discord.py</code> o solicitudes HTTP directas:</p>"},{"location":"es/user-guide/custom-data-providers/#usando-discordpy","title":"Usando discord.py","text":"<pre><code>import discord\nfrom discord.ext import commands\nfrom d_back.server import WebSocketServer\n\nbot = commands.Bot(command_prefix=\"!\", intents=discord.Intents.all())\nws_server = WebSocketServer(port=3000, host=\"localhost\")\n\nasync def get_discord_user_data(server_id: str) -&gt; Dict[str, Any]:\n    guild = bot.get_guild(int(server_id))\n    if not guild:\n        return {}\n\n    users = {}\n    for member in guild.members:\n        users[str(member.id)] = {\n            \"uid\": str(member.id),\n            \"username\": member.display_name,\n            \"status\": str(member.status),\n            \"roleColor\": str(member.color) if member.color else \"#000000\"\n        }\n    return users\n\nasync def get_discord_servers(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {}\n    for guild in bot.guilds:\n        servers[str(guild.id)] = {\n            \"id\": str(guild.id),\n            \"name\": guild.name,\n            \"passworded\": False,\n            \"is_default\": False,\n            \"enabled\": True\n        }\n\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\n# Register callbacks\nws_server.on_get_user_data(get_discord_user_data)\nws_server.on_get_server_data(get_discord_servers)\n\n# Discord bot events\n@bot.event\nasync def on_ready():\n    \"\"\"Start WebSocket server when bot is ready.\"\"\"\n    print(f\"Bot logged in as {bot.user}\")\n    print(f\"Starting WebSocket server...\")\n    await ws_server.start()\n\n@bot.event\nasync def on_presence_update(before, after):\n    \"\"\"Broadcast presence changes to d-zone.\"\"\"\n    if before.status != after.status:\n        await ws_server.broadcast_presence(\n            str(after.guild.id),\n            str(after.id),\n            str(after.status)\n        )\n\n# Run bot\nbot.run(\"YOUR_BOT_TOKEN\")\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#integracion-de-base-de-datos","title":"Integraci\u00f3n de Base de Datos","text":"<p>Para datos persistentes, use una base de datos:</p>"},{"location":"es/user-guide/custom-data-providers/#usando-postgresql-con-asyncpg","title":"Usando PostgreSQL con asyncpg","text":"<pre><code>import asyncpg\nfrom typing import Dict, Any, Optional\n\nclass DatabaseProvider:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n        self.pool = None\n\n    async def connect(self):\n        self.pool = await asyncpg.create_pool(self.connection_string)\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        async with self.pool.acquire() as conn:\n            rows = await conn.fetch(\n                \"SELECT user_id, username, status, role_color FROM users WHERE server_id = $1\",\n                server_id\n            )\n\n            users = {}\n            for row in rows:\n                users[row['user_id']] = {\n                    \"uid\": row['user_id'],\n                    \"username\": row['username'],\n                    \"status\": row['status'],\n                    \"roleColor\": row['role_color']\n                }\n            return users\n\n    async def get_server_data(self, server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n        async with self.pool.acquire() as conn:\n            if server_id:\n                rows = await conn.fetch(\n                    \"SELECT * FROM servers WHERE server_id = $1\",\n                    server_id\n                )\n            else:\n                rows = await conn.fetch(\"SELECT * FROM servers\")\n\n            servers = {}\n            for row in rows:\n                servers[row['server_id']] = {\n                    \"id\": row['server_id'],\n                    \"name\": row['name'],\n                    \"passworded\": row['passworded'],\n                    \"is_default\": row['is_default'],\n                    \"enabled\": row['enabled']\n                }\n            return servers\n\n# Usage\nasync def main():\n    db = DatabaseProvider(\"postgresql://user:pass@localhost/d_back\")\n    await db.connect()\n\n    # Create server with database callbacks\n    server = WebSocketServer(port=3000, host=\"0.0.0.0\")\n    server.on_get_user_data(db.get_user_data)\n    server.on_get_server_data(db.get_server_data)\n\n    await server.start()\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#enfoque-hibrido","title":"Enfoque H\u00edbrido","text":"<p>Combine m\u00faltiples fuentes de datos:</p> <pre><code>async def hybrid_user_data(server_id: str) -&gt; Dict[str, Any]:\n    # Try Discord API first\n    discord_users = await get_discord_users(server_id)\n\n    # Fall back to database if Discord unavailable\n    if not discord_users:\n        discord_users = await get_database_users(server_id)\n\n    # Merge with cached data\n    cached_users = await get_cached_users(server_id)\n    discord_users.update(cached_users)\n\n    return discord_users\n\nserver.on_get_user_data(hybrid_user_data)\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#actualizaciones-en-tiempo-real","title":"Actualizaciones en Tiempo Real","text":"<p>Para actualizar clientes cuando cambian datos:</p> <pre><code># When user status changes\nawait server.broadcast_presence(server_id, user_id, new_status)\n\n# When you want to trigger full data refresh\nawait server.broadcast_message({\n    \"type\": \"refresh_data\",\n    \"serverId\": server_id\n})\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#probar-proveedores-personalizados","title":"Probar Proveedores Personalizados","text":"<p>Siempre pruebe sus proveedores de datos:</p> <pre><code>import pytest\n\n@pytest.mark.asyncio\nasync def test_server_with_custom_provider():\n    \"\"\"Test WebSocketServer with custom data provider.\"\"\"\n    server = WebSocketServer(port=3001, host=\"localhost\")\n    server.on_get_user_data(get_user_data)\n\n    # Start server\n    await server.start()\n\n    # Connect client and test\n    async with websockets.connect(\"ws://localhost:3001\") as websocket:\n        # Request user data\n        await websocket.send(json.dumps({\n            \"type\": \"get_user_data\",\n            \"serverId\": \"232769614004748288\"\n        }))\n\n        # Receive response\n        response = await websocket.recv()\n        data = json.loads(response)\n\n        assert data[\"type\"] == \"user_data\"\n        assert \"users\" in data\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#optimizacion-de-rendimiento","title":"Optimizaci\u00f3n de Rendimiento","text":""},{"location":"es/user-guide/custom-data-providers/#cacheo","title":"Cacheo","text":"<pre><code>from functools import lru_cache\nfrom datetime import datetime, timedelta\n\nclass CachedProvider:\n    def __init__(self):\n        self.cache = {}\n        self.cache_timeout = timedelta(minutes=5)\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        now = datetime.now()\n\n        # Check cache\n        if server_id in self.cache:\n            cached_data, cached_time = self.cache[server_id]\n            if now - cached_time &lt; self.cache_timeout:\n                return cached_data\n\n        # Fetch fresh data\n        data = await fetch_from_api(server_id)\n        self.cache[server_id] = (data, now)\n        return data\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#pooling-de-conexiones","title":"Pooling de Conexiones","text":"<pre><code>from aiohttp import ClientSession\n\nclass PooledProvider:\n    def __init__(self):\n        self.session = None\n\n    async def __aenter__(self):\n        self.session = ClientSession()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.session.close()\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        async with self.session.get(f\"https://api.example.com/users/{server_id}\") as resp:\n            return await resp.json()\n\n# Usage\nasync def main():\n    async with PooledProvider() as provider:\n        server = WebSocketServer()\n        server.on_get_user_data(provider.get_user_data)\n        await server.start()\n</code></pre>"},{"location":"es/user-guide/custom-data-providers/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":""},{"location":"es/user-guide/custom-data-providers/#problemas-comunes","title":"Problemas Comunes","text":"<p>Discrepancias de formato de datos: <pre><code># Always validate and transform data\ndef validate_user_data(data: Dict) -&gt; Dict:\n    \"\"\"Ensure user data has required fields.\"\"\"\n    required_fields = [\"uid\", \"username\", \"status\", \"roleColor\"]\n\n    for user_id, user_data in data.items():\n        for field in required_fields:\n            if field not in user_data:\n                user_data[field] = get_default_value(field)\n\n    return data\n</code></pre></p> <p>Manejo de l\u00edmites de tasa de API: <pre><code>import asyncio\n\nasync def rate_limited_fetch(server_id: str) -&gt; Dict[str, Any]:\n    try:\n        return await api.get_users(server_id)\n    except RateLimitError as e:\n        await asyncio.sleep(e.retry_after)\n        return await api.get_users(server_id)\n</code></pre></p>"},{"location":"es/user-guide/custom-data-providers/#que-sigue","title":"\u00bfQu\u00e9 Sigue?","text":"<ul> <li>Callbacks y Personalizaci\u00f3n: Aprenda m\u00e1s sobre el sistema de callbacks</li> <li>Configuraci\u00f3n: Configure opciones de servidor</li> <li>Referencia de API: Documentaci\u00f3n completa de la API</li> </ul>"},{"location":"de/","title":"d-back Dokumentation","text":"<p>WebSocket-Server f\u00fcr Discord-Integration mit d-zone Ambient-Life-Simulation</p> <p>Willkommen zur offiziellen Dokumentation von d-back \u2013 dem intelligenten Backend-Service, der die magische d-zone Ambient-Life-Simulation antreibt! d-back dient als Echtzeit-Br\u00fccke zwischen Discord-Servern und dem sch\u00f6nen d-zone-Frontend und schafft ein immersives Erlebnis, bei dem jeder Discord-Benutzer Teil eines lebendigen, atmenden digitalen \u00d6kosystems wird.</p> <p>d-zone ist eine Ambient-Life-Simulation, bei der die Anwesenheit und Aktivit\u00e4t der Benutzer auf einem Discord-Server ein lebendes digitales Umfeld subtil beeinflussen. Stellen Sie es sich wie ein digitales Terrarium vor, das auf die Energie Ihrer Community reagiert! d-back stellt Echtzeit-Benutzerdaten \u00fcber WebSocket-Verbindungen bereit und erm\u00f6glicht diese nahtlose Integration.</p>"},{"location":"de/#schnelllinks","title":"Schnelllinks","text":"<ul> <li> <p> Erste Schritte</p> <p>Installieren und starten Sie Ihren ersten WebSocket-Server in Minuten</p> <p> Beginnen</p> </li> <li> <p> Benutzerhandbuch</p> <p>Erfahren Sie, wie Sie d-back f\u00fcr Ihre Bed\u00fcrfnisse konfigurieren und anpassen</p> <p> Benutzerhandbuch</p> </li> <li> <p> API-Referenz</p> <p>Erkunden Sie die vollst\u00e4ndige API-Dokumentation mit detaillierten Beispielen</p> <p> API-Referenz</p> </li> <li> <p> Entwicklerhandbuch</p> <p>Tragen Sie zum Projekt bei und erweitern Sie seine Funktionalit\u00e4t</p> <p> Entwicklerhandbuch</p> </li> </ul>"},{"location":"de/#hauptmerkmale","title":"Hauptmerkmale","text":"<p>WebSocket-Server</p> <p>Bidirektionale Echtzeitkommunikation mit dem d-zone-Frontend, unterst\u00fctzt mehrere gleichzeitige Verbindungen und effizientes Nachrichten-Broadcasting.</p> <p>Benutzeraktivit\u00e4ts-Simulation</p> <p>Ausgefeilte Mock-Discord-Benutzerdaten mit realistischen Pr\u00e4senzzust\u00e4nden (online, inaktiv, DND, offline), perfekt f\u00fcr Entwicklung und Tests.</p> <p>Multi-Server-Unterst\u00fctzung</p> <p>Verwalten Sie mehrere Discord-Server gleichzeitig, jeder mit eigenen Benutzerlisten und Konfigurationen.</p> <p>OAuth2-f\u00e4hig</p> <p>Integrierte Unterst\u00fctzung f\u00fcr Discord-OAuth2-Authentifizierung, erm\u00f6glicht sichere Benutzervalidierung und Serverzugriffskontrolle.</p> <p>Statische Dateiauslieferung</p> <p>Frontend-Assets direkt vom Backend ausliefern (websockets 10.0+), vereinfacht Bereitstellung und Hosting.</p>"},{"location":"de/#schnellbeispiel","title":"Schnellbeispiel","text":"<p>Beginnen Sie mit d-back in nur wenigen Codezeilen:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Optional: Set up custom callbacks\n    server.on_get_user_data(my_user_data_callback)\n    server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\n# Run the server\nasyncio.run(main())\n</code></pre> <p>Oder verwenden Sie die Befehlszeilenschnittstelle:</p> <pre><code># Start with default settings\npython -m d_back\n\n# Custom configuration\npython -m d_back --port 8080 --host 0.0.0.0 --static-dir ./my-frontend\n</code></pre>"},{"location":"de/#projektinformationen","title":"Projektinformationen","text":"<p>Repository: NNTin/d-back auf GitHub Paket: d-back auf PyPI Lizenz: MIT-Lizenz Python: 3.8 oder h\u00f6her</p>"},{"location":"de/#nachste-schritte","title":"N\u00e4chste Schritte","text":"<p>Bereit einzutauchen? Hier ist, was Sie als N\u00e4chstes erkunden sollten:</p> <ol> <li>Erste Schritte - Installieren Sie d-back und starten Sie Ihren ersten Server</li> <li>Mock-Daten-F\u00e4higkeiten - Erfahren Sie mehr \u00fcber das umfassende Mock-Daten-System f\u00fcr Tests ohne Discord-API-Zugriff</li> <li>d-zone Frontend - Erkunden Sie das sch\u00f6ne Frontend, das Ihre Discord-Community zum Leben erweckt</li> <li>API-Dokumentation - Entdecken Sie alle Callback-Hooks und Anpassungsoptionen</li> </ol> <p>Entwicklungsbereit</p> <p>d-back kommt mit vorkonfigurierten Mock-Discord-Servern und realistischen Benutzerdaten, ideal f\u00fcr Entwicklung, Tests und Demonstrationszwecke. Keine Discord-API-Schl\u00fcssel erforderlich, um loszulegen!</p> <p> Mit \u2764\ufe0f f\u00fcr das d-world-\u00d6kosystem erstellt </p>"},{"location":"de/api-reference/","title":"API-Referenz","text":"<p>Diese Seite bietet vollst\u00e4ndige API-Dokumentation f\u00fcr d-back, automatisch aus den Docstrings des Quellcodes generiert. Alle Klassen und Methoden enthalten detaillierte Beschreibungen, Parameter, R\u00fcckgabewerte und Beispiele.</p>"},{"location":"de/api-reference/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Die d-back-API ist in zwei Hauptkomponenten organisiert:</p> <ul> <li>WebSocketServer: Die Haupt-Serverklasse zur Verwaltung von WebSocket-Verbindungen, HTTP-Anfragen und Nachrichten-Broadcasting</li> <li>MockDataProvider: Stellt Mock-Daten und periodische Hintergrundaufgaben f\u00fcr Entwicklung und Tests bereit</li> </ul> <p>Alle API-Dokumentation folgt Google-Style-Docstrings mit umfassenden Beispielen. F\u00fcr Nutzungsmuster und Integrationsleitf\u00e4den siehe das Benutzerhandbuch.</p>"},{"location":"de/api-reference/#websocketserver","title":"WebSocketServer","text":"<p>Die Haupt-Serverklasse zur Verwaltung von WebSocket-Verbindungen, HTTP-Anfragen und Nachrichten-Broadcasting. Dies ist Ihre prim\u00e4re Schnittstelle zur d-back-Funktionalit\u00e4t.</p>"},{"location":"de/api-reference/#mockdataprovider","title":"MockDataProvider","text":"<p>Stellt Mock-Daten und periodische Hintergrundaufgaben f\u00fcr Entwicklung und Tests bereit. Diese Klasse wird automatisch verwendet, wenn keine benutzerdefinierten Callbacks registriert sind.</p>"},{"location":"de/api-reference/#hilfsfunktionen","title":"Hilfsfunktionen","text":"<p>Hilfsfunktionen f\u00fcr Befehlszeilenschnittstelle und Versionsverwaltung.</p>"},{"location":"de/api-reference/#verwendungsbeispiele","title":"Verwendungsbeispiele","text":"<p>F\u00fcr praktische Beispiele zur Verwendung dieser APIs siehe:</p> <ul> <li>Erste Schritte: Grundlegende Verwendung und erste Verbindung</li> <li>Konfiguration: Server-Einrichtung und -Konfiguration</li> <li>Callbacks &amp; Anpassung: Callback-Verwendungsbeispiele</li> <li>Benutzerdefinierte Datenanbieter: Datenanbieter-Implementierungsmuster</li> </ul>"},{"location":"de/api-reference/#typhinweise","title":"Typhinweise","text":"<p>Alle Methoden enthalten umfassende Typhinweise f\u00fcr Parameter und R\u00fcckgabewerte. Beim Arbeiten mit Callbacks importieren Sie die erforderlichen Typen:</p> <pre><code>from typing import Dict, Any, Optional, Tuple, Callable, Awaitable\n</code></pre> <p>F\u00fcr weitere Informationen \u00fcber Python-Typhinweise siehe die offizielle typing-Dokumentation.</p>"},{"location":"de/developer-guide/","title":"Entwicklerhandbuch","text":"<p>Willkommen zum d-back-Entwicklerhandbuch! Dieser Leitfaden bietet alle Informationen, die Sie ben\u00f6tigen, um zum Projekt beizutragen, seine Architektur zu verstehen und Best Practices f\u00fcr die Entwicklung zu befolgen.</p>"},{"location":"de/developer-guide/#einfuhrung","title":"Einf\u00fchrung","text":"<p>d-back ist ein Open-Source-WebSocket-Server f\u00fcr Discord-Integration mit d-zone Ambient-Life-Simulation. Wir begr\u00fc\u00dfen Beitr\u00e4ge aus der Community, und dieser Leitfaden hilft Ihnen beim Einstieg.</p>"},{"location":"de/developer-guide/#erste-schritte-mit-der-entwicklung","title":"Erste Schritte mit der Entwicklung","text":""},{"location":"de/developer-guide/#entwicklungsumgebung-einrichten","title":"Entwicklungsumgebung einrichten","text":"<ol> <li> <p>Repository forken und klonen:    <pre><code>git clone https://github.com/IHR_BENUTZERNAME/d-back.git\ncd d-back\n</code></pre></p> </li> <li> <p>Virtuelle Umgebung erstellen:    <pre><code>python -m venv .venv\nsource .venv/bin/activate  # Auf Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Entwicklungsabh\u00e4ngigkeiten installieren:    <pre><code>pip install -e .[docs]\npip install pytest pytest-asyncio websockets\n</code></pre></p> </li> <li> <p>Installation \u00fcberpr\u00fcfen:    <pre><code>python -m d_back --version\n</code></pre></p> </li> </ol>"},{"location":"de/developer-guide/#projektarchitektur","title":"Projektarchitektur","text":""},{"location":"de/developer-guide/#verzeichnisstruktur","title":"Verzeichnisstruktur","text":"<pre><code>d-back/\n\u251c\u2500\u2500 d_back/               # Hauptquellcode\n\u2502   \u251c\u2500\u2500 __init__.py       # Paketmetadaten\n\u2502   \u251c\u2500\u2500 __main__.py       # CLI-Einstiegspunkt\n\u2502   \u251c\u2500\u2500 server.py         # Haupt-WebSocketServer-Klasse\n\u2502   \u2514\u2500\u2500 mock/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 data.py       # MockDataProvider\n\u251c\u2500\u2500 docs/                 # MkDocs-Dokumentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 getting-started.md\n\u2502   \u251c\u2500\u2500 user-guide/\n\u2502   \u2514\u2500\u2500 api-reference.md\n\u251c\u2500\u2500 tests/                # pytest-Tests\n\u2502   \u251c\u2500\u2500 test_dis_connect.py\n\u2502   \u2514\u2500\u2500 helpers/\n\u2502       \u2514\u2500\u2500 mock_websocket_client.py\n\u251c\u2500\u2500 pyproject.toml        # Projektmetadaten\n\u251c\u2500\u2500 setup.cfg             # setuptools-Konfiguration\n\u251c\u2500\u2500 mkdocs.yml            # MkDocs-Konfiguration\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"de/developer-guide/#kernkomponenten","title":"Kernkomponenten","text":"<p>WebSocketServer (<code>d_back/server.py</code>): - Verwaltet WebSocket-Verbindungen und HTTP-Anfragen - Verwaltet anpassbare Callbacks f\u00fcr Datenabruf - Stellt Broadcasting-Methoden f\u00fcr Echtzeit-Updates bereit - Unterst\u00fctzt statische Dateiauslieferung</p> <p>MockDataProvider (<code>d_back/mock/data.py</code>): - Generiert realistische simulierte Benutzer- und Serverdaten - F\u00fchrt periodische Hintergrundaufgaben aus (Pr\u00e4senz\u00e4nderungen, Nachrichten) - Stellt 4 vorkonfigurierte Server mit verschiedenen Daten bereit - Wird automatisch verwendet, wenn keine benutzerdefinierten Callbacks registriert sind</p> <p>CLI-Modul (<code>d_back/__main__.py</code>): - Befehlszeilenargument-Parsing - Einstiegspunkt zum Ausf\u00fchren des Servers - Signal-Handling f\u00fcr ordnungsgem\u00e4\u00dfes Herunterfahren</p>"},{"location":"de/developer-guide/#testen","title":"Testen","text":""},{"location":"de/developer-guide/#teststruktur","title":"Teststruktur","text":"<p>Tests sind im <code>tests/</code>-Verzeichnis organisiert:</p> <ul> <li><code>test_dis_connect.py</code>: WebSocket-Konnektivit\u00e4ts- und Nachrichtenfluss-Tests</li> <li><code>helpers/mock_websocket_client.py</code>: Mock-WebSocket-Client f\u00fcr Tests</li> </ul>"},{"location":"de/developer-guide/#tests-ausfuhren","title":"Tests ausf\u00fchren","text":"<p>Alle Tests ausf\u00fchren: <pre><code>pytest\n</code></pre></p> <p>Spezifische Tests ausf\u00fchren: <pre><code>pytest tests/test_dis_connect.py\n</code></pre></p> <p>Mit ausf\u00fchrlicher Ausgabe: <pre><code>pytest -v\n</code></pre></p> <p>Mit Abdeckung: <pre><code>pytest --cov=d_back\n</code></pre></p>"},{"location":"de/developer-guide/#tests-schreiben","title":"Tests schreiben","text":"<p>Tests verwenden <code>pytest</code> und <code>pytest-asyncio</code> f\u00fcr asynchrone Funktionalit\u00e4t:</p> <pre><code>import pytest\nfrom d_back.server import WebSocketServer\n\n@pytest.mark.asyncio\nasync def test_server_startup():\n    \"\"\"Test server starts and stops correctly.\"\"\"\n    server = WebSocketServer(port=3001, host=\"localhost\")\n    await server.start()\n\n    # Test server is running\n    assert server.websocket is not None\n\n    # Clean shutdown\n    await server.stop()\n</code></pre>"},{"location":"de/developer-guide/#beitragsrichtlinien","title":"Beitragsrichtlinien","text":""},{"location":"de/developer-guide/#git-workflow","title":"Git-Workflow","text":"<ol> <li> <p>Feature-Branch erstellen:    <pre><code>git checkout -b feature/meine-neue-funktion\n</code></pre></p> </li> <li> <p>\u00c4nderungen vornehmen und committen:    <pre><code>git add .\ngit commit -m \"Add: Meine neue Funktion\"\n</code></pre></p> </li> <li> <p>Zu Ihrem Fork pushen:    <pre><code>git push origin feature/meine-neue-funktion\n</code></pre></p> </li> <li> <p>Pull Request erstellen auf GitHub</p> </li> </ol>"},{"location":"de/developer-guide/#commit-nachrichtenformat","title":"Commit-Nachrichtenformat","text":"<p>Verwenden Sie klare und beschreibende Commit-Nachrichten:</p> <ul> <li><code>Add: Neue Funktion oder Funktionalit\u00e4t</code></li> <li><code>Fix: Fehlerbehebung</code></li> <li><code>Update: Aktualisierung bestehender Funktionalit\u00e4t</code></li> <li><code>Docs: Dokumentations\u00e4nderungen</code></li> <li><code>Test: Tests hinzuf\u00fcgen oder aktualisieren</code></li> <li><code>Refactor: Code-Refactoring</code></li> </ul> <p>Beispiele: <pre><code>Add: OAuth2 validation callback support\nFix: WebSocket connection timeout issue\nUpdate: Improve mock data generator performance\nDocs: Add custom data providers guide\n</code></pre></p>"},{"location":"de/developer-guide/#code-stil","title":"Code-Stil","text":"<ul> <li>Folgen Sie PEP 8 f\u00fcr Python-Code-Stil</li> <li>Verwenden Sie Type Hints f\u00fcr Funktionsparameter und R\u00fcckgabewerte</li> <li>Schreiben Sie Google-Style-Docstrings f\u00fcr alle \u00f6ffentlichen Funktionen</li> <li>Halten Sie Zeilen nach M\u00f6glichkeit unter 100 Zeichen</li> </ul> <p>Beispiel-Docstring: <pre><code>async def on_get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Retrieve user data for a Discord server.\n\n    Args:\n        server_id: Discord server ID (snowflake format)\n\n    Returns:\n        Dictionary mapping user IDs to user data objects\n\n    Example:\n        ```python\n        users = await server.on_get_user_data(\"232769614004748288\")\n        ```\n    \"\"\"\n    pass\n</code></pre></p>"},{"location":"de/developer-guide/#entwicklungsworkflow","title":"Entwicklungsworkflow","text":""},{"location":"de/developer-guide/#lokaler-entwicklungszyklus","title":"Lokaler Entwicklungszyklus","text":"<ol> <li>Code-\u00c4nderungen vornehmen</li> <li>Tests ausf\u00fchren: <code>pytest</code></li> <li>Dokumentation aktualisieren bei Bedarf</li> <li>Lokal testen: <code>python -m d_back</code></li> <li>\u00c4nderungen committen und pushen</li> </ol>"},{"location":"de/developer-guide/#dokumentation-lokal-erstellen","title":"Dokumentation lokal erstellen","text":"<pre><code># Install docs dependencies\npip install -e .[docs]\n\n# Serve docs with live reload\nmkdocs serve\n\n# Build docs\nmkdocs build\n</code></pre> <p>Zugriff auf Docs unter <code>http://127.0.0.1:8000/</code></p>"},{"location":"de/developer-guide/#dokumentationsubersetzung","title":"Dokumentations\u00fcbersetzung","text":""},{"location":"de/developer-guide/#ubersicht","title":"\u00dcbersicht","text":"<p>Die d-back-Dokumentation ist in mehreren Sprachen verf\u00fcgbar (English, Spanish, German). Wir verwenden Crowdin zur kollaborativen Verwaltung von \u00dcbersetzungen. Englisch ist die Quellsprache \u2014 \u00c4nderungen m\u00fcssen zun\u00e4chst in den englischen Dateien vorgenommen werden. \u00dcbersetzungen werden mittels Crowdin und GitHub Actions synchronisiert. Das Projekt verwendet <code>mkdocs-static-i18n</code> mit der Suffix-Struktur (z. B. <code>index.es.md</code>, <code>index.de.md</code>).</p>"},{"location":"de/developer-guide/#crowdin-projekt-einrichtung","title":"Crowdin-Projekt-Einrichtung","text":"<ol> <li>Erstellen Sie ein Crowdin-Projekt unter https://crowdin.com und w\u00e4hlen Sie Markdown als Dateityp.</li> <li>Legen Sie English als Quellsprache fest und f\u00fcgen Sie Spanish (<code>es</code>) und German (<code>de</code>) als Zielsprachen hinzu.</li> <li>Installieren Sie die Crowdin GitHub App im Repository oder konfigurieren Sie Crowdin CLI mit GitHub Actions. Die <code>crowdin.yml</code> in der Repository-Root definiert die Dateimuster und Parser-Optionen.</li> </ol> <p>Ben\u00f6tigte GitHub-Secrets (Repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions):</p> <ul> <li><code>CROWDIN_PROJECT_ID</code> \u2014 Crowdin-Projekt-ID</li> <li><code>CROWDIN_PERSONAL_TOKEN</code> \u2014 Crowdin-Personal-Access-Token</li> </ul>"},{"location":"de/developer-guide/#github-secrets-einrichten","title":"GitHub-Secrets einrichten","text":"<p>Erstellen Sie die erforderlichen Secrets f\u00fcr die Crowdin-Integration:</p> <ol> <li>Crowdin-Anmeldeinformationen erhalten:</li> <li>Project ID: <ul> <li>Melden Sie sich bei Crowdin an</li> <li>Navigieren Sie zu Ihrem Projekt</li> <li>Gehen Sie zu Settings \u2192 API</li> <li>Kopieren Sie die Project ID (numerischer Wert)</li> </ul> </li> <li> <p>Personal Access Token:</p> <ul> <li>Gehen Sie zu Account Settings \u2192 API</li> <li>Klicken Sie auf \"New Token\"</li> <li>Name: \"d-back GitHub Actions\"</li> <li>Scopes: W\u00e4hlen Sie \"Projects\" (read/write)</li> <li>Klicken Sie auf \"Create\"</li> <li>Kopieren Sie das Token sofort (es wird nicht erneut angezeigt)</li> </ul> </li> <li> <p>Secrets zum GitHub-Repository hinzuf\u00fcgen:</p> </li> <li>Navigieren Sie zu: Repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Klicken Sie auf \"New repository secret\"</li> <li>F\u00fcgen Sie <code>CROWDIN_PROJECT_ID</code> hinzu:<ul> <li>Name: <code>CROWDIN_PROJECT_ID</code></li> <li>Value: Ihre Crowdin-Projekt-ID (numerisch)</li> <li>Klicken Sie auf \"Add secret\"</li> </ul> </li> <li> <p>F\u00fcgen Sie <code>CROWDIN_PERSONAL_TOKEN</code> hinzu:</p> <ul> <li>Name: <code>CROWDIN_PERSONAL_TOKEN</code></li> <li>Value: Ihr Crowdin-Personal-Access-Token</li> <li>Klicken Sie auf \"Add secret\"</li> </ul> </li> <li> <p>Secrets \u00fcberpr\u00fcfen:</p> </li> <li>Die Secrets sollten in der Repository-Secrets-Liste erscheinen</li> <li>Secret-Werte sind verborgen und k\u00f6nnen nach der Erstellung nicht angezeigt werden</li> <li>Nur Repository-Administratoren k\u00f6nnen Secrets verwalten</li> </ol> <p>Wichtige Sicherheitshinweise: - Committen Sie niemals Tokens oder Projekt-IDs in das Repository - Tokens haben vollen Zugriff auf Ihr Crowdin-Projekt - halten Sie sie sicher - Rotieren Sie Tokens regelm\u00e4\u00dfig aus Sicherheitsgr\u00fcnden - Verwenden Sie Repository-Secrets, nicht Environment-Secrets (f\u00fcr repository-spezifischen Zugriff)</p>"},{"location":"de/developer-guide/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>\u00dcbersicht:</p> <p>Die Crowdin-Synchronisation ist \u00fcber GitHub Actions automatisiert. Der Workflow ist in <code>.github/workflows/crowdin.yml</code> definiert und verwaltet: - Upload von englischen Quelldateien zu Crowdin bei Dokumentationsaktualisierungen - Download von \u00dcbersetzungen und Erstellung von Pull Requests zur \u00dcberpr\u00fcfung</p> <p>Workflow-Ausl\u00f6ser:</p> <ol> <li>Automatischer Upload (Push zu main):</li> <li>Wird ausgel\u00f6st, wenn Dokumentationsdateien zur main-Branch gepusht werden</li> <li>L\u00e4dt neue/ge\u00e4nderte englische Quelldateien zu Crowdin hoch</li> <li>\u00dcbersetzer werden \u00fcber neuen zu \u00fcbersetzenden Inhalt benachrichtigt</li> <li> <p>L\u00e4uft automatisch - keine manuelle Intervention erforderlich</p> </li> <li> <p>Manueller Download (workflow_dispatch):</p> </li> <li>Wird manuell von der GitHub Actions UI ausgel\u00f6st</li> <li>L\u00e4dt fertiggestellte \u00dcbersetzungen von Crowdin herunter</li> <li>Erstellt einen Pull Request mit \u00dcbersetzungsaktualisierungen</li> <li>Erm\u00f6glicht \u00dcberpr\u00fcfung vor dem Mergen der \u00dcbersetzungen</li> </ol> <p>Funktionsweise:</p> <ol> <li>Quellen-Upload-Prozess:</li> <li>Entwickler merged Dokumentations\u00e4nderungen zur main-Branch</li> <li>GitHub Actions erkennt \u00c4nderungen in <code>docs/**/*.md</code>-Dateien</li> <li>Workflow l\u00e4dt ge\u00e4nderte englische Dateien zu Crowdin hoch</li> <li>Crowdin analysiert \u00c4nderungen und benachrichtigt \u00dcbersetzer</li> <li> <p>\u00dcbersetzer sehen neue/ge\u00e4nderte Strings im Crowdin-Editor</p> </li> <li> <p>\u00dcbersetzungs-Download-Prozess:</p> </li> <li>Maintainer l\u00f6st den Workflow manuell von der GitHub Actions UI aus</li> <li>Workflow l\u00e4dt fertiggestellte \u00dcbersetzungen von Crowdin herunter</li> <li>Erstellt einen neuen Branch: <code>crowdin-translations</code></li> <li>Erstellt einen Pull Request mit Titel: \"docs: update translations from Crowdin\"</li> <li>PR enth\u00e4lt Labels: documentation, translations, crowdin</li> <li>Maintainer \u00fcberpr\u00fcft und merged den PR</li> </ol> <p>Workflow testen:</p> <ol> <li>Quellen-Upload testen:</li> <li>Machen Sie eine kleine \u00c4nderung an einer englischen Dokumentationsdatei (z.B.: f\u00fcgen Sie einen Satz zu <code>docs/index.md</code> hinzu)</li> <li>Committen und pushen Sie zur main-Branch</li> <li>Navigieren Sie zu: Repository \u2192 Actions \u2192 Crowdin Sync workflow</li> <li>\u00dcberpr\u00fcfen Sie, dass der Workflow erfolgreich l\u00e4uft</li> <li> <p>Pr\u00fcfen Sie das Crowdin-Projekt, um zu best\u00e4tigen, dass der neue Inhalt erscheint</p> </li> <li> <p>\u00dcbersetzungs-Download testen:</p> </li> <li>Stellen Sie sicher, dass einige \u00dcbersetzungen in Crowdin fertiggestellt sind</li> <li>Navigieren Sie zu: Repository \u2192 Actions \u2192 Crowdin Sync workflow</li> <li>Klicken Sie auf die Schaltfl\u00e4che \"Run workflow\"</li> <li>W\u00e4hlen Sie den Branch \"main\"</li> <li>Klicken Sie auf \"Run workflow\"</li> <li>Warten Sie, bis der Workflow abgeschlossen ist</li> <li>Pr\u00fcfen Sie den Pull Requests-Tab auf einen neuen PR von Crowdin</li> <li>\u00dcberpr\u00fcfen Sie den PR und mergen Sie ihn, wenn die \u00dcbersetzungen korrekt aussehen</li> </ol> <p>Workflow \u00fcberwachen:</p> <ul> <li>Workflow-Ausf\u00fchrungen anzeigen: Repository \u2192 Actions \u2192 Crowdin Sync</li> <li>Workflow-Status pr\u00fcfen: Siehe Status-Badge (kann zum README hinzugef\u00fcgt werden)</li> <li>Workflow-Logs: Klicken Sie auf eine beliebige Workflow-Ausf\u00fchrung, um detaillierte Logs zu sehen</li> <li>Fehlgeschlagene Workflows: Fehlermeldungen erscheinen in Logs mit Troubleshooting-Informationen</li> </ul> <p>Workflow-Probleme beheben:</p> <p>Problem: Workflow schl\u00e4gt mit \"Authentication failed\" fehl - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass die Secrets <code>CROWDIN_PROJECT_ID</code> und <code>CROWDIN_PERSONAL_TOKEN</code> korrekt gesetzt sind - L\u00f6sung: Pr\u00fcfen Sie, dass das Personal Access Token den Scope \"Projects\" aktiviert hat - L\u00f6sung: Stellen Sie sicher, dass das Token nicht abgelaufen ist (Tokens laufen standardm\u00e4\u00dfig nicht ab, k\u00f6nnen aber widerrufen werden)</p> <p>Problem: Workflow l\u00e4uft, aber keine Dateien werden zu Crowdin hochgeladen - L\u00f6sung: Pr\u00fcfen Sie, dass ge\u00e4nderte Dateien mit den Mustern in <code>crowdin.yml</code> \u00fcbereinstimmen (<code>/docs/**/*.md</code>) - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass Dateien nicht in der Ignorierliste in <code>crowdin.yml</code> sind - L\u00f6sung: Pr\u00fcfen Sie Workflow-Logs auf Dateierkennungsmeldungen</p> <p>Problem: \u00dcbersetzungs-PR wird nicht erstellt - L\u00f6sung: Stellen Sie sicher, dass der Workflow \u00fcber workflow_dispatch (manuelle Ausl\u00f6sung) ausgel\u00f6st wurde - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass es fertiggestellte \u00dcbersetzungen in Crowdin zum Download gibt - L\u00f6sung: Pr\u00fcfen Sie, dass GitHub Actions Schreibberechtigungen f\u00fcr Pull Requests hat - L\u00f6sung: \u00dcberpr\u00fcfen Sie Workflow-Logs auf PR-Erstellungsfehler</p> <p>Problem: PR erstellt, aber \u00dcbersetzungen fehlen - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass \u00dcbersetzungen in Crowdin als \"approved\" markiert sind (falls Approval-Workflow aktiviert ist) - L\u00f6sung: Pr\u00fcfen Sie, dass \u00dcbersetzungsdateien mit dem Muster in <code>crowdin.yml</code> \u00fcbereinstimmen - L\u00f6sung: Stellen Sie sicher, dass \u00dcbersetzer \u00dcbersetzungen f\u00fcr alle Sprachen (Spanisch und Deutsch) fertiggestellt haben</p> <p>Lokalisierungs-Branch:</p> <p>Der Workflow erstellt einen Branch namens <code>crowdin-translations</code> f\u00fcr \u00dcbersetzungsaktualisierungen: - Dieser Branch wird automatisch vom Workflow erstellt/aktualisiert - Jeder \u00dcbersetzungs-Download \u00fcberschreibt diesen Branch mit den neuesten \u00dcbersetzungen - Der Branch wird als Quelle f\u00fcr den Pull Request verwendet - Nach dem Mergen des PR kann der Branch gel\u00f6scht werden (GitHub bietet diese Option an) - Der Workflow erstellt den Branch beim n\u00e4chsten \u00dcbersetzungs-Download neu</p> <p>Best Practices: - F\u00fchren Sie \u00dcbersetzungs-Downloads regelm\u00e4\u00dfig (z.B. w\u00f6chentlich) durch, um \u00dcbersetzungen aktuell zu halten - \u00dcberpr\u00fcfen Sie \u00dcbersetzungs-PRs sorgf\u00e4ltig vor dem Mergen - Testen Sie den Dokumentations-Build lokal nach dem Mergen von \u00dcbersetzungen - Koordinieren Sie mit \u00dcbersetzern \u00fcber \u00dcbersetzungsfristen - Verwenden Sie Crowdins Approval-Workflow f\u00fcr Qualit\u00e4tskontrolle (optional)</p>"},{"location":"de/developer-guide/#ubersetzungs-workflow","title":"\u00dcbersetzungs-Workflow","text":"<ol> <li>\u00c4nderungen an den englischen Quelldateien (z. B. <code>docs/index.md</code>, <code>docs/getting-started.md</code>) vornehmen und einen Pull Request er\u00f6ffnen.</li> <li>Nach dem Merge in <code>main</code> erkennt Crowdin neue/ge\u00e4nderte Strings und benachrichtigt \u00dcbersetzer.</li> <li>\u00dcbersetzer arbeiten im Crowdin-Editor; Crowdin bewahrt Codebl\u00f6cke, Inline-Code und Markdown-Formatierung.</li> <li>\u00dcbersetzungen werden via Crowdin \u2194 GitHub oder GitHub Actions zur\u00fcck in das Repository synchronisiert. Crowdin erzeugt PRs mit \u00dcbersetzungs-Updates, die Maintainer pr\u00fcfen und mergen.</li> </ol>"},{"location":"de/developer-guide/#dateistruktur","title":"Dateistruktur","text":"<ul> <li>Englisch (Quelle): <code>docs/index.md</code>, <code>docs/getting-started.md</code>, <code>docs/user-guide/configuration.md</code></li> <li>Spanish: <code>docs/index.es.md</code>, <code>docs/getting-started.es.md</code>, <code>docs/user-guide/configuration.es.md</code></li> <li>German: <code>docs/index.de.md</code>, <code>docs/getting-started.de.md</code>, <code>docs/user-guide/configuration.de.md</code></li> </ul>"},{"location":"de/developer-guide/#was-wird-ubersetzt","title":"Was wird \u00fcbersetzt","text":"<p>Zu \u00fcbersetzen sind:</p> <ul> <li>Erl\u00e4uternder Text, \u00dcberschriften und Titel</li> <li>Anwendernahe Meldungen und Anleitungen</li> <li>Beschreibungen von Beispielen (nicht die Codebl\u00f6cke)</li> </ul> <p>Nicht zu \u00fcbersetzen sind:</p> <ul> <li>Codebl\u00f6cke und Inline-Code</li> <li>Funktions- und Klassennamen</li> <li>Dateipfade und URLs</li> <li>Konfigurationsschl\u00fcssel und -werte</li> <li>Projekt- und Fachbegriffe (z. B. d-back, d-zone, WebSocket, OAuth2)</li> </ul>"},{"location":"de/developer-guide/#ausgeschlossene-dateien","title":"Ausgeschlossene Dateien","text":"<p>Die folgenden Dateien sind von Crowdin-\u00dcbersetzungen ausgeschlossen:</p> <ul> <li><code>docs/VERCEL_SETUP.md</code></li> <li><code>docs/TESTING_I18N.md</code></li> <li><code>docs/.pages</code></li> <li>API-Referenzdateien (durch mkdocstrings generiert)</li> </ul>"},{"location":"de/developer-guide/#ubersetzungen-lokal-testen","title":"\u00dcbersetzungen lokal testen","text":"<pre><code># Install documentation dependencies\npip install -e .[docs]\n\n# Serve documentation locally with all languages\nmkdocs serve\n\n# Build documentation (generates site/ directory with all languages)\nmkdocs build\n</code></pre> <p>Sprachspezifische Vorschau:</p> <ul> <li>English: <code>http://127.0.0.1:8000/</code></li> <li>Spanish: <code>http://127.0.0.1:8000/es/</code></li> <li>German: <code>http://127.0.0.1:8000/de/</code></li> </ul>"},{"location":"de/developer-guide/#best-practices-fur-ubersetzungen","title":"Best Practices f\u00fcr \u00dcbersetzungen","text":"<ul> <li>Verwenden Sie formale Anrede (Sie) im Nutzertext.</li> <li>Lassen Sie Fachbegriffe und Projektnamen im Englischen.</li> <li>Bewahren Sie Markdown-Formatierung, Codebl\u00f6cke und Inline-Code.</li> <li>Testen Sie \u00dcbersetzungen lokal vor Einreichen.</li> </ul>"},{"location":"de/developer-guide/#neue-sprachen-hinzufugen","title":"Neue Sprachen hinzuf\u00fcgen","text":"<p>So f\u00fcgen Sie eine neue Sprache hinzu:</p> <ol> <li>Aktualisieren Sie <code>mkdocs.yml</code>, um die neue Sprache in der i18n-Konfiguration hinzuzuf\u00fcgen.</li> <li>Erg\u00e4nzen Sie <code>crowdin.yml</code> um den neuen <code>two_letters_code</code>.</li> <li>F\u00fcgen Sie die Sprache in den Crowdin-Projekteinstellungen hinzu.</li> <li>Erstellen Sie initiale \u00dcbersetzungsdateien nach dem Suffix-Pattern.</li> <li>Aktualisieren Sie diese Dokumentationssektion mit Details zur neuen Sprache.</li> </ol>"},{"location":"de/developer-guide/#fehlerbehebung","title":"Fehlerbehebung","text":"<p>H\u00e4ufige Probleme:</p> <ul> <li>\u00dcbersetzungen erscheinen nicht in Crowdin: Pr\u00fcfen Sie, ob die Muster in <code>crowdin.yml</code> mit den committeten Dateien \u00fcbereinstimmen und ob Dateien nicht in <code>ignore</code> gelistet sind.</li> <li>\u00dcbersetzungen werden nicht nach GitHub synchronisiert: Pr\u00fcfen Sie die Logs von GitHub Actions und die gesetzten Secrets <code>CROWDIN_PROJECT_ID</code> und <code>CROWDIN_PERSONAL_TOKEN</code>.</li> <li>Formatierungsprobleme: \u00dcberpr\u00fcfen Sie die \u00dcbersetzung im Crowdin-Editor und stellen Sie sicher, dass Codebl\u00f6cke erhalten bleiben.</li> </ul>"},{"location":"de/developer-guide/#ressourcen","title":"Ressourcen","text":"<ul> <li>Crowdin documentation: https://support.crowdin.com/</li> <li>mkdocs-static-i18n: https://github.com/ultrabug/mkdocs-static-i18n</li> <li>Material for MkDocs i18n: https://squidfunk.github.io/mkdocs-material/setup/changing-the-language/</li> </ul>"},{"location":"de/developer-guide/#fehlersuche","title":"Fehlersuche","text":""},{"location":"de/developer-guide/#debug-protokollierung","title":"Debug-Protokollierung","text":"<p>F\u00fcgen Sie Print-Anweisungen hinzu oder verwenden Sie Logging:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nlogger.debug(\"Starting WebSocket server...\")\n</code></pre>"},{"location":"de/developer-guide/#websocket-verbindungen-debuggen","title":"WebSocket-Verbindungen debuggen","text":"<p>Verwenden Sie die Browser-Konsole oder WebSocket-Tools:</p> <pre><code>const ws = new WebSocket('ws://localhost:3000');\nws.onopen = () =&gt; console.log('Connected');\nws.onmessage = (event) =&gt; console.log('Received:', event.data);\nws.onerror = (error) =&gt; console.error('Error:', error);\n</code></pre>"},{"location":"de/developer-guide/#release-prozess","title":"Release-Prozess","text":"<p>Releases werden von Projekt-Maintainern verwaltet:</p> <ol> <li>Versionsnummer in <code>setup.cfg</code> aktualisieren</li> <li>CHANGELOG aktualisieren (falls vorhanden)</li> <li>Git-Tag erstellen: <code>git tag v0.0.X</code></li> <li>Tag pushen: <code>git push origin v0.0.X</code></li> <li>GitHub Actions baut automatisch und ver\u00f6ffentlicht auf PyPI</li> </ol>"},{"location":"de/developer-guide/#dokumentationsversionierung","title":"Dokumentationsversionierung","text":"<p>d-back verwendet mike f\u00fcr die Dokumentationsversionierung, das sich nahtlos in Material for MkDocs integriert und einen Versionsausw\u00e4hler in der Dokumentation bereitstellt. Die Versionierungsstrategie verwendet drei Arten von Versionen:</p> <ul> <li>Stabile Versionen: Erstellt aus Git-Tags (z. B. 0.0.14, 0.1.0, 1.0.0)</li> <li>Prerelease 'latest': Verfolgt den main-Branch (produktionsbereit, aber noch nicht getaggt)</li> <li>Prerelease 'dev': Verfolgt den develop-Branch (Entwicklung/Tests)</li> </ul> <p>Der Versionsausw\u00e4hler erscheint in der oberen Navigationsleiste und erm\u00f6glicht es Benutzern, zwischen verschiedenen Dokumentationsversionen zu wechseln.</p>"},{"location":"de/developer-guide/#versionierungsstrategie","title":"Versionierungsstrategie","text":"<p>1. Stabile Versionen (aus Tags)</p> <p>Erstellt, wenn eine neue Version getaggt wird:</p> <ul> <li>Die Versionsnummer entspricht dem Git-Tag ohne das 'v'-Pr\u00e4fix</li> <li>Diese Versionen sind permanent und unver\u00e4nderlich</li> <li>Beispiel: Tag v0.0.15 erstellt Dokumentationsversion 0.0.15</li> <li>Befehl: <code>mike deploy 0.0.15 --push</code></li> </ul> <p>2. Latest Prerelease (main-Branch)</p> <p>Repr\u00e4sentiert den aktuellen Zustand des main-Branches:</p> <ul> <li>Alias: 'latest'</li> <li>Wird bei jedem Push auf main aktualisiert</li> <li>Dies ist die Standardversion, die Benutzer sehen</li> <li>Befehl: <code>mike deploy &lt;commit-sha&gt; latest --push --update-aliases</code></li> </ul> <p>3. Dev Prerelease (develop-Branch)</p> <p>Repr\u00e4sentiert den aktuellen Zustand des develop-Branches:</p> <ul> <li>Alias: 'dev'</li> <li>Wird bei jedem Push auf develop aktualisiert</li> <li>Wird zum Testen von Dokumentations\u00e4nderungen vor der Ver\u00f6ffentlichung verwendet</li> <li>Befehl: <code>mike deploy &lt;commit-sha&gt; dev --push --update-aliases</code></li> </ul>"},{"location":"de/developer-guide/#lokales-testen","title":"Lokales Testen","text":"<p>Testen Sie mike lokal vor dem Deployment:</p> <pre><code># Dokumentationsabh\u00e4ngigkeiten installieren (beinhaltet mike)\npip install -e .[docs]\n\n# Testversion lokal deployen (kein Push zum Remote)\nmike deploy 0.0.14-test\n\n# Mit einem Alias deployen\nmike deploy 0.0.15-test latest --update-aliases\n\n# Standardversion festlegen (was Benutzer sehen, wenn sie die Docs besuchen)\nmike set-default latest\n\n# Alle deployten Versionen auflisten\nmike list\n\n# Versionierte Dokumentation lokal bereitstellen\nmike serve\n# Besuchen Sie http://localhost:8000 zum Testen\n# Verwenden Sie den Versionsausw\u00e4hler in der oberen Navigation zum Wechseln zwischen Versionen\n\n# Testversion l\u00f6schen\nmike delete 0.0.14-test\n</code></pre> <p>Wichtige Hinweise f\u00fcr lokales Testen:</p> <ul> <li>Mike erstellt lokal einen <code>gh-pages</code>-Branch zur Speicherung der versionierten Dokumentation</li> <li>Verwenden Sie Testversionsnamen (z. B. 0.0.14-test), um Konflikte mit Produktionsversionen zu vermeiden</li> <li>Das <code>--push</code>-Flag wird beim lokalen Testen weggelassen, um versehentliches Deployment zu verhindern</li> <li>Testen Sie immer die Funktionalit\u00e4t des Versionsausw\u00e4hlers vor dem Deployment</li> <li>\u00dcberpr\u00fcfen Sie, dass alle drei Sprachen (English, Spanish, German) in jeder Version korrekt funktionieren</li> </ul>"},{"location":"de/developer-guide/#versions-aliase","title":"Versions-Aliase","text":"<p>Aliase sind symbolische Namen, die auf bestimmte Versionen verweisen:</p> <ul> <li>G\u00e4ngige Aliase: 'latest' (main-Branch), 'dev' (develop-Branch), 'stable' (letzte stabile Version)</li> <li>Aliase k\u00f6nnen aktualisiert werden, um auf verschiedene Versionen zu verweisen</li> <li>Beispiel: Nach der Ver\u00f6ffentlichung von 0.1.0, 'stable'-Alias aktualisieren: <code>mike deploy 0.1.0 stable --update-aliases</code></li> <li>Das <code>--update-aliases</code>-Flag aktualisiert bestehende Aliase, anstatt Duplikate zu erstellen</li> </ul>"},{"location":"de/developer-guide/#deployment-workflow","title":"Deployment-Workflow","text":"<p>Manueller Deployment-Prozess (f\u00fcr lokale Tests oder wenn ben\u00f6tigt):</p> <p>F\u00fcr stabile Releases: <pre><code># Nach Erstellung eines Git-Tags (z. B. v0.0.15)\nmike deploy 0.0.15 stable --push --update-aliases\nmike set-default stable --push\n</code></pre></p> <p>F\u00fcr main-Branch-Updates: <pre><code># Nach Merge zu main\nmike deploy &lt;commit-sha&gt; latest --push --update-aliases\n</code></pre></p> <p>F\u00fcr develop-Branch-Updates: <pre><code># Nach Merge zu develop\nmike deploy &lt;commit-sha&gt; dev --push --update-aliases\n</code></pre></p> <p>Hinweis: Diese Befehle sind f\u00fcr manuelles Deployment. Automatisiertes Deployment \u00fcber GitHub Actions ist der empfohlene Ansatz f\u00fcr Produktion (siehe \"Automatisiertes Deployment mit GitHub Actions\" unten).</p>"},{"location":"de/developer-guide/#automatisiertes-deployment-mit-github-actions","title":"Automatisiertes Deployment mit GitHub Actions","text":"<p>Das Deployment der Dokumentation ist \u00fcber GitHub Actions automatisiert. Der Workflow ist in <code>.github/workflows/docs.yml</code> definiert und verwaltet alle Produktions-Deployments.</p> <p>\u00dcbersicht:</p> <ul> <li>Dokumentation wird automatisch bei Pushes zu main, develop und Tag-Erstellung deployed</li> <li>Der Workflow verwaltet die Versionierung mit mike und deployed zu GitHub Pages</li> <li>Manuelles Deployment mit mike lokal ist weiterhin f\u00fcr Tests verf\u00fcgbar</li> <li>Alle drei Sprachen (Englisch, Spanisch, Deutsch) werden zusammen gebaut und deployed</li> </ul> <p>Automatische Ausl\u00f6ser:</p> <ol> <li>Tag-Erstellung (v*): Erstellt eine stabile Version</li> <li>Beispiel: Tag <code>v0.0.15</code> deployed Version <code>0.0.15</code> mit Alias <code>stable</code></li> <li>Stabile Versionen sind permanent und unver\u00e4nderlich</li> <li>Wird als Standardversion festgelegt, die Benutzer sehen</li> <li>Ausgef\u00fchrter Befehl: <code>mike deploy 0.0.15 stable --push --update-aliases</code></li> <li> <p>Ausgef\u00fchrter Befehl: <code>mike set-default stable --push</code></p> </li> <li> <p>Push zu main: Deployed 'latest' Prerelease</p> </li> <li>Repr\u00e4sentiert den aktuellen produktionsbereiten Zustand</li> <li>Wird nicht als Standard festgelegt (stabile Releases bleiben die Standardversion)</li> <li>Verwendet die stabile Versionskennung 'edge'</li> <li> <p>Ausgef\u00fchrter Befehl: <code>mike deploy edge latest --push --update-aliases</code></p> </li> <li> <p>Push zu develop: Deployed 'dev' Prerelease</p> </li> <li>Repr\u00e4sentiert den aktuellen Entwicklungszustand</li> <li>Wird zum Testen von Dokumentations\u00e4nderungen vor der Ver\u00f6ffentlichung verwendet</li> <li>Wird nicht als Standard festgelegt (dev ist nur zum Testen)</li> <li>Verwendet die stabile Versionskennung 'development'</li> <li> <p>Ausgef\u00fchrter Befehl: <code>mike deploy development dev --push --update-aliases</code></p> </li> <li> <p>Manuelle Ausl\u00f6sung: Verf\u00fcgbar \u00fcber <code>workflow_dispatch</code> in der GitHub Actions UI</p> </li> <li>N\u00fctzlich zum Testen oder erneuten Deployment von Dokumentation</li> <li>Zugriff \u00fcber: Repository \u2192 Actions tab \u2192 Documentation workflow \u2192 Run workflow</li> </ol> <p>Workflow-Prozess:</p> <ol> <li>Checkout repository: Holt die vollst\u00e4ndige Git-Historie (erforderlich, damit mike auf den gh-pages-Branch zugreifen kann)</li> <li>Set up Python 3.11: Installiert Python mit pip-Caching f\u00fcr schnellere Builds</li> <li>Install dependencies: F\u00fchrt <code>pip install -e .[docs]</code> aus, um mkdocs-material, mkdocs-static-i18n, mkdocstrings und mike aus setup.cfg zu installieren</li> <li>Configure git: Richtet den Git-Benutzer f\u00fcr automatische Commits zum gh-pages-Branch ein</li> <li>Determine version: Analysiert den Ausl\u00f6sertyp (tag, main oder develop), um die Deployment-Strategie zu bestimmen</li> <li>Deploy with mike: F\u00fchrt den entsprechenden mike-Befehl aus, um versionierte Dokumentation zum gh-pages-Branch zu deployen</li> <li>GitHub Pages stellt aktualisierte Dokumentation bereit: \u00c4nderungen erscheinen innerhalb von 1-2 Minuten unter https://nntin.github.io/d-back/</li> </ol> <p>Versionsstrategie:</p> <ul> <li>Stabile Versionen (von Tags): Permanent, unver\u00e4nderlich, repr\u00e4sentieren offizielle Releases; werden immer als Standard festgelegt</li> <li>'latest' Alias: Bei jedem Push zum main-Branch aktualisiert; im Versionsausw\u00e4hler verf\u00fcgbar, aber nicht als Standard festgelegt</li> <li>'dev' Alias: Bei jedem Push zum develop-Branch aktualisiert, nur zum Testen (wird nie als Standard festgelegt)</li> <li>Der Versionsausw\u00e4hler in der Dokumentationsnavigation zeigt alle verf\u00fcgbaren Versionen</li> </ul> <p>Deployments \u00fcberwachen:</p> <ul> <li>Workflow-Ausf\u00fchrungen anzeigen: Repository \u2192 Actions tab \u2192 Documentation workflow</li> <li>Deployment-Status pr\u00fcfen: Siehe den Documentation Status Badge in README.md</li> <li>Workflow-Logs: Detaillierte Deployment-Informationen verf\u00fcgbar in jeder Workflow-Ausf\u00fchrung</li> <li>Fehlgeschlagene Deployments: Fehlermeldungen erscheinen in Workflow-Logs mit Troubleshooting-Informationen</li> </ul> <p>GitHub Pages-Konfiguration:</p> <p>Erstmalige Einrichtung (nur einmal erforderlich):</p> <ol> <li>Gehen Sie zu: Repository Settings \u2192 Pages</li> <li>Setzen Sie Source: Deploy from a branch</li> <li>Setzen Sie Branch: <code>gh-pages</code> (automatisch bei erster Workflow-Ausf\u00fchrung erstellt)</li> <li>Klicken Sie auf Save</li> <li>Dokumentation wird verf\u00fcgbar sein unter: https://nntin.github.io/d-back/</li> <li>\u00c4nderungen erscheinen innerhalb von 1-2 Minuten nach Abschluss des Workflows</li> </ol> <p>Manuelles Deployment (falls ben\u00f6tigt):</p> <p>Der automatisierte Workflow verwaltet die meisten Deployment-Szenarien. Manuelles Deployment kann erforderlich sein f\u00fcr:</p> <ul> <li>Testen von Dokumentations\u00e4nderungen lokal vor dem Pushen</li> <li>Beheben von Deployment-Problemen, die lokales Troubleshooting erfordern</li> <li>Deployment von einem lokalen Branch zu Testzwecken</li> </ul> <p>Verwenden Sie die mike-Befehle, die im Unterabschnitt \"Deployment-Workflow\" oben dokumentiert sind, f\u00fcr manuelles Deployment.</p> <p>Workflow-Probleme beheben:</p> <p>Problem: Workflow schl\u00e4gt bei git push zu gh-pages fehl - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass Actions Schreibberechtigungen haben   - Gehen Sie zu: Settings \u2192 Actions \u2192 General \u2192 Workflow permissions   - W\u00e4hlen Sie: \"Read and write permissions\"   - Klicken Sie auf Save</p> <p>Problem: Deployed Version erscheint nicht im Versionsausw\u00e4hler - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass die Ausl\u00f6serbedingung mit dem erwarteten Branch oder Tag \u00fcbereinstimmte - L\u00f6sung: Pr\u00fcfen Sie Workflow-Logs, um zu best\u00e4tigen, dass das Deployment erfolgreich abgeschlossen wurde - L\u00f6sung: Stellen Sie sicher, dass mindestens zwei Versionen deployed sind, damit der Ausw\u00e4hler erscheint</p> <p>Problem: Alter Inhalt erscheint in neu deployter Version - L\u00f6sung: Leeren Sie den Browser-Cache und laden Sie neu - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass der Workflow erfolgreich im Actions tab abgeschlossen wurde - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass die korrekte Version deployed wurde, indem Sie die Workflow-Logs pr\u00fcfen</p> <p>Problem: gh-pages-Branch wurde nicht erstellt - L\u00f6sung: \u00dcberpr\u00fcfen Sie Workflow-Logs auf Fehler w\u00e4hrend des ersten Deployments - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass Actions Schreibberechtigungen haben (siehe erstes Problem oben) - L\u00f6sung: L\u00f6sen Sie den Workflow manuell \u00fcber workflow_dispatch aus, um es erneut zu versuchen</p>"},{"location":"de/developer-guide/#best-practices","title":"Best Practices","text":"<ul> <li>Testen Sie immer lokal mit <code>mike serve</code> vor dem Deployment</li> <li>Verwenden Sie Semantic Versioning f\u00fcr stabile Releases (MAJOR.MINOR.PATCH)</li> <li>Behalten Sie 'latest' als Standardversion f\u00fcr Benutzer bei</li> <li>Dokumentieren Sie Breaking Changes in versionsspezifischen Release Notes</li> <li>Behalten Sie mindestens die letzten 3 stabilen Versionen als Referenz</li> <li>L\u00f6schen Sie sehr alte Versionen, um die Versionsliste \u00fcberschaubar zu halten: <code>mike delete 0.0.1 --push</code></li> <li>\u00dcberpr\u00fcfen Sie, dass mehrsprachige Unterst\u00fctzung in allen deployten Versionen funktioniert</li> </ul>"},{"location":"de/developer-guide/#fehlerbehebung_1","title":"Fehlerbehebung","text":"<p>Problem: Versionsausw\u00e4hler erscheint nicht - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass <code>extra.version.provider: mike</code> in mkdocs.yml gesetzt ist (bereits konfiguriert in Zeile 137) - L\u00f6sung: Stellen Sie sicher, dass mindestens zwei Versionen deployed sind - L\u00f6sung: Pr\u00fcfen Sie, dass das Material-Theme richtig konfiguriert ist</p> <p>Problem: Versionen werden nicht deployed - L\u00f6sung: Stellen Sie sicher, dass mike installiert ist: <code>pip install -e .[docs]</code> - L\u00f6sung: Pr\u00fcfen Sie, dass der gh-pages-Branch existiert - L\u00f6sung: \u00dcberpr\u00fcfen Sie, dass das Git-Remote richtig konfiguriert ist</p> <p>Problem: Sprachausw\u00e4hler kollidiert mit Versionsausw\u00e4hler - L\u00f6sung: Beide Ausw\u00e4hler sollten zusammenarbeiten; \u00fcberpr\u00fcfen Sie die mkdocs-static-i18n-Konfiguration - L\u00f6sung: Testen Sie mit <code>mike serve</code>, um sicherzustellen, dass beide Ausw\u00e4hler erscheinen</p> <p>Problem: Alter Inhalt erscheint in neuer Version - L\u00f6sung: Verwenden Sie <code>mike deploy --update-aliases</code>, um Aliase zu aktualisieren - L\u00f6sung: Browser-Cache leeren - L\u00f6sung: Neu bauen mit <code>mkdocs build --clean</code> vor dem Deployment</p>"},{"location":"de/developer-guide/#ressourcen_1","title":"Ressourcen","text":"<ul> <li>Mike documentation: https://github.com/jimporter/mike</li> <li>Material for MkDocs versioning: https://squidfunk.github.io/mkdocs-material/setup/setting-up-versioning/</li> <li>Semantic Versioning: https://semver.org/</li> </ul> <p>Hinweis: Das Deployment der Dokumentation ist vollst\u00e4ndig \u00fcber GitHub Actions automatisiert. Siehe den Abschnitt \"Automatisiertes Deployment mit GitHub Actions\" oben f\u00fcr Details dar\u00fcber, wie der Workflow die Dokumentation bei Branch-Pushes und Tag-Erstellung deployed.</p>"},{"location":"de/developer-guide/#zukunftige-verbesserungen","title":"Zuk\u00fcnftige Verbesserungen","text":"<p>Bereiche, in denen wir Beitr\u00e4ge begr\u00fc\u00dfen:</p> <ul> <li>Redis-Unterst\u00fctzung: Verteiltes Caching und Pub/Sub</li> <li>Metriken und Monitoring: Prometheus/Grafana-Integration</li> <li>Verbesserte Authentifizierung: Mehr OAuth2-Anbieter</li> <li>Session-Management: Session-Persistenz und -Erneuerung</li> <li>Last-Tests: Performance-Tests und Benchmarking</li> <li>Internationalisierung: Mehrsprachige Fehlermeldungen</li> </ul>"},{"location":"de/developer-guide/#hilfe-erhalten","title":"Hilfe erhalten","text":"<p>Ben\u00f6tigen Sie Hilfe bei der Entwicklung?</p> <ul> <li>GitHub Issues: Bugs melden oder Features anfragen</li> <li>GitHub Discussions: Fragen stellen oder Ideen diskutieren</li> <li>Dokumentation: Benutzerhandbuch und API-Referenz \u00fcberpr\u00fcfen</li> <li>Quellcode: Code auf GitHub lesen</li> </ul>"},{"location":"de/developer-guide/#lizenz","title":"Lizenz","text":"<p>d-back ist unter der MIT-Lizenz lizenziert. Siehe die LICENSE-Datei f\u00fcr Details.</p>"},{"location":"de/developer-guide/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<ul> <li>Benutzerhandbuch: Erfahren Sie, wie Sie d-back verwenden</li> <li>API-Referenz: Detaillierte API-Dokumentation</li> <li>Erste Schritte: Installieren und Ausf\u00fchren von d-back</li> </ul>"},{"location":"de/getting-started/","title":"Erste Schritte","text":"<p>Willkommen bei d-back! Diese Anleitung hilft Ihnen, den WebSocket-Server, der die d-zone Ambient-Life-Simulation antreibt, in Betrieb zu nehmen. Am Ende dieser Anleitung haben Sie d-back installiert und bereitstellen Mock-Discord-Daten \u00fcber WebSocket-Verbindungen.</p>"},{"location":"de/getting-started/#voraussetzungen","title":"Voraussetzungen","text":"<p>Bevor Sie beginnen, stellen Sie sicher, dass Sie Folgendes haben:</p> <ul> <li>Python 3.8 oder h\u00f6her auf Ihrem System installiert</li> <li>pip-Paketmanager (kommt normalerweise mit Python)</li> <li>Grundverst\u00e4ndnis von async/await in Python (hilfreich, aber nicht erforderlich)</li> <li>Git (optional, nur bei Installation aus dem Quellcode erforderlich)</li> </ul>"},{"location":"de/getting-started/#installation","title":"Installation","text":"<p>d-back kann auf verschiedene Arten installiert werden. W\u00e4hlen Sie die Methode, die am besten zu Ihren Bed\u00fcrfnissen passt:</p>"},{"location":"de/getting-started/#von-pypi-empfohlen","title":"Von PyPI (Empfohlen)","text":"<p>Der einfachste Weg, d-back zu installieren, ist \u00fcber den Python Package Index:</p> <pre><code>pip install d-back\n</code></pre>"},{"location":"de/getting-started/#aus-dem-quellcode","title":"Aus dem Quellcode","text":"<p>F\u00fcr die neueste Entwicklungsversion oder wenn Sie beitragen m\u00f6chten:</p> <ol> <li> <p>Repository klonen:    <pre><code>git clone https://github.com/NNTin/d-back.git\ncd d-back\n</code></pre></p> </li> <li> <p>Virtuelle Umgebung erstellen (empfohlen):</p> </li> </ol> <p>=== \"Windows\"        <pre><code>python -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> <p>=== \"macOS/Linux\"        <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre></p> <ol> <li>Im Entwicklungsmodus installieren:    <pre><code>pip install -e .\n</code></pre></li> </ol>"},{"location":"de/getting-started/#mit-dokumentationsabhangigkeiten","title":"Mit Dokumentationsabh\u00e4ngigkeiten","text":"<p>Wenn Sie planen, die Dokumentation lokal zu erstellen:</p> <pre><code>pip install d-back[docs]\n</code></pre> <p>Oder aus dem Quellcode:</p> <pre><code>pip install -e .[docs]\n</code></pre>"},{"location":"de/getting-started/#installation-uberprufen","title":"Installation \u00fcberpr\u00fcfen","text":"<p>Nach der Installation \u00fcberpr\u00fcfen Sie, ob d-back korrekt installiert ist:</p> <pre><code>d_back --version\n</code></pre> <p>Sie sollten eine Ausgabe \u00e4hnlich wie diese sehen:</p> <pre><code>d-back version 0.0.14\n</code></pre> <p>Fehlerbehebung</p> <p>Wenn der Befehl <code>d_back</code> nicht gefunden wird, stellen Sie sicher, dass Ihr Python-Skriptverzeichnis in Ihrem PATH ist. Alternativ k\u00f6nnen Sie d-back als Python-Modul ausf\u00fchren: <code>python -m d_back --version</code></p>"},{"location":"de/getting-started/#schnellstart","title":"Schnellstart","text":"<p>Jetzt, da d-back installiert ist, lassen Sie es uns starten!</p>"},{"location":"de/getting-started/#befehlszeilen-ansatz","title":"Befehlszeilen-Ansatz","text":"<p>Der einfachste Weg, den Server zu starten, ist mit Standardeinstellungen:</p> <pre><code># Start with defaults (localhost:3000)\nd_back\n</code></pre> <p>Oder f\u00fchren Sie es als Python-Modul aus:</p> <pre><code>python -m d_back\n</code></pre> <p>Sie sollten eine Konsolenausgabe \u00e4hnlich wie diese sehen:</p> <pre><code>WebSocket server started on ws://localhost:3000\nServing static files from: /path/to/d_back/dist\nPress Ctrl+C to stop the server\n</code></pre> <p>Standardeinstellungen</p> <p>Standardm\u00e4\u00dfig l\u00e4uft d-back auf <code>localhost:3000</code> und liefert das integrierte d-zone-Frontend aus statischen Dateien.</p>"},{"location":"de/getting-started/#programmatischer-ansatz","title":"Programmatischer Ansatz","text":"<p>F\u00fcr mehr Kontrolle k\u00f6nnen Sie d-back in Ihrem Python-Code verwenden:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Optional: Set up custom callbacks\n    # server.on_get_user_data(my_user_data_callback)\n    # server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\n# Run the server\nasyncio.run(main())\n</code></pre> <p>Jeder Schritt erkl\u00e4rt: 1. Module importieren: Importieren Sie asyncio f\u00fcr asynchrone Ausf\u00fchrung und die WebSocketServer-Klasse 2. Server erstellen: Instanziieren Sie WebSocketServer mit gew\u00fcnschtem Port und Host 3. Callbacks konfigurieren (optional): Passen Sie Datenquellen mit Callback-Funktionen an 4. Server starten: Rufen Sie <code>await server.start()</code> auf, um Verbindungen zu akzeptieren</p>"},{"location":"de/getting-started/#ihre-erste-websocket-verbindung","title":"Ihre erste WebSocket-Verbindung","text":"<p>Sobald der Server l\u00e4uft, k\u00f6nnen Sie die WebSocket-Verbindung von einem Client aus testen.</p>"},{"location":"de/getting-started/#mit-javascriptbrowser","title":"Mit JavaScript/Browser","text":"<p>\u00d6ffnen Sie Ihre Browser-Konsole und f\u00fchren Sie aus:</p> <pre><code>// Connect to d-back\nconst socket = new WebSocket('ws://localhost:3000');\n\nsocket.onopen = () =&gt; {\n    console.log('Connected to d-back!');\n    // Request user data for a mock server\n    socket.send(JSON.stringify({\n        type: 'get_user_data',\n        serverId: '232769614004748288'\n    }));\n};\n\nsocket.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Received:', data);\n};\n</code></pre> <p>Nachrichtenformat: Die <code>get_user_data</code>-Anfrage umfasst: - <code>type</code>: Nachrichtentyp (<code>\"get_user_data\"</code>) - <code>serverId</code>: Discord-Server-ID (Snowflake-Format)</p> <p>Erwartete Antwort: Sie erhalten ein JSON-Objekt mit Benutzerdaten: <pre><code>{\n  \"type\": \"user_data\",\n  \"serverId\": \"232769614004748288\",\n  \"users\": {\n    \"user123\": {\n      \"uid\": \"user123\",\n      \"username\": \"ExampleUser\",\n      \"status\": \"online\",\n      \"roleColor\": \"#ff6b6b\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"de/getting-started/#mit-der-python-websockets-bibliothek","title":"Mit der Python-websockets-Bibliothek","text":"<p>Sie k\u00f6nnen sich auch mit der Python-<code>websockets</code>-Bibliothek verbinden:</p> <pre><code>import asyncio\nimport json\nimport websockets\n\nasync def test_connection():\n    uri = \"ws://localhost:3000\"\n    async with websockets.connect(uri) as websocket:\n        print(\"Connected to d-back!\")\n\n        # Request user data\n        request = {\n            \"type\": \"get_user_data\",\n            \"serverId\": \"232769614004748288\"\n        }\n        await websocket.send(json.dumps(request))\n\n        # Receive response\n        response = await websocket.recv()\n        data = json.loads(response)\n        print(\"Received:\", data)\n\nasyncio.run(test_connection())\n</code></pre>"},{"location":"de/getting-started/#erwartetes-verhalten","title":"Erwartetes Verhalten","text":"<p>Wenn Sie sich erfolgreich verbinden, sollten Sie sehen: 1. Verbindung hergestellt: WebSocket \u00f6ffnet sich erfolgreich 2. Serverliste empfangen: Anfangsnachricht mit verf\u00fcgbaren Discord-Servern 3. Benutzerdaten zur\u00fcckgegeben: Antwort mit Mock-Benutzerpr\u00e4senz und Rolleninformationen</p>"},{"location":"de/getting-started/#mock-daten-verstehen","title":"Mock-Daten verstehen","text":"<p>d-back kommt mit vorkonfigurierten Mock-Discord-Servern f\u00fcr Entwicklung und Tests. Das bedeutet, Sie k\u00f6nnen sofort mit dem Erstellen und Testen beginnen, ohne Discord-API-Anmeldeinformationen einzurichten!</p> <p>Die verf\u00fcgbaren Mock-Server sind:</p> <ul> <li>d-world-Server (<code>232769614004748288</code>): Haupt-Entwicklungsserver mit 4 aktiven Benutzern in verschiedenen Stati</li> <li>docs-Server (<code>482241773318701056</code>): Dokumentationsserver mit 1 Benutzer</li> <li>oauth2-Server (<code>123456789012345678</code>): Gesch\u00fctzter Server zum Testen von OAuth2-Authentifizierungsabl\u00e4ufen mit 1 Benutzer</li> <li>my repos-Server (<code>987654321098765432</code>): Repository-Showcase-Server mit 21 Benutzern</li> </ul> <p>Perfekt f\u00fcr Entwicklung</p> <p>Mock-Daten sind ideal f\u00fcr:</p> <ul> <li>Frontend-Entwicklung ohne Backend-Abh\u00e4ngigkeiten</li> <li>Testen der d-zone-Visualisierung mit realistischen Daten</li> <li>Demonstrieren des Systems ohne Discord-API-Schl\u00fcssel</li> <li>CI/CD-Pipelines und automatisierte Tests</li> </ul> <p>Um echte Discord-Daten in der Produktion zu verwenden, m\u00fcssen Sie benutzerdefinierte Datenanbieter implementieren. Siehe die Anleitung Benutzerdefinierte Datenanbieter f\u00fcr Details.</p>"},{"location":"de/getting-started/#nachste-schritte","title":"N\u00e4chste Schritte","text":"<p>Herzlichen Gl\u00fcckwunsch! Sie haben jetzt d-back in Betrieb. Hier ist, was Sie als N\u00e4chstes erkunden sollten:</p> <ul> <li>Benutzerhandbuch: Erfahren Sie mehr \u00fcber Konfigurationsoptionen, Callbacks und Anpassung</li> <li>Konfiguration: Passen Sie Servereinstellungen, Ports und statische Dateiauslieferung an</li> <li>Callbacks &amp; Anpassung: Ersetzen Sie Mock-Daten durch Ihre eigenen Datenquellen</li> <li>Benutzerdefinierte Datenanbieter: Integrieren Sie Discord-API oder Datenbanken</li> <li>API-Referenz: Detaillierte Dokumentation aller Klassen und Methoden</li> <li>Entwicklerhandbuch: Beitragsrichtlinien und Architektur\u00fcbersicht</li> </ul> <p>Hilfe ben\u00f6tigt?</p> <p>Wenn Sie auf Probleme sto\u00dfen, \u00fcberpr\u00fcfen Sie die GitHub Issues oder starten Sie eine Diskussion.</p>"},{"location":"de/user-guide/","title":"Benutzerhandbuch","text":"<p>Willkommen zum d-back-Benutzerhandbuch! Dieser umfassende Leitfaden deckt alles ab, was Sie ben\u00f6tigen, um d-back effektiv als WebSocket-Server f\u00fcr Ihre d-zone Ambient-Life-Simulation oder andere Echtzeitanwendungen zu nutzen.</p>"},{"location":"de/user-guide/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Dieses Handbuch ist f\u00fcr Benutzer konzipiert, die bereits das Tutorial Erste Schritte abgeschlossen haben und tiefer in die Funktionen und M\u00f6glichkeiten von d-back eintauchen m\u00f6chten. Egal, ob Sie das Serververhalten anpassen, echte Discord-Daten integrieren oder Ihre Einrichtung optimieren m\u00f6chten, Sie finden hier die ben\u00f6tigten Informationen.</p> <p>Das Benutzerhandbuch ist in drei Hauptbereiche unterteilt:</p> <ul> <li>Konfiguration: Erfahren Sie, wie Sie d-back \u00fcber Befehlszeilenoptionen, Umgebungsvariablen und programmatische Einstellungen konfigurieren</li> <li>Callbacks &amp; Anpassung: Entdecken Sie, wie Sie das Serververhalten mit Callback-Funktionen f\u00fcr Datenabruf, Authentifizierung und mehr anpassen</li> <li>Benutzerdefinierte Datenanbieter: Ersetzen Sie Mock-Daten durch echte Discord-API-Integration oder Ihre eigenen benutzerdefinierten Datenquellen</li> </ul>"},{"location":"de/user-guide/#handbuch-struktur","title":"Handbuch-Struktur","text":"<ul> <li> <p> Konfiguration</p> <p>Erfahren Sie mehr \u00fcber Befehlszeilenoptionen, Umgebungsvariablen und Servereinstellungen</p> <p> Konfigurationsleitfaden</p> </li> <li> <p> Callbacks &amp; Anpassung</p> <p>Passen Sie das Serververhalten mit Callback-Funktionen f\u00fcr Datenabruf und Authentifizierung an</p> <p> Callbacks-Leitfaden</p> </li> <li> <p> Benutzerdefinierte Datenanbieter</p> <p>Ersetzen Sie Mock-Daten durch echte Discord-API-Integration oder benutzerdefinierte Datenquellen</p> <p> Datenanbieter-Leitfaden</p> </li> </ul>"},{"location":"de/user-guide/#haufige-anwendungsfalle","title":"H\u00e4ufige Anwendungsf\u00e4lle","text":"<p>M\u00fcssen Sie eine bestimmte Aufgabe erf\u00fcllen? Hier sind Schnelllinks zu h\u00e4ufigen Szenarien:</p> Szenario Wo suchen Ich m\u00f6chte den Serverport \u00e4ndern Konfiguration \u2192 Befehlszeilenoptionen Ich m\u00f6chte meine eigenen statischen Dateien ausliefern Konfiguration \u2192 Statische Dateiauslieferung Ich m\u00f6chte echte Discord-Daten verwenden Benutzerdefinierte Datenanbieter Ich m\u00f6chte OAuth2-Authentifizierung hinzuf\u00fcgen Callbacks \u2192 OAuth2-Validierung Ich m\u00f6chte benutzerdefinierte Nachrichten broadcasten Callbacks \u2192 Broadcasting-Methoden Ich m\u00f6chte das Benutzerdatenformat anpassen Callbacks \u2192 Benutzerdaten-Callback"},{"location":"de/user-guide/#schnellreferenz","title":"Schnellreferenz","text":"<p>Hier ist eine Zusammenfassung der Schl\u00fcsselkonzepte, denen Sie in diesem Handbuch begegnen werden:</p> Konzept Beschreibung WebSocketServer Haupt-Serverklasse, die WebSocket-Verbindungen, HTTP-Anfragen und Nachrichten-Broadcasting verwaltet MockDataProvider Integrierter Testdatengenerator, der Discord-Benutzeraktivit\u00e4t simuliert Callbacks Anpassungs-Hooks, die es erm\u00f6glichen, Standardverhalten zu \u00fcberschreiben (z.B. <code>on_get_user_data</code>, <code>on_get_server_data</code>) Statische Dateiauslieferung Integrierter HTTP-Server f\u00fcr die Bereitstellung von Frontend-Assets wie HTML, CSS und JavaScript Broadcasting Methoden zum Senden von Echtzeit-Updates an verbundene Clients (Pr\u00e4senz, Nachrichten, etc.) OAuth2-Integration Unterst\u00fctzung f\u00fcr Discord-OAuth2-Authentifizierung und Token-Validierung <p>API-Details ben\u00f6tigt?</p> <p>F\u00fcr detaillierte API-Dokumentation einschlie\u00dflich Methodensignaturen, Parametern und R\u00fcckgabetypen siehe die API-Referenz.</p>"},{"location":"de/user-guide/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<p>Bereit, Ihre d-back-Einrichtung anzupassen? Beginnen Sie mit:</p> <ol> <li>Konfiguration - Richten Sie Ihren Server mit den richtigen Einstellungen ein</li> <li>Callbacks &amp; Anpassung - Erfahren Sie, wie Sie Verhalten anpassen</li> <li>Benutzerdefinierte Datenanbieter - Integrieren Sie echte Datenquellen</li> </ol> <p>Fragen?</p> <p>Wenn Sie nicht finden, wonach Sie suchen, \u00fcberpr\u00fcfen Sie die API-Referenz oder besuchen Sie unsere GitHub Discussions.</p>"},{"location":"de/user-guide/callbacks/","title":"Callbacks &amp; Anpassung","text":"<p>Dieser Leitfaden erkl\u00e4rt, wie Sie das Verhalten von d-back mithilfe von Callback-Funktionen f\u00fcr Datenabruf, Authentifizierung und Nachrichten-Broadcasting anpassen.</p>"},{"location":"de/user-guide/callbacks/#einfuhrung","title":"Einf\u00fchrung","text":"<p>d-back bietet ein flexibles Callback-System, das es Ihnen erm\u00f6glicht, das Standardverhalten des Servers zu \u00fcberschreiben. Callbacks sind asynchrone Funktionen, die an bestimmten Punkten im Server-Lebenszyklus aufgerufen werden und Ihnen Folgendes erm\u00f6glichen:</p> <ul> <li>Benutzerdefinierte Benutzer- und Serverdaten bereitzustellen</li> <li>Benutzerdefinierte Authentifizierung zu implementieren</li> <li>Anfragen f\u00fcr statische Dateien zu verwalten</li> <li>Discord-Benutzer und OAuth2-Tokens zu validieren</li> </ul> <p>Alle Callbacks sind optional. Wenn kein Callback bereitgestellt wird, verwendet d-back sein Standardverhalten (normalerweise unter Verwendung von MockDataProvider).</p>"},{"location":"de/user-guide/callbacks/#verfugbare-callbacks","title":"Verf\u00fcgbare Callbacks","text":""},{"location":"de/user-guide/callbacks/#on_get_server_data-callback","title":"on_get_server_data Callback","text":"<p>Zweck: Die Liste der verf\u00fcgbaren Discord-Server bereitstellen.</p> <p>Signatur: <pre><code>async def on_get_server_data(server_id: Optional[str] = None) -&gt; Dict[str, Any]\n</code></pre></p> <p>Parameter: - <code>server_id</code> (str, optional): Spezifische Server-ID zum Abrufen oder None f\u00fcr alle Server</p> <p>R\u00fcckgabe: Dictionary, das Server-IDs auf Serverdaten abbildet</p> <p>Beispiel: <pre><code>async def get_my_servers(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {\n        \"232769614004748288\": {\n            \"id\": \"232769614004748288\",\n            \"name\": \"d-world\",\n            \"passworded\": False,\n            \"is_default\": True,\n            \"enabled\": True\n        }\n    }\n\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\nserver.on_get_server_data(get_my_servers)\n</code></pre></p>"},{"location":"de/user-guide/callbacks/#on_get_user_data-callback","title":"on_get_user_data Callback","text":"<p>Zweck: Benutzerdaten f\u00fcr einen bestimmten Discord-Server bereitstellen.</p> <p>Signatur: <pre><code>async def on_get_user_data(server_id: str) -&gt; Dict[str, Any]\n</code></pre></p> <p>Parameter: - <code>server_id</code> (str): Discord-Server-ID, f\u00fcr die Benutzerdaten abgerufen werden sollen</p> <p>R\u00fcckgabe: Dictionary, das Benutzer-IDs auf Benutzerdaten abbildet</p> <p>Anwendungsfall: Mock-Daten durch echte Discord-Benutzer, Datenbankdaten oder benutzerdefinierte Quellen ersetzen.</p> <p>Beispiel: <pre><code>async def my_user_data_provider(server_id: str) -&gt; Dict[str, Any]:\n    return {\n        \"user123\": {\n            \"uid\": \"user123\",\n            \"username\": \"Hans\",\n            \"status\": \"online\",\n            \"roleColor\": \"#3498db\"\n        }\n    }\n\nserver.on_get_user_data(my_user_data_provider)\n</code></pre></p>"},{"location":"de/user-guide/callbacks/#on_static_request-callback","title":"on_static_request Callback","text":"<p>Zweck: Benutzerdefinierte statische Dateianfragen verwalten.</p> <p>Signatur: <pre><code>async def on_static_request(path: str) -&gt; Optional[Tuple[str, str]]\n</code></pre></p> <p>Parameter: - <code>path</code> (str): Angeforderter Dateipfad (z.B. <code>/index.html</code>)</p> <p>R\u00fcckgabe: Tupel von <code>(content_type, content)</code> beides Strings, oder None f\u00fcr Standardverarbeitung</p> <p>Anwendungsfall: Inhalte dynamisch generieren, von benutzerdefinierten Standorten ausliefern oder benutzerdefinierte Routing-Logik implementieren.</p> <p>Beispiel: <pre><code>async def custom_static_handler(path: str) -&gt; Optional[Tuple[str, str]]:\n    if path == \"/api/status\":\n        return (\"application/json\", '{\"status\": \"ok\"}')\n    return None  # Use default handler\n\nserver.on_static_request(custom_static_handler)\n</code></pre></p>"},{"location":"de/user-guide/callbacks/#on_validate_discord_user-callback","title":"on_validate_discord_user Callback","text":"<p>Zweck: Discord-Benutzer w\u00e4hrend OAuth2-Authentifizierungsabl\u00e4ufen validieren.</p> <p>Signatur: <pre><code>async def on_validate_discord_user(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool\n</code></pre></p> <p>Parameter: - <code>token</code> (str): Discord-OAuth2-Zugriffstoken - <code>user_info</code> (Dict): Discord-Benutzerinformationen von der API - <code>server_id</code> (str): ID des Discord-Servers, auf den zugegriffen wird</p> <p>R\u00fcckgabe: True, wenn der Benutzer Zugriff haben sollte, False andernfalls</p> <p>Anwendungsfall: Rollenbasierte Zugriffskontrolle implementieren, Server-Mitgliedschaftsvalidierung oder benutzerdefinierte Autorisierungslogik.</p> <p>Beispiel: <pre><code>async def validate_user(token: str, user_info: Dict[str, Any], server_id: str) -&gt; bool:\n    # Check if user is member of the server\n    user_id = user_info.get(\"id\")\n    # Your validation logic here\n    return True  # or False\n\nserver.on_validate_discord_user(validate_user)\n</code></pre></p>"},{"location":"de/user-guide/callbacks/#on_get_client_id-callback","title":"on_get_client_id Callback","text":"<p>Zweck: Discord-OAuth2-Client-ID bereitstellen.</p> <p>Signatur: <pre><code>async def on_get_client_id(server_id: str) -&gt; str\n</code></pre></p> <p>Parameter: - <code>server_id</code> (str): Discord-Server-ID</p> <p>R\u00fcckgabe: Discord-OAuth2-Client-ID als String</p> <p>Anwendungsfall: OAuth2-Authentifizierung f\u00fcr gesch\u00fctzten Serverzugriff aktivieren.</p> <p>Beispiel: <pre><code>async def get_client_id(server_id: str) -&gt; str:\n    return \"YOUR_DISCORD_CLIENT_ID\"\n\nserver.on_get_client_id(get_client_id)\n</code></pre></p>"},{"location":"de/user-guide/callbacks/#callbacks-registrieren","title":"Callbacks registrieren","text":"<p>Callbacks werden durch Aufrufen der entsprechenden Methode auf der Serverinstanz registriert:</p> <pre><code>from d_back.server import WebSocketServer\n\nserver = WebSocketServer(port=3000, host=\"localhost\")\n\n# Register callbacks\nserver.on_get_user_data(my_user_data_callback)\nserver.on_get_server_data(my_server_data_callback)\nserver.on_validate_discord_user(my_validation_callback)\n</code></pre>"},{"location":"de/user-guide/callbacks/#vollstandiges-beispiel","title":"Vollst\u00e4ndiges Beispiel","text":"<pre><code>import asyncio\nfrom typing import Dict, Any, Optional, Tuple\nfrom d_back.server import WebSocketServer\n\nasync def get_servers(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {\n        \"232769614004748288\": {\n            \"id\": \"232769614004748288\",\n            \"name\": \"Mein Server\",\n            \"passworded\": False,\n            \"is_default\": True,\n            \"enabled\": True\n        }\n    }\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\nasync def get_users(server_id: str) -&gt; Dict[str, Any]:\n    return {\n        \"user1\": {\n            \"uid\": \"user1\",\n            \"username\": \"Hans\",\n            \"status\": \"online\",\n            \"roleColor\": \"#3498db\"\n        }\n    }\n\nasync def main():\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Register callbacks\n    server.on_get_server_data(get_servers)\n    server.on_get_user_data(get_users)\n\n    await server.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"de/user-guide/callbacks/#broadcasting-methods","title":"Broadcasting-Methoden","text":"<p>d-back stellt Methoden bereit, um Echtzeit-Updates an verbundene Clients zu broadcasten.</p>"},{"location":"de/user-guide/callbacks/#broadcast_message","title":"broadcast_message","text":"<p>Eine benutzerdefinierte Nachricht an alle verbundenen Clients broadcasten.</p> <pre><code>await server.broadcast_message({\n    \"type\": \"custom_event\",\n    \"data\": {\"message\": \"Hallo, Welt!\"}\n})\n</code></pre>"},{"location":"de/user-guide/callbacks/#broadcast_presence","title":"broadcast_presence","text":"<p>Pr\u00e4senzstatus\u00e4nderung eines Benutzers broadcasten.</p> <pre><code>await server.broadcast_presence(\"232769614004748288\", \"user123\", \"dnd\")\n</code></pre>"},{"location":"de/user-guide/callbacks/#broadcast_client_id_update","title":"broadcast_client_id_update","text":"<p>OAuth2-Client-ID-Aktualisierung broadcasten.</p> <pre><code>await server.broadcast_client_id_update(\"232769614004748288\", \"YOUR_CLIENT_ID\")\n</code></pre>"},{"location":"de/user-guide/callbacks/#oauth2-integration","title":"OAuth2-Integration","text":"<p>Um OAuth2-Authentifizierung zu aktivieren:</p> <ol> <li>Registrieren Sie einen <code>on_get_client_id</code>-Callback, um Ihre Discord-Client-ID bereitzustellen</li> <li>Registrieren Sie einen <code>on_validate_discord_user</code>-Callback, um Benutzer zu validieren</li> <li>Konfigurieren Sie Ihre Discord-Anwendung mit der entsprechenden Redirect-URI</li> </ol> <p>OAuth2-Ablauf: 1. Client fordert Client-ID an 2. Client leitet Benutzer zu Discord zur Authentifizierung weiter 3. Discord leitet zur\u00fcck mit Autorisierungscode 4. Client tauscht Code gegen Zugriffstoken aus 5. d-back validiert Token und Benutzer mit Ihrem Callback</p>"},{"location":"de/user-guide/callbacks/#fehlerbehandlung","title":"Fehlerbehandlung","text":"<p>Implementieren Sie immer angemessene Fehlerbehandlung in Ihren Callbacks:</p> <pre><code>async def safe_user_data_provider(server_id: str) -&gt; Dict[str, Any]:\n    try:\n        # Your data retrieval logic\n        data = await fetch_user_data(server_id)\n        return data\n    except Exception as e:\n        print(f\"Error fetching user data: {e}\")\n        return {}  # Return empty dict on error\n\nserver.on_get_user_data(safe_user_data_provider)\n</code></pre>"},{"location":"de/user-guide/callbacks/#best-practices","title":"Best Practices","text":"<ul> <li>Halten Sie Callbacks asynchron: Alle Callbacks m\u00fcssen <code>async</code>-Funktionen sein</li> <li>Behandeln Sie Fehler elegant: Verwenden Sie immer try/except</li> <li>Geben Sie korrekt formatierte Daten zur\u00fcck: Folgen Sie den erwarteten Datenstrukturen</li> <li>Dokumentieren Sie Ihr Verhalten: F\u00fcgen Sie Docstrings zu benutzerdefinierten Callback-Funktionen hinzu</li> <li>Testen Sie gr\u00fcndlich: Testen Sie Callbacks mit verschiedenen Eingaben</li> </ul>"},{"location":"de/user-guide/callbacks/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<ul> <li>Benutzerdefinierte Datenanbieter: Erfahren Sie, wie Sie echte Discord-API oder Datenbanken integrieren</li> <li>Konfiguration: Konfigurieren Sie Serveroptionen und Bereitstellung</li> <li>API-Referenz: Detaillierte API-Dokumentation</li> </ul>"},{"location":"de/user-guide/configuration/","title":"Konfiguration","text":"<p>Dieser Leitfaden behandelt alle M\u00f6glichkeiten, wie Sie d-back an Ihre Bed\u00fcrfnisse anpassen k\u00f6nnen, von Befehlszeilenoptionen bis hin zu programmatischen Einstellungen und Umgebungsvariablen.</p>"},{"location":"de/user-guide/configuration/#einfuhrung","title":"Einf\u00fchrung","text":"<p>d-back bietet flexible Konfigurationsoptionen zur Anpassung an verschiedene Bereitstellungsszenarien. Egal, ob Sie es w\u00e4hrend der Entwicklung \u00fcber die Befehlszeile ausf\u00fchren oder in eine gr\u00f6\u00dfere Python-Anwendung integrieren, Sie haben volle Kontrolle \u00fcber Serververhalten, Netzwerkeinstellungen und statische Dateiauslieferung.</p>"},{"location":"de/user-guide/configuration/#command-line-options","title":"Befehlszeilenoptionen","text":"<p>Beim Ausf\u00fchren von d-back \u00fcber die Befehlszeile k\u00f6nnen Sie sein Verhalten mit verschiedenen Optionen anpassen:</p>"},{"location":"de/user-guide/configuration/#verfugbare-optionen","title":"Verf\u00fcgbare Optionen","text":"Option Standard Beschreibung Beispiel <code>--port</code> <code>3000</code> Port, auf dem der WebSocket-Server ausgef\u00fchrt werden soll <code>d_back --port 8080</code> <code>--host</code> <code>localhost</code> Host, an den der Server gebunden werden soll <code>d_back --host 0.0.0.0</code> <code>--static-dir</code> Integriert Verzeichnis, von dem statische Dateien ausgeliefert werden <code>d_back --static-dir ./my-frontend-build</code> <code>--version</code> - Versionsinformationen anzeigen <code>d_back --version</code>"},{"location":"de/user-guide/configuration/#verwendungsbeispiele","title":"Verwendungsbeispiele","text":"<p>Standardstart (localhost:3000): <pre><code>d_back\n</code></pre></p> <p>Benutzerdefinierter Host und Port: <pre><code>d_back --host 0.0.0.0 --port 8080\n</code></pre></p> <p>Dies macht den Server von anderen Maschinen in Ihrem Netzwerk aus zug\u00e4nglich.</p> <p>Benutzerdefiniertes statisches Verzeichnis: <pre><code>d_back --static-dir ./my-frontend-build\n</code></pre></p> <p>Liefern Sie Ihre eigenen Frontend-Dateien anstelle der integrierten d-zone-Oberfl\u00e4che aus.</p> <p>Hilfe erhalten: <pre><code>d_back --help\n</code></pre></p> <p>Alle verf\u00fcgbaren Befehlszeilenoptionen anzeigen.</p> <p>Version pr\u00fcfen: <pre><code>d_back --version\n</code></pre></p> <p>Als Modul ausf\u00fchren</p> <p>Sie k\u00f6nnen d-back auch als Python-Modul mit denselben Optionen ausf\u00fchren: <pre><code>python -m d_back --host 0.0.0.0 --port 8080\n</code></pre></p>"},{"location":"de/user-guide/configuration/#programmatische-konfiguration","title":"Programmatische Konfiguration","text":"<p>F\u00fcr mehr Kontrolle und Integration in Ihre Python-Anwendungen k\u00f6nnen Sie d-back programmatisch konfigurieren:</p> <pre><code>import asyncio\nfrom d_back.server import WebSocketServer\n\nasync def main():\n    # Create server instance with custom settings\n    server = WebSocketServer(port=3000, host=\"localhost\")\n\n    # Configure callbacks (optional)\n    server.on_get_user_data(my_user_data_callback)\n    server.on_get_server_data(my_server_data_callback)\n\n    # Start the server\n    print(\"Starting d-back server...\")\n    await server.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"de/user-guide/configuration/#konstruktorparameter","title":"Konstruktorparameter","text":"<p>Die <code>WebSocketServer</code>-Klasse akzeptiert die folgenden Parameter:</p> <ul> <li><code>port</code> (int, optional): Die Portnummer, auf der gelauscht werden soll. Standard ist <code>3000</code>.</li> <li><code>host</code> (str, optional): Der Hostname oder die IP-Adresse, an die gebunden werden soll. Standard ist <code>\"localhost\"</code>.</li> </ul>"},{"location":"de/user-guide/configuration/#wann-programmatische-konfiguration-verwenden","title":"Wann programmatische Konfiguration verwenden","text":"<p>Verwenden Sie programmatische Konfiguration, wenn Sie:</p> <ul> <li>d-back in eine gr\u00f6\u00dfere Python-Anwendung integrieren m\u00fcssen</li> <li>Einstellungen basierend auf Laufzeitbedingungen dynamisch konfigurieren m\u00f6chten</li> <li>Auf Server-Instanzmethoden und -Attribute zugreifen m\u00fcssen</li> <li>Benutzerdefinierte Start-/Stopp-Logik implementieren m\u00f6chten</li> </ul>"},{"location":"de/user-guide/configuration/#umgebungsvariablen","title":"Umgebungsvariablen","text":"<p>Obwohl d-back standardm\u00e4\u00dfig keine Umgebungsvariablen verwendet, k\u00f6nnen Sie es leicht erweitern, um umgebungsbasierte Konfiguration zu unterst\u00fctzen:</p> <pre><code>import os\nfrom d_back.server import WebSocketServer\n\n# Example: Use environment variables\nport = int(os.getenv('D_BACK_PORT', 3000))\nhost = os.getenv('D_BACK_HOST', 'localhost')\n\nserver = WebSocketServer(port=port, host=host)\n</code></pre>"},{"location":"de/user-guide/configuration/#static-file-serving","title":"Statische Dateiauslieferung","text":"<p>d-back enth\u00e4lt einen integrierten HTTP-Server f\u00fcr die Auslieferung statischer Dateien, was die Bereitstellung Ihres d-zone-Frontends oder anderer Web-Assets vereinfacht.</p>"},{"location":"de/user-guide/configuration/#standardverhalten","title":"Standardverhalten","text":"<p>Standardm\u00e4\u00dfig liefert d-back statische Dateien aus seinem integrierten <code>dist/</code>-Verzeichnis aus, das das d-zone-Frontend enth\u00e4lt.</p>"},{"location":"de/user-guide/configuration/#benutzerdefiniertes-statisches-verzeichnis","title":"Benutzerdefiniertes statisches Verzeichnis","text":"<p>Um Ihre eigenen statischen Dateien auszuliefern:</p> <p>Befehlszeile: <pre><code>d_back --static-dir ./my-frontend-build\n</code></pre></p> <p>Programmatisch: <pre><code>from pathlib import Path\nserver = WebSocketServer(port=3000, host=\"localhost\")\nserver.static_dir = Path(\"./my-frontend-build\")\n</code></pre></p>"},{"location":"de/user-guide/configuration/#mock-server-konfiguration","title":"Mock-Server-Konfiguration","text":"<p>d-back kommt mit vorkonfigurierten Mock-Discord-Servern f\u00fcr Entwicklung und Tests. Diese Server bieten realistische Benutzerdaten ohne Discord-API-Anmeldeinformationen zu ben\u00f6tigen.</p>"},{"location":"de/user-guide/configuration/#verfugbare-mock-server","title":"Verf\u00fcgbare Mock-Server","text":"Servername Server-ID Beschreibung Benutzeranzahl d-world-Server <code>232769614004748288</code> Haupt-Entwicklungsserver mit vielf\u00e4ltiger Benutzeraktivit\u00e4t 4 Benutzer docs-Server <code>482241773318701056</code> Dokumentationsserver mit moderater Aktivit\u00e4t 1 Benutzer oauth2-Server <code>123456789012345678</code> Gesch\u00fctzter Server zum Testen von OAuth2-Flows 1 Benutzer my repos-Server <code>987654321098765432</code> Repository-Showcase-Server 21 Benutzer"},{"location":"de/user-guide/configuration/#server-lebenszyklus","title":"Server-Lebenszyklus","text":""},{"location":"de/user-guide/configuration/#server-starten","title":"Server starten","text":"<p>Methode 1: <code>start()</code> <pre><code>await server.start()\n</code></pre> Startet den WebSocket-Server und HTTP-Listener.</p> <p>Methode 2: <code>run_forever()</code> <pre><code>await server.run_forever()\n</code></pre> Startet den Server und f\u00fchrt ihn unbegrenzt aus, bis er unterbrochen wird.</p>"},{"location":"de/user-guide/configuration/#server-stoppen","title":"Server stoppen","text":"<p>Ordnungsgem\u00e4\u00dfes Herunterfahren: <pre><code>await server.stop()\n</code></pre> Schlie\u00dft alle aktiven Verbindungen und stoppt den Server sauber.</p>"},{"location":"de/user-guide/configuration/#best-practices","title":"Best Practices","text":""},{"location":"de/user-guide/configuration/#netzwerkkonfiguration","title":"Netzwerkkonfiguration","text":"<p>Entwicklung vs Produktion</p> <ul> <li>Entwicklung: Verwenden Sie <code>localhost</code>, um den Zugriff nur auf Ihren Rechner zu beschr\u00e4nken</li> <li>Produktion: Verwenden Sie <code>0.0.0.0</code>, um Verbindungen von jeder Netzwerkschnittstelle zu akzeptieren</li> </ul>"},{"location":"de/user-guide/configuration/#konfigurationsverwaltung","title":"Konfigurationsverwaltung","text":"<ul> <li>Verwenden Sie Umgebungsvariablen f\u00fcr bereitstellungsspezifische Einstellungen</li> <li>Verwenden Sie programmatische Konfiguration f\u00fcr komplexe oder dynamische Setups</li> <li>Dokumentieren Sie Ihre Konfiguration in README oder Bereitstellungsleitf\u00e4den</li> <li>Halten Sie Geheimnisse sicher: Niemals API-Schl\u00fcssel oder Tokens fest codieren</li> </ul>"},{"location":"de/user-guide/configuration/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<p>Jetzt, da Sie verstehen, wie Sie d-back konfigurieren, lernen Sie, wie Sie sein Verhalten anpassen:</p> <ul> <li>Callbacks &amp; Anpassung: Standardverhalten mit benutzerdefinierten Callbacks \u00fcberschreiben</li> <li>Benutzerdefinierte Datenanbieter: Mock-Daten durch echte Quellen ersetzen</li> <li>API-Referenz: Detaillierte API-Dokumentation</li> </ul>"},{"location":"de/user-guide/custom-data-providers/","title":"Benutzerdefinierte Datenanbieter","text":"<p>Dieser Leitfaden erkl\u00e4rt, wie Sie die Mock-Daten von d-back durch echte Datenquellen wie die Discord-API, Datenbanken oder benutzerdefinierte Dienste ersetzen.</p>"},{"location":"de/user-guide/custom-data-providers/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Standardm\u00e4\u00dfig verwendet d-back <code>MockDataProvider</code>, um simulierte Benutzer- und Serverdaten zu generieren. Dies ist perfekt f\u00fcr Entwicklung und Tests, aber f\u00fcr die Produktion m\u00f6chten Sie echte Daten verwenden. Dieser Leitfaden zeigt, wie Sie benutzerdefinierte Datenquellen integrieren.</p>"},{"location":"de/user-guide/custom-data-providers/#mock-daten-verstehen","title":"Mock-Daten verstehen","text":"<p>Der integrierte <code>MockDataProvider</code> generiert: - 4 vorkonfigurierte Discord-Server - Benutzer mit realistischen Stati (online, idle, dnd, offline) - Rollenfarben und verschiedene Benutzernamen - Periodische Pr\u00e4senz\u00e4nderungen und Nachrichten</p> <p>Um die Mock-Daten in Aktion zu sehen, starten Sie d-back und verbinden Sie sich \u00fcber WebSocket mit dem Server.</p>"},{"location":"de/user-guide/custom-data-providers/#benutzerdefinierten-benutzerdatenanbieter-erstellen","title":"Benutzerdefinierten Benutzerdatenanbieter erstellen","text":"<p>Ersetzen Sie den Mock-Benutzerdatenanbieter durch Ihre eigene Funktion:</p> <pre><code>from typing import Dict, Any\nfrom d_back.server import WebSocketServer\n\nasync def get_user_data(server_id: str) -&gt; Dict[str, Any]:\n    # Your custom logic to fetch user data\n    users = {\n        \"123456789\": {\n            \"uid\": \"123456789\",\n            \"username\": \"Echter Benutzer\",\n            \"status\": \"online\",\n            \"roleColor\": \"#5865F2\"\n        }\n    }\n    return users\n\nserver = WebSocketServer(port=3000, host=\"localhost\")\nserver.on_get_user_data(get_user_data)\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#benutzerdefinierten-serverdatenanbieter-erstellen","title":"Benutzerdefinierten Serverdatenanbieter erstellen","text":"<p>\u00c4hnlich k\u00f6nnen Sie Ihre eigene Serverliste bereitstellen:</p> <pre><code>from typing import Dict, Any, Optional\n\nasync def get_server_data(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {\n        \"987654321\": {\n            \"id\": \"987654321\",\n            \"name\": \"Mein Discord-Server\",\n            \"passworded\": False,\n            \"is_default\": True,\n            \"enabled\": True\n        }\n    }\n\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\nserver.on_get_server_data(get_server_data)\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#discord-api-integration","title":"Discord-API-Integration","text":"<p>Um echte Discord-Daten zu verwenden, nutzen Sie die <code>discord.py</code>-Bibliothek oder direkte HTTP-Anfragen:</p>"},{"location":"de/user-guide/custom-data-providers/#verwendung-von-discordpy","title":"Verwendung von discord.py","text":"<pre><code>import discord\nfrom discord.ext import commands\nfrom d_back.server import WebSocketServer\n\nbot = commands.Bot(command_prefix=\"!\", intents=discord.Intents.all())\nws_server = WebSocketServer(port=3000, host=\"localhost\")\n\nasync def get_discord_user_data(server_id: str) -&gt; Dict[str, Any]:\n    guild = bot.get_guild(int(server_id))\n    if not guild:\n        return {}\n\n    users = {}\n    for member in guild.members:\n        users[str(member.id)] = {\n            \"uid\": str(member.id),\n            \"username\": member.display_name,\n            \"status\": str(member.status),\n            \"roleColor\": str(member.color) if member.color else \"#000000\"\n        }\n    return users\n\nasync def get_discord_servers(server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n    servers = {}\n    for guild in bot.guilds:\n        servers[str(guild.id)] = {\n            \"id\": str(guild.id),\n            \"name\": guild.name,\n            \"passworded\": False,\n            \"is_default\": False,\n            \"enabled\": True\n        }\n\n    if server_id:\n        return {server_id: servers.get(server_id, {})}\n    return servers\n\n# Register callbacks\nws_server.on_get_user_data(get_discord_user_data)\nws_server.on_get_server_data(get_discord_servers)\n\n# Discord bot events\n@bot.event\nasync def on_ready():\n    \"\"\"Start WebSocket server when bot is ready.\"\"\"\n    print(f\"Bot logged in as {bot.user}\")\n    print(f\"Starting WebSocket server...\")\n    await ws_server.start()\n\n@bot.event\nasync def on_presence_update(before, after):\n    \"\"\"Broadcast presence changes to d-zone.\"\"\"\n    if before.status != after.status:\n        await ws_server.broadcast_presence(\n            str(after.guild.id),\n            str(after.id),\n            str(after.status)\n        )\n\n# Run bot\nbot.run(\"YOUR_BOT_TOKEN\")\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#datenbankintegration","title":"Datenbankintegration","text":"<p>F\u00fcr persistente Daten verwenden Sie eine Datenbank:</p>"},{"location":"de/user-guide/custom-data-providers/#verwendung-von-postgresql-mit-asyncpg","title":"Verwendung von PostgreSQL mit asyncpg","text":"<pre><code>import asyncpg\nfrom typing import Dict, Any, Optional\n\nclass DatabaseProvider:\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n        self.pool = None\n\n    async def connect(self):\n        self.pool = await asyncpg.create_pool(self.connection_string)\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        async with self.pool.acquire() as conn:\n            rows = await conn.fetch(\n                \"SELECT user_id, username, status, role_color FROM users WHERE server_id = $1\",\n                server_id\n            )\n\n            users = {}\n            for row in rows:\n                users[row['user_id']] = {\n                    \"uid\": row['user_id'],\n                    \"username\": row['username'],\n                    \"status\": row['status'],\n                    \"roleColor\": row['role_color']\n                }\n            return users\n\n    async def get_server_data(self, server_id: Optional[str] = None) -&gt; Dict[str, Any]:\n        async with self.pool.acquire() as conn:\n            if server_id:\n                rows = await conn.fetch(\n                    \"SELECT * FROM servers WHERE server_id = $1\",\n                    server_id\n                )\n            else:\n                rows = await conn.fetch(\"SELECT * FROM servers\")\n\n            servers = {}\n            for row in rows:\n                servers[row['server_id']] = {\n                    \"id\": row['server_id'],\n                    \"name\": row['name'],\n                    \"passworded\": row['passworded'],\n                    \"is_default\": row['is_default'],\n                    \"enabled\": row['enabled']\n                }\n            return servers\n\n# Usage\nasync def main():\n    db = DatabaseProvider(\"postgresql://user:pass@localhost/d_back\")\n    await db.connect()\n\n    # Create server with database callbacks\n    server = WebSocketServer(port=3000, host=\"0.0.0.0\")\n    server.on_get_user_data(db.get_user_data)\n    server.on_get_server_data(db.get_server_data)\n\n    await server.start()\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#hybrider-ansatz","title":"Hybrider Ansatz","text":"<p>Kombinieren Sie mehrere Datenquellen:</p> <pre><code>async def hybrid_user_data(server_id: str) -&gt; Dict[str, Any]:\n    # Try Discord API first\n    discord_users = await get_discord_users(server_id)\n\n    # Fall back to database if Discord unavailable\n    if not discord_users:\n        discord_users = await get_database_users(server_id)\n\n    # Merge with cached data\n    cached_users = await get_cached_users(server_id)\n    discord_users.update(cached_users)\n\n    return discord_users\n\nserver.on_get_user_data(hybrid_user_data)\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#echtzeit-updates","title":"Echtzeit-Updates","text":"<p>Um Clients zu aktualisieren, wenn sich Daten \u00e4ndern:</p> <pre><code># When user status changes\nawait server.broadcast_presence(server_id, user_id, new_status)\n\n# When you want to trigger full data refresh\nawait server.broadcast_message({\n    \"type\": \"refresh_data\",\n    \"serverId\": server_id\n})\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#benutzerdefinierte-anbieter-testen","title":"Benutzerdefinierte Anbieter testen","text":"<p>Testen Sie immer Ihre Datenanbieter:</p> <pre><code>import pytest\n\n@pytest.mark.asyncio\nasync def test_server_with_custom_provider():\n    \"\"\"Test WebSocketServer with custom data provider.\"\"\"\n    server = WebSocketServer(port=3001, host=\"localhost\")\n    server.on_get_user_data(get_user_data)\n\n    # Start server\n    await server.start()\n\n    # Connect client and test\n    async with websockets.connect(\"ws://localhost:3001\") as websocket:\n        # Request user data\n        await websocket.send(json.dumps({\n            \"type\": \"get_user_data\",\n            \"serverId\": \"232769614004748288\"\n        }))\n\n        # Receive response\n        response = await websocket.recv()\n        data = json.loads(response)\n\n        assert data[\"type\"] == \"user_data\"\n        assert \"users\" in data\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#leistungsoptimierung","title":"Leistungsoptimierung","text":""},{"location":"de/user-guide/custom-data-providers/#caching","title":"Caching","text":"<pre><code>from functools import lru_cache\nfrom datetime import datetime, timedelta\n\nclass CachedProvider:\n    def __init__(self):\n        self.cache = {}\n        self.cache_timeout = timedelta(minutes=5)\n\n    async def get_user_data(self, server_id: str) -&gt; Dict[str, Any]:\n        now = datetime.now()\n\n        # Check cache\n        if server_id in self.cache:\n            cached_data, cached_time = self.cache[server_id]\n            if now - cached_time &lt; self.cache_timeout:\n                return cached_data\n\n        # Fetch fresh data\n        data = await fetch_from_api(server_id)\n        self.cache[server_id] = (data, now)\n        return data\n</code></pre>"},{"location":"de/user-guide/custom-data-providers/#fehlerbehebung","title":"Fehlerbehebung","text":""},{"location":"de/user-guide/custom-data-providers/#haufige-probleme","title":"H\u00e4ufige Probleme","text":"<p>Datenformat-Diskrepanzen: <pre><code># Always validate and transform data\ndef validate_user_data(data: Dict) -&gt; Dict:\n    \"\"\"Ensure user data has required fields.\"\"\"\n    required_fields = [\"uid\", \"username\", \"status\", \"roleColor\"]\n\n    for user_id, user_data in data.items():\n        for field in required_fields:\n            if field not in user_data:\n                user_data[field] = get_default_value(field)\n\n    return data\n</code></pre></p>"},{"location":"de/user-guide/custom-data-providers/#was-kommt-als-nachstes","title":"Was kommt als N\u00e4chstes?","text":"<ul> <li>Callbacks &amp; Anpassung: Erfahren Sie mehr \u00fcber das Callback-System</li> <li>Konfiguration: Konfigurieren Sie Serveroptionen</li> <li>API-Referenz: Vollst\u00e4ndige API-Dokumentation</li> </ul>"}]}